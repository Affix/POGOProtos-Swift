// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "EncounterSettings.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Pogoprotos { public struct Settings { public struct Master { }}}

public func == (lhs: Pogoprotos.Settings.Master.EncounterSettings, rhs: Pogoprotos.Settings.Master.EncounterSettings) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasSpinBonusThreshold == rhs.hasSpinBonusThreshold) && (!lhs.hasSpinBonusThreshold || lhs.spinBonusThreshold == rhs.spinBonusThreshold)
  fieldCheck = fieldCheck && (lhs.hasExcellentThrowThreshold == rhs.hasExcellentThrowThreshold) && (!lhs.hasExcellentThrowThreshold || lhs.excellentThrowThreshold == rhs.excellentThrowThreshold)
  fieldCheck = fieldCheck && (lhs.hasGreatThrowThreshold == rhs.hasGreatThrowThreshold) && (!lhs.hasGreatThrowThreshold || lhs.greatThrowThreshold == rhs.greatThrowThreshold)
  fieldCheck = fieldCheck && (lhs.hasNiceThrowThreshold == rhs.hasNiceThrowThreshold) && (!lhs.hasNiceThrowThreshold || lhs.niceThrowThreshold == rhs.niceThrowThreshold)
  fieldCheck = fieldCheck && (lhs.hasMilestoneThreshold == rhs.hasMilestoneThreshold) && (!lhs.hasMilestoneThreshold || lhs.milestoneThreshold == rhs.milestoneThreshold)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Pogoprotos.Settings.Master {
  public struct EncounterSettingsRoot {
    public static var sharedInstance : EncounterSettingsRoot {
     struct Static {
         static let instance : EncounterSettingsRoot = EncounterSettingsRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class EncounterSettings : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasSpinBonusThreshold:Bool = false
    public private(set) var spinBonusThreshold:Float = Float(0)

    public private(set) var hasExcellentThrowThreshold:Bool = false
    public private(set) var excellentThrowThreshold:Float = Float(0)

    public private(set) var hasGreatThrowThreshold:Bool = false
    public private(set) var greatThrowThreshold:Float = Float(0)

    public private(set) var hasNiceThrowThreshold:Bool = false
    public private(set) var niceThrowThreshold:Float = Float(0)

    public private(set) var hasMilestoneThreshold:Bool = false
    public private(set) var milestoneThreshold:Int32 = Int32(0)

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasSpinBonusThreshold {
        try output.writeFloat(1, value:spinBonusThreshold)
      }
      if hasExcellentThrowThreshold {
        try output.writeFloat(2, value:excellentThrowThreshold)
      }
      if hasGreatThrowThreshold {
        try output.writeFloat(3, value:greatThrowThreshold)
      }
      if hasNiceThrowThreshold {
        try output.writeFloat(4, value:niceThrowThreshold)
      }
      if hasMilestoneThreshold {
        try output.writeInt32(5, value:milestoneThreshold)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasSpinBonusThreshold {
        serialize_size += spinBonusThreshold.computeFloatSize(1)
      }
      if hasExcellentThrowThreshold {
        serialize_size += excellentThrowThreshold.computeFloatSize(2)
      }
      if hasGreatThrowThreshold {
        serialize_size += greatThrowThreshold.computeFloatSize(3)
      }
      if hasNiceThrowThreshold {
        serialize_size += niceThrowThreshold.computeFloatSize(4)
      }
      if hasMilestoneThreshold {
        serialize_size += milestoneThreshold.computeInt32Size(5)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Settings.Master.EncounterSettings> {
      var mergedArray = Array<Pogoprotos.Settings.Master.EncounterSettings>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.Master.EncounterSettings? {
      return try Pogoprotos.Settings.Master.EncounterSettings.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Settings.Master.EncounterSettings {
      return try Pogoprotos.Settings.Master.EncounterSettings.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Settings.Master.EncounterSettingsRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.EncounterSettings {
      return try Pogoprotos.Settings.Master.EncounterSettings.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.Master.EncounterSettings {
      return try Pogoprotos.Settings.Master.EncounterSettings.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.EncounterSettings {
      return try Pogoprotos.Settings.Master.EncounterSettings.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.Master.EncounterSettings {
      return try Pogoprotos.Settings.Master.EncounterSettings.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.EncounterSettings {
      return try Pogoprotos.Settings.Master.EncounterSettings.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Settings.Master.EncounterSettings.Builder {
      return Pogoprotos.Settings.Master.EncounterSettings.classBuilder() as! Pogoprotos.Settings.Master.EncounterSettings.Builder
    }
    public func getBuilder() -> Pogoprotos.Settings.Master.EncounterSettings.Builder {
      return classBuilder() as! Pogoprotos.Settings.Master.EncounterSettings.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.Master.EncounterSettings.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.Master.EncounterSettings.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Settings.Master.EncounterSettings.Builder {
      return try Pogoprotos.Settings.Master.EncounterSettings.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Settings.Master.EncounterSettings) throws -> Pogoprotos.Settings.Master.EncounterSettings.Builder {
      return try Pogoprotos.Settings.Master.EncounterSettings.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasSpinBonusThreshold {
        jsonMap["spinBonusThreshold"] = NSNumber(float:spinBonusThreshold)
      }
      if hasExcellentThrowThreshold {
        jsonMap["excellentThrowThreshold"] = NSNumber(float:excellentThrowThreshold)
      }
      if hasGreatThrowThreshold {
        jsonMap["greatThrowThreshold"] = NSNumber(float:greatThrowThreshold)
      }
      if hasNiceThrowThreshold {
        jsonMap["niceThrowThreshold"] = NSNumber(float:niceThrowThreshold)
      }
      if hasMilestoneThreshold {
        jsonMap["milestoneThreshold"] = NSNumber(int:milestoneThreshold)
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.Master.EncounterSettings {
      return try Pogoprotos.Settings.Master.EncounterSettings.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Settings.Master.EncounterSettings {
      return try Pogoprotos.Settings.Master.EncounterSettings.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasSpinBonusThreshold {
        output += "\(indent) spinBonusThreshold: \(spinBonusThreshold) \n"
      }
      if hasExcellentThrowThreshold {
        output += "\(indent) excellentThrowThreshold: \(excellentThrowThreshold) \n"
      }
      if hasGreatThrowThreshold {
        output += "\(indent) greatThrowThreshold: \(greatThrowThreshold) \n"
      }
      if hasNiceThrowThreshold {
        output += "\(indent) niceThrowThreshold: \(niceThrowThreshold) \n"
      }
      if hasMilestoneThreshold {
        output += "\(indent) milestoneThreshold: \(milestoneThreshold) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasSpinBonusThreshold {
               hashCode = (hashCode &* 31) &+ spinBonusThreshold.hashValue
            }
            if hasExcellentThrowThreshold {
               hashCode = (hashCode &* 31) &+ excellentThrowThreshold.hashValue
            }
            if hasGreatThrowThreshold {
               hashCode = (hashCode &* 31) &+ greatThrowThreshold.hashValue
            }
            if hasNiceThrowThreshold {
               hashCode = (hashCode &* 31) &+ niceThrowThreshold.hashValue
            }
            if hasMilestoneThreshold {
               hashCode = (hashCode &* 31) &+ milestoneThreshold.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Settings.Master.EncounterSettings"
    }
    override public func className() -> String {
        return "Pogoprotos.Settings.Master.EncounterSettings"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Settings.Master.EncounterSettings.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Settings.Master.EncounterSettings = Pogoprotos.Settings.Master.EncounterSettings()
      public func getMessage() -> Pogoprotos.Settings.Master.EncounterSettings {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasSpinBonusThreshold:Bool {
           get {
                return builderResult.hasSpinBonusThreshold
           }
      }
      public var spinBonusThreshold:Float {
           get {
                return builderResult.spinBonusThreshold
           }
           set (value) {
               builderResult.hasSpinBonusThreshold = true
               builderResult.spinBonusThreshold = value
           }
      }
      public func setSpinBonusThreshold(value:Float) -> Pogoprotos.Settings.Master.EncounterSettings.Builder {
        self.spinBonusThreshold = value
        return self
      }
      public func clearSpinBonusThreshold() -> Pogoprotos.Settings.Master.EncounterSettings.Builder{
           builderResult.hasSpinBonusThreshold = false
           builderResult.spinBonusThreshold = Float(0)
           return self
      }
      public var hasExcellentThrowThreshold:Bool {
           get {
                return builderResult.hasExcellentThrowThreshold
           }
      }
      public var excellentThrowThreshold:Float {
           get {
                return builderResult.excellentThrowThreshold
           }
           set (value) {
               builderResult.hasExcellentThrowThreshold = true
               builderResult.excellentThrowThreshold = value
           }
      }
      public func setExcellentThrowThreshold(value:Float) -> Pogoprotos.Settings.Master.EncounterSettings.Builder {
        self.excellentThrowThreshold = value
        return self
      }
      public func clearExcellentThrowThreshold() -> Pogoprotos.Settings.Master.EncounterSettings.Builder{
           builderResult.hasExcellentThrowThreshold = false
           builderResult.excellentThrowThreshold = Float(0)
           return self
      }
      public var hasGreatThrowThreshold:Bool {
           get {
                return builderResult.hasGreatThrowThreshold
           }
      }
      public var greatThrowThreshold:Float {
           get {
                return builderResult.greatThrowThreshold
           }
           set (value) {
               builderResult.hasGreatThrowThreshold = true
               builderResult.greatThrowThreshold = value
           }
      }
      public func setGreatThrowThreshold(value:Float) -> Pogoprotos.Settings.Master.EncounterSettings.Builder {
        self.greatThrowThreshold = value
        return self
      }
      public func clearGreatThrowThreshold() -> Pogoprotos.Settings.Master.EncounterSettings.Builder{
           builderResult.hasGreatThrowThreshold = false
           builderResult.greatThrowThreshold = Float(0)
           return self
      }
      public var hasNiceThrowThreshold:Bool {
           get {
                return builderResult.hasNiceThrowThreshold
           }
      }
      public var niceThrowThreshold:Float {
           get {
                return builderResult.niceThrowThreshold
           }
           set (value) {
               builderResult.hasNiceThrowThreshold = true
               builderResult.niceThrowThreshold = value
           }
      }
      public func setNiceThrowThreshold(value:Float) -> Pogoprotos.Settings.Master.EncounterSettings.Builder {
        self.niceThrowThreshold = value
        return self
      }
      public func clearNiceThrowThreshold() -> Pogoprotos.Settings.Master.EncounterSettings.Builder{
           builderResult.hasNiceThrowThreshold = false
           builderResult.niceThrowThreshold = Float(0)
           return self
      }
      public var hasMilestoneThreshold:Bool {
           get {
                return builderResult.hasMilestoneThreshold
           }
      }
      public var milestoneThreshold:Int32 {
           get {
                return builderResult.milestoneThreshold
           }
           set (value) {
               builderResult.hasMilestoneThreshold = true
               builderResult.milestoneThreshold = value
           }
      }
      public func setMilestoneThreshold(value:Int32) -> Pogoprotos.Settings.Master.EncounterSettings.Builder {
        self.milestoneThreshold = value
        return self
      }
      public func clearMilestoneThreshold() -> Pogoprotos.Settings.Master.EncounterSettings.Builder{
           builderResult.hasMilestoneThreshold = false
           builderResult.milestoneThreshold = Int32(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Settings.Master.EncounterSettings.Builder {
        builderResult = Pogoprotos.Settings.Master.EncounterSettings()
        return self
      }
      override public func clone() throws -> Pogoprotos.Settings.Master.EncounterSettings.Builder {
        return try Pogoprotos.Settings.Master.EncounterSettings.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Settings.Master.EncounterSettings {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Settings.Master.EncounterSettings {
        let returnMe:Pogoprotos.Settings.Master.EncounterSettings = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Settings.Master.EncounterSettings) throws -> Pogoprotos.Settings.Master.EncounterSettings.Builder {
        if other == Pogoprotos.Settings.Master.EncounterSettings() {
         return self
        }
        if other.hasSpinBonusThreshold {
             spinBonusThreshold = other.spinBonusThreshold
        }
        if other.hasExcellentThrowThreshold {
             excellentThrowThreshold = other.excellentThrowThreshold
        }
        if other.hasGreatThrowThreshold {
             greatThrowThreshold = other.greatThrowThreshold
        }
        if other.hasNiceThrowThreshold {
             niceThrowThreshold = other.niceThrowThreshold
        }
        if other.hasMilestoneThreshold {
             milestoneThreshold = other.milestoneThreshold
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.Master.EncounterSettings.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.EncounterSettings.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 13:
            spinBonusThreshold = try input.readFloat()

          case 21:
            excellentThrowThreshold = try input.readFloat()

          case 29:
            greatThrowThreshold = try input.readFloat()

          case 37:
            niceThrowThreshold = try input.readFloat()

          case 40:
            milestoneThreshold = try input.readInt32()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.Master.EncounterSettings.Builder {
        let resultDecodedBuilder = Pogoprotos.Settings.Master.EncounterSettings.Builder()
        if let jsonValueSpinBonusThreshold = jsonMap["spinBonusThreshold"] as? NSNumber {
          resultDecodedBuilder.spinBonusThreshold = jsonValueSpinBonusThreshold.floatValue
        }
        if let jsonValueExcellentThrowThreshold = jsonMap["excellentThrowThreshold"] as? NSNumber {
          resultDecodedBuilder.excellentThrowThreshold = jsonValueExcellentThrowThreshold.floatValue
        }
        if let jsonValueGreatThrowThreshold = jsonMap["greatThrowThreshold"] as? NSNumber {
          resultDecodedBuilder.greatThrowThreshold = jsonValueGreatThrowThreshold.floatValue
        }
        if let jsonValueNiceThrowThreshold = jsonMap["niceThrowThreshold"] as? NSNumber {
          resultDecodedBuilder.niceThrowThreshold = jsonValueNiceThrowThreshold.floatValue
        }
        if let jsonValueMilestoneThreshold = jsonMap["milestoneThreshold"] as? NSNumber {
          resultDecodedBuilder.milestoneThreshold = jsonValueMilestoneThreshold.intValue
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Settings.Master.EncounterSettings.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Settings.Master.EncounterSettings.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
