// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "PokemonSettings.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Pogoprotos { public struct Settings { public struct Master { }}}

public func == (lhs: Pogoprotos.Settings.Master.PokemonSettings, rhs: Pogoprotos.Settings.Master.PokemonSettings) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasPokemonId == rhs.hasPokemonId) && (!lhs.hasPokemonId || lhs.pokemonId == rhs.pokemonId)
  fieldCheck = fieldCheck && (lhs.hasModelScale == rhs.hasModelScale) && (!lhs.hasModelScale || lhs.modelScale == rhs.modelScale)
  fieldCheck = fieldCheck && (lhs.hasTypes == rhs.hasTypes) && (!lhs.hasTypes || lhs.types == rhs.types)
  fieldCheck = fieldCheck && (lhs.hasType2 == rhs.hasType2) && (!lhs.hasType2 || lhs.type2 == rhs.type2)
  fieldCheck = fieldCheck && (lhs.hasCamera == rhs.hasCamera) && (!lhs.hasCamera || lhs.camera == rhs.camera)
  fieldCheck = fieldCheck && (lhs.hasEncounter == rhs.hasEncounter) && (!lhs.hasEncounter || lhs.encounter == rhs.encounter)
  fieldCheck = fieldCheck && (lhs.hasStats == rhs.hasStats) && (!lhs.hasStats || lhs.stats == rhs.stats)
  fieldCheck = fieldCheck && (lhs.quickMoves == rhs.quickMoves)
  fieldCheck = fieldCheck && (lhs.cinematicMoves == rhs.cinematicMoves)
  fieldCheck = fieldCheck && (lhs.animationTime == rhs.animationTime)
  fieldCheck = fieldCheck && (lhs.evolutionIds == rhs.evolutionIds)
  fieldCheck = fieldCheck && (lhs.hasEvolutionPips == rhs.hasEvolutionPips) && (!lhs.hasEvolutionPips || lhs.evolutionPips == rhs.evolutionPips)
  fieldCheck = fieldCheck && (lhs.hasRarity == rhs.hasRarity) && (!lhs.hasRarity || lhs.rarity == rhs.rarity)
  fieldCheck = fieldCheck && (lhs.hasPokedexHeightM == rhs.hasPokedexHeightM) && (!lhs.hasPokedexHeightM || lhs.pokedexHeightM == rhs.pokedexHeightM)
  fieldCheck = fieldCheck && (lhs.hasPokedexWeightKg == rhs.hasPokedexWeightKg) && (!lhs.hasPokedexWeightKg || lhs.pokedexWeightKg == rhs.pokedexWeightKg)
  fieldCheck = fieldCheck && (lhs.hasParentPokemonId == rhs.hasParentPokemonId) && (!lhs.hasParentPokemonId || lhs.parentPokemonId == rhs.parentPokemonId)
  fieldCheck = fieldCheck && (lhs.hasHeightStdDev == rhs.hasHeightStdDev) && (!lhs.hasHeightStdDev || lhs.heightStdDev == rhs.heightStdDev)
  fieldCheck = fieldCheck && (lhs.hasWeightStdDev == rhs.hasWeightStdDev) && (!lhs.hasWeightStdDev || lhs.weightStdDev == rhs.weightStdDev)
  fieldCheck = fieldCheck && (lhs.hasKmDistanceToHatch == rhs.hasKmDistanceToHatch) && (!lhs.hasKmDistanceToHatch || lhs.kmDistanceToHatch == rhs.kmDistanceToHatch)
  fieldCheck = fieldCheck && (lhs.hasFamilyId == rhs.hasFamilyId) && (!lhs.hasFamilyId || lhs.familyId == rhs.familyId)
  fieldCheck = fieldCheck && (lhs.hasCandyToEvolve == rhs.hasCandyToEvolve) && (!lhs.hasCandyToEvolve || lhs.candyToEvolve == rhs.candyToEvolve)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Pogoprotos.Settings.Master {
  public struct PokemonSettingsRoot {
    public static var sharedInstance : PokemonSettingsRoot {
     struct Static {
         static let instance : PokemonSettingsRoot = PokemonSettingsRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Pogoprotos.Enums.PokemonIdRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Enums.PokemonRarityRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Enums.PokemonTypeRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Enums.PokemonMoveRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Enums.PokemonFamilyIdRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Settings.Master.Pokemon.StatsAttributesRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Settings.Master.Pokemon.CameraAttributesRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Settings.Master.Pokemon.EncounterAttributesRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class PokemonSettings : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var pokemonId:Pogoprotos.Enums.PokemonId = Pogoprotos.Enums.PokemonId.Missingno
    public private(set) var hasPokemonId:Bool = false
    public private(set) var hasModelScale:Bool = false
    public private(set) var modelScale:Float = Float(0)

    public private(set) var types:Pogoprotos.Enums.PokemonType = Pogoprotos.Enums.PokemonType.PokemonTypeNone
    public private(set) var hasTypes:Bool = false
    public private(set) var type2:Pogoprotos.Enums.PokemonType = Pogoprotos.Enums.PokemonType.PokemonTypeNone
    public private(set) var hasType2:Bool = false
    public private(set) var hasCamera:Bool = false
    public private(set) var camera:Pogoprotos.Settings.Master.Pokemon.CameraAttributes!
    public private(set) var hasEncounter:Bool = false
    public private(set) var encounter:Pogoprotos.Settings.Master.Pokemon.EncounterAttributes!
    public private(set) var hasStats:Bool = false
    public private(set) var stats:Pogoprotos.Settings.Master.Pokemon.StatsAttributes!
    private var quickMovesMemoizedSerializedSize:Int32 = 0
    public private(set) var quickMoves:Array<Pogoprotos.Enums.PokemonMove> = Array<Pogoprotos.Enums.PokemonMove>()
    private var cinematicMovesMemoizedSerializedSize:Int32 = 0
    public private(set) var cinematicMoves:Array<Pogoprotos.Enums.PokemonMove> = Array<Pogoprotos.Enums.PokemonMove>()
    public private(set) var animationTime:Array<Float> = Array<Float>()
    private var animationTimeMemoizedSerializedSize:Int32 = -1
    private var evolutionIdsMemoizedSerializedSize:Int32 = 0
    public private(set) var evolutionIds:Array<Pogoprotos.Enums.PokemonId> = Array<Pogoprotos.Enums.PokemonId>()
    public private(set) var hasEvolutionPips:Bool = false
    public private(set) var evolutionPips:Int32 = Int32(0)

    public private(set) var rarity:Pogoprotos.Enums.PokemonRarity = Pogoprotos.Enums.PokemonRarity.Normal
    public private(set) var hasRarity:Bool = false
    public private(set) var hasPokedexHeightM:Bool = false
    public private(set) var pokedexHeightM:Float = Float(0)

    public private(set) var hasPokedexWeightKg:Bool = false
    public private(set) var pokedexWeightKg:Float = Float(0)

    public private(set) var parentPokemonId:Pogoprotos.Enums.PokemonId = Pogoprotos.Enums.PokemonId.Missingno
    public private(set) var hasParentPokemonId:Bool = false
    public private(set) var hasHeightStdDev:Bool = false
    public private(set) var heightStdDev:Float = Float(0)

    public private(set) var hasWeightStdDev:Bool = false
    public private(set) var weightStdDev:Float = Float(0)

    public private(set) var hasKmDistanceToHatch:Bool = false
    public private(set) var kmDistanceToHatch:Float = Float(0)

    public private(set) var familyId:Pogoprotos.Enums.PokemonFamilyId = Pogoprotos.Enums.PokemonFamilyId.FamilyUnset
    public private(set) var hasFamilyId:Bool = false
    public private(set) var hasCandyToEvolve:Bool = false
    public private(set) var candyToEvolve:Int32 = Int32(0)

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasPokemonId {
        try output.writeEnum(1, value:pokemonId.rawValue)
      }
      if hasModelScale {
        try output.writeFloat(3, value:modelScale)
      }
      if hasTypes {
        try output.writeEnum(4, value:types.rawValue)
      }
      if hasType2 {
        try output.writeEnum(5, value:type2.rawValue)
      }
      if hasCamera {
        try output.writeMessage(6, value:camera)
      }
      if hasEncounter {
        try output.writeMessage(7, value:encounter)
      }
      if hasStats {
        try output.writeMessage(8, value:stats)
      }
      for oneValueOfquickMoves in quickMoves {
          try output.writeEnum(9, value:oneValueOfquickMoves.rawValue)
      }
      for oneValueOfcinematicMoves in cinematicMoves {
          try output.writeEnum(10, value:oneValueOfcinematicMoves.rawValue)
      }
      if !animationTime.isEmpty {
        try output.writeRawVarint32(90)
        try output.writeRawVarint32(animationTimeMemoizedSerializedSize)
        for oneValueanimationTime in animationTime {
          try output.writeFloatNoTag(oneValueanimationTime)
        }
      }
      for oneValueOfevolutionIds in evolutionIds {
          try output.writeEnum(12, value:oneValueOfevolutionIds.rawValue)
      }
      if hasEvolutionPips {
        try output.writeInt32(13, value:evolutionPips)
      }
      if hasRarity {
        try output.writeEnum(14, value:rarity.rawValue)
      }
      if hasPokedexHeightM {
        try output.writeFloat(15, value:pokedexHeightM)
      }
      if hasPokedexWeightKg {
        try output.writeFloat(16, value:pokedexWeightKg)
      }
      if hasParentPokemonId {
        try output.writeEnum(17, value:parentPokemonId.rawValue)
      }
      if hasHeightStdDev {
        try output.writeFloat(18, value:heightStdDev)
      }
      if hasWeightStdDev {
        try output.writeFloat(19, value:weightStdDev)
      }
      if hasKmDistanceToHatch {
        try output.writeFloat(20, value:kmDistanceToHatch)
      }
      if hasFamilyId {
        try output.writeEnum(21, value:familyId.rawValue)
      }
      if hasCandyToEvolve {
        try output.writeInt32(22, value:candyToEvolve)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if (hasPokemonId) {
        serialize_size += pokemonId.rawValue.computeEnumSize(1)
      }
      if hasModelScale {
        serialize_size += modelScale.computeFloatSize(3)
      }
      if (hasTypes) {
        serialize_size += types.rawValue.computeEnumSize(4)
      }
      if (hasType2) {
        serialize_size += type2.rawValue.computeEnumSize(5)
      }
      if hasCamera {
          if let varSizecamera = camera?.computeMessageSize(6) {
              serialize_size += varSizecamera
          }
      }
      if hasEncounter {
          if let varSizeencounter = encounter?.computeMessageSize(7) {
              serialize_size += varSizeencounter
          }
      }
      if hasStats {
          if let varSizestats = stats?.computeMessageSize(8) {
              serialize_size += varSizestats
          }
      }
      var dataSizequickMoves:Int32 = 0
      for oneValueOfquickMoves in quickMoves {
          dataSizequickMoves += oneValueOfquickMoves.rawValue.computeEnumSizeNoTag()
      }
      serialize_size += dataSizequickMoves
      serialize_size += (1 * Int32(quickMoves.count))
      var dataSizecinematicMoves:Int32 = 0
      for oneValueOfcinematicMoves in cinematicMoves {
          dataSizecinematicMoves += oneValueOfcinematicMoves.rawValue.computeEnumSizeNoTag()
      }
      serialize_size += dataSizecinematicMoves
      serialize_size += (1 * Int32(cinematicMoves.count))
      var dataSizeAnimationTime:Int32 = 0
      dataSizeAnimationTime = 4 * Int32(animationTime.count)
      serialize_size += dataSizeAnimationTime
      if !animationTime.isEmpty {
        serialize_size += 1
        serialize_size += dataSizeAnimationTime.computeInt32SizeNoTag()
      }
      animationTimeMemoizedSerializedSize = dataSizeAnimationTime
      var dataSizeevolutionIds:Int32 = 0
      for oneValueOfevolutionIds in evolutionIds {
          dataSizeevolutionIds += oneValueOfevolutionIds.rawValue.computeEnumSizeNoTag()
      }
      serialize_size += dataSizeevolutionIds
      serialize_size += (1 * Int32(evolutionIds.count))
      if hasEvolutionPips {
        serialize_size += evolutionPips.computeInt32Size(13)
      }
      if (hasRarity) {
        serialize_size += rarity.rawValue.computeEnumSize(14)
      }
      if hasPokedexHeightM {
        serialize_size += pokedexHeightM.computeFloatSize(15)
      }
      if hasPokedexWeightKg {
        serialize_size += pokedexWeightKg.computeFloatSize(16)
      }
      if (hasParentPokemonId) {
        serialize_size += parentPokemonId.rawValue.computeEnumSize(17)
      }
      if hasHeightStdDev {
        serialize_size += heightStdDev.computeFloatSize(18)
      }
      if hasWeightStdDev {
        serialize_size += weightStdDev.computeFloatSize(19)
      }
      if hasKmDistanceToHatch {
        serialize_size += kmDistanceToHatch.computeFloatSize(20)
      }
      if (hasFamilyId) {
        serialize_size += familyId.rawValue.computeEnumSize(21)
      }
      if hasCandyToEvolve {
        serialize_size += candyToEvolve.computeInt32Size(22)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Settings.Master.PokemonSettings> {
      var mergedArray = Array<Pogoprotos.Settings.Master.PokemonSettings>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.Master.PokemonSettings? {
      return try Pogoprotos.Settings.Master.PokemonSettings.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Settings.Master.PokemonSettings {
      return try Pogoprotos.Settings.Master.PokemonSettings.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Settings.Master.PokemonSettingsRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.PokemonSettings {
      return try Pogoprotos.Settings.Master.PokemonSettings.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.Master.PokemonSettings {
      return try Pogoprotos.Settings.Master.PokemonSettings.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.PokemonSettings {
      return try Pogoprotos.Settings.Master.PokemonSettings.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.Master.PokemonSettings {
      return try Pogoprotos.Settings.Master.PokemonSettings.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.PokemonSettings {
      return try Pogoprotos.Settings.Master.PokemonSettings.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
      return Pogoprotos.Settings.Master.PokemonSettings.classBuilder() as! Pogoprotos.Settings.Master.PokemonSettings.Builder
    }
    public func getBuilder() -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
      return classBuilder() as! Pogoprotos.Settings.Master.PokemonSettings.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.Master.PokemonSettings.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.Master.PokemonSettings.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
      return try Pogoprotos.Settings.Master.PokemonSettings.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Settings.Master.PokemonSettings) throws -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
      return try Pogoprotos.Settings.Master.PokemonSettings.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasPokemonId {
        jsonMap["pokemonId"] = pokemonId.toString()
      }
      if hasModelScale {
        jsonMap["modelScale"] = NSNumber(float:modelScale)
      }
      if hasTypes {
        jsonMap["type"] = types.toString()
      }
      if hasType2 {
        jsonMap["type2"] = type2.toString()
      }
      if hasCamera {
        jsonMap["camera"] = try camera.encode()
      }
      if hasEncounter {
        jsonMap["encounter"] = try encounter.encode()
      }
      if hasStats {
        jsonMap["stats"] = try stats.encode()
      }
      if !quickMoves.isEmpty {
        var jsonArrayQuickMoves:Array<String> = []
          for oneValueQuickMoves in quickMoves {
            jsonArrayQuickMoves += [oneValueQuickMoves.toString()]
          }
        jsonMap["quickMoves"] = jsonArrayQuickMoves
      }
      if !cinematicMoves.isEmpty {
        var jsonArrayCinematicMoves:Array<String> = []
          for oneValueCinematicMoves in cinematicMoves {
            jsonArrayCinematicMoves += [oneValueCinematicMoves.toString()]
          }
        jsonMap["cinematicMoves"] = jsonArrayCinematicMoves
      }
      if !animationTime.isEmpty {
        var jsonArrayAnimationTime:Array<NSNumber> = []
          for oneValueAnimationTime in animationTime {
            jsonArrayAnimationTime += [NSNumber(float:oneValueAnimationTime)]
          }
        jsonMap["animationTime"] = jsonArrayAnimationTime
      }
      if !evolutionIds.isEmpty {
        var jsonArrayEvolutionIds:Array<String> = []
          for oneValueEvolutionIds in evolutionIds {
            jsonArrayEvolutionIds += [oneValueEvolutionIds.toString()]
          }
        jsonMap["evolutionIds"] = jsonArrayEvolutionIds
      }
      if hasEvolutionPips {
        jsonMap["evolutionPips"] = NSNumber(int:evolutionPips)
      }
      if hasRarity {
        jsonMap["rarity"] = rarity.toString()
      }
      if hasPokedexHeightM {
        jsonMap["pokedexHeightM"] = NSNumber(float:pokedexHeightM)
      }
      if hasPokedexWeightKg {
        jsonMap["pokedexWeightKg"] = NSNumber(float:pokedexWeightKg)
      }
      if hasParentPokemonId {
        jsonMap["parentPokemonId"] = parentPokemonId.toString()
      }
      if hasHeightStdDev {
        jsonMap["heightStdDev"] = NSNumber(float:heightStdDev)
      }
      if hasWeightStdDev {
        jsonMap["weightStdDev"] = NSNumber(float:weightStdDev)
      }
      if hasKmDistanceToHatch {
        jsonMap["kmDistanceToHatch"] = NSNumber(float:kmDistanceToHatch)
      }
      if hasFamilyId {
        jsonMap["familyId"] = familyId.toString()
      }
      if hasCandyToEvolve {
        jsonMap["candyToEvolve"] = NSNumber(int:candyToEvolve)
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.Master.PokemonSettings {
      return try Pogoprotos.Settings.Master.PokemonSettings.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Settings.Master.PokemonSettings {
      return try Pogoprotos.Settings.Master.PokemonSettings.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if (hasPokemonId) {
        output += "\(indent) pokemonId: \(pokemonId.description)\n"
      }
      if hasModelScale {
        output += "\(indent) modelScale: \(modelScale) \n"
      }
      if (hasTypes) {
        output += "\(indent) types: \(types.description)\n"
      }
      if (hasType2) {
        output += "\(indent) type2: \(type2.description)\n"
      }
      if hasCamera {
        output += "\(indent) camera {\n"
        if let outDescCamera = camera {
          output += try outDescCamera.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasEncounter {
        output += "\(indent) encounter {\n"
        if let outDescEncounter = encounter {
          output += try outDescEncounter.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasStats {
        output += "\(indent) stats {\n"
        if let outDescStats = stats {
          output += try outDescStats.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      var quickMovesElementIndex:Int = 0
      for oneValueOfquickMoves in quickMoves {
          output += "\(indent) quickMoves[\(quickMovesElementIndex)]: \(oneValueOfquickMoves.description)\n"
          quickMovesElementIndex += 1
      }
      var cinematicMovesElementIndex:Int = 0
      for oneValueOfcinematicMoves in cinematicMoves {
          output += "\(indent) cinematicMoves[\(cinematicMovesElementIndex)]: \(oneValueOfcinematicMoves.description)\n"
          cinematicMovesElementIndex += 1
      }
      var animationTimeElementIndex:Int = 0
      for oneValueAnimationTime in animationTime  {
          output += "\(indent) animationTime[\(animationTimeElementIndex)]: \(oneValueAnimationTime)\n"
          animationTimeElementIndex += 1
      }
      var evolutionIdsElementIndex:Int = 0
      for oneValueOfevolutionIds in evolutionIds {
          output += "\(indent) evolutionIds[\(evolutionIdsElementIndex)]: \(oneValueOfevolutionIds.description)\n"
          evolutionIdsElementIndex += 1
      }
      if hasEvolutionPips {
        output += "\(indent) evolutionPips: \(evolutionPips) \n"
      }
      if (hasRarity) {
        output += "\(indent) rarity: \(rarity.description)\n"
      }
      if hasPokedexHeightM {
        output += "\(indent) pokedexHeightM: \(pokedexHeightM) \n"
      }
      if hasPokedexWeightKg {
        output += "\(indent) pokedexWeightKg: \(pokedexWeightKg) \n"
      }
      if (hasParentPokemonId) {
        output += "\(indent) parentPokemonId: \(parentPokemonId.description)\n"
      }
      if hasHeightStdDev {
        output += "\(indent) heightStdDev: \(heightStdDev) \n"
      }
      if hasWeightStdDev {
        output += "\(indent) weightStdDev: \(weightStdDev) \n"
      }
      if hasKmDistanceToHatch {
        output += "\(indent) kmDistanceToHatch: \(kmDistanceToHatch) \n"
      }
      if (hasFamilyId) {
        output += "\(indent) familyId: \(familyId.description)\n"
      }
      if hasCandyToEvolve {
        output += "\(indent) candyToEvolve: \(candyToEvolve) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasPokemonId {
               hashCode = (hashCode &* 31) &+ Int(pokemonId.rawValue)
            }
            if hasModelScale {
               hashCode = (hashCode &* 31) &+ modelScale.hashValue
            }
            if hasTypes {
               hashCode = (hashCode &* 31) &+ Int(types.rawValue)
            }
            if hasType2 {
               hashCode = (hashCode &* 31) &+ Int(type2.rawValue)
            }
            if hasCamera {
                if let hashValuecamera = camera?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuecamera
                }
            }
            if hasEncounter {
                if let hashValueencounter = encounter?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueencounter
                }
            }
            if hasStats {
                if let hashValuestats = stats?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuestats
                }
            }
            for oneValueOfquickMoves in quickMoves {
                hashCode = (hashCode &* 31) &+ Int(oneValueOfquickMoves.rawValue)
            }
            for oneValueOfcinematicMoves in cinematicMoves {
                hashCode = (hashCode &* 31) &+ Int(oneValueOfcinematicMoves.rawValue)
            }
            for oneValueAnimationTime in animationTime {
                hashCode = (hashCode &* 31) &+ oneValueAnimationTime.hashValue
            }
            for oneValueOfevolutionIds in evolutionIds {
                hashCode = (hashCode &* 31) &+ Int(oneValueOfevolutionIds.rawValue)
            }
            if hasEvolutionPips {
               hashCode = (hashCode &* 31) &+ evolutionPips.hashValue
            }
            if hasRarity {
               hashCode = (hashCode &* 31) &+ Int(rarity.rawValue)
            }
            if hasPokedexHeightM {
               hashCode = (hashCode &* 31) &+ pokedexHeightM.hashValue
            }
            if hasPokedexWeightKg {
               hashCode = (hashCode &* 31) &+ pokedexWeightKg.hashValue
            }
            if hasParentPokemonId {
               hashCode = (hashCode &* 31) &+ Int(parentPokemonId.rawValue)
            }
            if hasHeightStdDev {
               hashCode = (hashCode &* 31) &+ heightStdDev.hashValue
            }
            if hasWeightStdDev {
               hashCode = (hashCode &* 31) &+ weightStdDev.hashValue
            }
            if hasKmDistanceToHatch {
               hashCode = (hashCode &* 31) &+ kmDistanceToHatch.hashValue
            }
            if hasFamilyId {
               hashCode = (hashCode &* 31) &+ Int(familyId.rawValue)
            }
            if hasCandyToEvolve {
               hashCode = (hashCode &* 31) &+ candyToEvolve.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Settings.Master.PokemonSettings"
    }
    override public func className() -> String {
        return "Pogoprotos.Settings.Master.PokemonSettings"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Settings.Master.PokemonSettings.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Settings.Master.PokemonSettings = Pogoprotos.Settings.Master.PokemonSettings()
      public func getMessage() -> Pogoprotos.Settings.Master.PokemonSettings {
          return builderResult
      }

      required override public init () {
         super.init()
      }
        public var hasPokemonId:Bool{
            get {
                return builderResult.hasPokemonId
            }
        }
        public var pokemonId:Pogoprotos.Enums.PokemonId {
            get {
                return builderResult.pokemonId
            }
            set (value) {
                builderResult.hasPokemonId = true
                builderResult.pokemonId = value
            }
        }
        public func setPokemonId(value:Pogoprotos.Enums.PokemonId) -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
          self.pokemonId = value
          return self
        }
        public func clearPokemonId() -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
           builderResult.hasPokemonId = false
           builderResult.pokemonId = .Missingno
           return self
        }
      public var hasModelScale:Bool {
           get {
                return builderResult.hasModelScale
           }
      }
      public var modelScale:Float {
           get {
                return builderResult.modelScale
           }
           set (value) {
               builderResult.hasModelScale = true
               builderResult.modelScale = value
           }
      }
      public func setModelScale(value:Float) -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
        self.modelScale = value
        return self
      }
      public func clearModelScale() -> Pogoprotos.Settings.Master.PokemonSettings.Builder{
           builderResult.hasModelScale = false
           builderResult.modelScale = Float(0)
           return self
      }
        public var hasTypes:Bool{
            get {
                return builderResult.hasTypes
            }
        }
        public var types:Pogoprotos.Enums.PokemonType {
            get {
                return builderResult.types
            }
            set (value) {
                builderResult.hasTypes = true
                builderResult.types = value
            }
        }
        public func setTypes(value:Pogoprotos.Enums.PokemonType) -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
          self.types = value
          return self
        }
        public func clearTypes() -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
           builderResult.hasTypes = false
           builderResult.types = .PokemonTypeNone
           return self
        }
        public var hasType2:Bool{
            get {
                return builderResult.hasType2
            }
        }
        public var type2:Pogoprotos.Enums.PokemonType {
            get {
                return builderResult.type2
            }
            set (value) {
                builderResult.hasType2 = true
                builderResult.type2 = value
            }
        }
        public func setType2(value:Pogoprotos.Enums.PokemonType) -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
          self.type2 = value
          return self
        }
        public func clearType2() -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
           builderResult.hasType2 = false
           builderResult.type2 = .PokemonTypeNone
           return self
        }
      public var hasCamera:Bool {
           get {
               return builderResult.hasCamera
           }
      }
      public var camera:Pogoprotos.Settings.Master.Pokemon.CameraAttributes! {
           get {
               if cameraBuilder_ != nil {
                  builderResult.camera = cameraBuilder_.getMessage()
               }
               return builderResult.camera
           }
           set (value) {
               builderResult.hasCamera = true
               builderResult.camera = value
           }
      }
      private var cameraBuilder_:Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder! {
           didSet {
              builderResult.hasCamera = true
           }
      }
      public func getCameraBuilder() -> Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder {
        if cameraBuilder_ == nil {
           cameraBuilder_ = Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder()
           builderResult.camera = cameraBuilder_.getMessage()
           if camera != nil {
              try! cameraBuilder_.mergeFrom(camera)
           }
        }
        return cameraBuilder_
      }
      public func setCamera(value:Pogoprotos.Settings.Master.Pokemon.CameraAttributes!) -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
        self.camera = value
        return self
      }
      public func mergeCamera(value:Pogoprotos.Settings.Master.Pokemon.CameraAttributes) throws -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
        if builderResult.hasCamera {
          builderResult.camera = try Pogoprotos.Settings.Master.Pokemon.CameraAttributes.builderWithPrototype(builderResult.camera).mergeFrom(value).buildPartial()
        } else {
          builderResult.camera = value
        }
        builderResult.hasCamera = true
        return self
      }
      public func clearCamera() -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
        cameraBuilder_ = nil
        builderResult.hasCamera = false
        builderResult.camera = nil
        return self
      }
      public var hasEncounter:Bool {
           get {
               return builderResult.hasEncounter
           }
      }
      public var encounter:Pogoprotos.Settings.Master.Pokemon.EncounterAttributes! {
           get {
               if encounterBuilder_ != nil {
                  builderResult.encounter = encounterBuilder_.getMessage()
               }
               return builderResult.encounter
           }
           set (value) {
               builderResult.hasEncounter = true
               builderResult.encounter = value
           }
      }
      private var encounterBuilder_:Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder! {
           didSet {
              builderResult.hasEncounter = true
           }
      }
      public func getEncounterBuilder() -> Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder {
        if encounterBuilder_ == nil {
           encounterBuilder_ = Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder()
           builderResult.encounter = encounterBuilder_.getMessage()
           if encounter != nil {
              try! encounterBuilder_.mergeFrom(encounter)
           }
        }
        return encounterBuilder_
      }
      public func setEncounter(value:Pogoprotos.Settings.Master.Pokemon.EncounterAttributes!) -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
        self.encounter = value
        return self
      }
      public func mergeEncounter(value:Pogoprotos.Settings.Master.Pokemon.EncounterAttributes) throws -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
        if builderResult.hasEncounter {
          builderResult.encounter = try Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.builderWithPrototype(builderResult.encounter).mergeFrom(value).buildPartial()
        } else {
          builderResult.encounter = value
        }
        builderResult.hasEncounter = true
        return self
      }
      public func clearEncounter() -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
        encounterBuilder_ = nil
        builderResult.hasEncounter = false
        builderResult.encounter = nil
        return self
      }
      public var hasStats:Bool {
           get {
               return builderResult.hasStats
           }
      }
      public var stats:Pogoprotos.Settings.Master.Pokemon.StatsAttributes! {
           get {
               if statsBuilder_ != nil {
                  builderResult.stats = statsBuilder_.getMessage()
               }
               return builderResult.stats
           }
           set (value) {
               builderResult.hasStats = true
               builderResult.stats = value
           }
      }
      private var statsBuilder_:Pogoprotos.Settings.Master.Pokemon.StatsAttributes.Builder! {
           didSet {
              builderResult.hasStats = true
           }
      }
      public func getStatsBuilder() -> Pogoprotos.Settings.Master.Pokemon.StatsAttributes.Builder {
        if statsBuilder_ == nil {
           statsBuilder_ = Pogoprotos.Settings.Master.Pokemon.StatsAttributes.Builder()
           builderResult.stats = statsBuilder_.getMessage()
           if stats != nil {
              try! statsBuilder_.mergeFrom(stats)
           }
        }
        return statsBuilder_
      }
      public func setStats(value:Pogoprotos.Settings.Master.Pokemon.StatsAttributes!) -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
        self.stats = value
        return self
      }
      public func mergeStats(value:Pogoprotos.Settings.Master.Pokemon.StatsAttributes) throws -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
        if builderResult.hasStats {
          builderResult.stats = try Pogoprotos.Settings.Master.Pokemon.StatsAttributes.builderWithPrototype(builderResult.stats).mergeFrom(value).buildPartial()
        } else {
          builderResult.stats = value
        }
        builderResult.hasStats = true
        return self
      }
      public func clearStats() -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
        statsBuilder_ = nil
        builderResult.hasStats = false
        builderResult.stats = nil
        return self
      }
      public var quickMoves:Array<Pogoprotos.Enums.PokemonMove> {
          get {
              return builderResult.quickMoves
          }
          set (value) {
              builderResult.quickMoves = value
          }
      }
      public func setQuickMoves(value:Array<Pogoprotos.Enums.PokemonMove>) -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
        self.quickMoves = value
        return self
      }
      public func clearQuickMoves() -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
        builderResult.quickMoves.removeAll(keepCapacity: false)
        return self
      }
      public var cinematicMoves:Array<Pogoprotos.Enums.PokemonMove> {
          get {
              return builderResult.cinematicMoves
          }
          set (value) {
              builderResult.cinematicMoves = value
          }
      }
      public func setCinematicMoves(value:Array<Pogoprotos.Enums.PokemonMove>) -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
        self.cinematicMoves = value
        return self
      }
      public func clearCinematicMoves() -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
        builderResult.cinematicMoves.removeAll(keepCapacity: false)
        return self
      }
      public var animationTime:Array<Float> {
           get {
               return builderResult.animationTime
           }
           set (array) {
               builderResult.animationTime = array
           }
      }
      public func setAnimationTime(value:Array<Float>) -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
        self.animationTime = value
        return self
      }
      public func clearAnimationTime() -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
         builderResult.animationTime.removeAll(keepCapacity: false)
         return self
      }
      public var evolutionIds:Array<Pogoprotos.Enums.PokemonId> {
          get {
              return builderResult.evolutionIds
          }
          set (value) {
              builderResult.evolutionIds = value
          }
      }
      public func setEvolutionIds(value:Array<Pogoprotos.Enums.PokemonId>) -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
        self.evolutionIds = value
        return self
      }
      public func clearEvolutionIds() -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
        builderResult.evolutionIds.removeAll(keepCapacity: false)
        return self
      }
      public var hasEvolutionPips:Bool {
           get {
                return builderResult.hasEvolutionPips
           }
      }
      public var evolutionPips:Int32 {
           get {
                return builderResult.evolutionPips
           }
           set (value) {
               builderResult.hasEvolutionPips = true
               builderResult.evolutionPips = value
           }
      }
      public func setEvolutionPips(value:Int32) -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
        self.evolutionPips = value
        return self
      }
      public func clearEvolutionPips() -> Pogoprotos.Settings.Master.PokemonSettings.Builder{
           builderResult.hasEvolutionPips = false
           builderResult.evolutionPips = Int32(0)
           return self
      }
        public var hasRarity:Bool{
            get {
                return builderResult.hasRarity
            }
        }
        public var rarity:Pogoprotos.Enums.PokemonRarity {
            get {
                return builderResult.rarity
            }
            set (value) {
                builderResult.hasRarity = true
                builderResult.rarity = value
            }
        }
        public func setRarity(value:Pogoprotos.Enums.PokemonRarity) -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
          self.rarity = value
          return self
        }
        public func clearRarity() -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
           builderResult.hasRarity = false
           builderResult.rarity = .Normal
           return self
        }
      public var hasPokedexHeightM:Bool {
           get {
                return builderResult.hasPokedexHeightM
           }
      }
      public var pokedexHeightM:Float {
           get {
                return builderResult.pokedexHeightM
           }
           set (value) {
               builderResult.hasPokedexHeightM = true
               builderResult.pokedexHeightM = value
           }
      }
      public func setPokedexHeightM(value:Float) -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
        self.pokedexHeightM = value
        return self
      }
      public func clearPokedexHeightM() -> Pogoprotos.Settings.Master.PokemonSettings.Builder{
           builderResult.hasPokedexHeightM = false
           builderResult.pokedexHeightM = Float(0)
           return self
      }
      public var hasPokedexWeightKg:Bool {
           get {
                return builderResult.hasPokedexWeightKg
           }
      }
      public var pokedexWeightKg:Float {
           get {
                return builderResult.pokedexWeightKg
           }
           set (value) {
               builderResult.hasPokedexWeightKg = true
               builderResult.pokedexWeightKg = value
           }
      }
      public func setPokedexWeightKg(value:Float) -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
        self.pokedexWeightKg = value
        return self
      }
      public func clearPokedexWeightKg() -> Pogoprotos.Settings.Master.PokemonSettings.Builder{
           builderResult.hasPokedexWeightKg = false
           builderResult.pokedexWeightKg = Float(0)
           return self
      }
        public var hasParentPokemonId:Bool{
            get {
                return builderResult.hasParentPokemonId
            }
        }
        public var parentPokemonId:Pogoprotos.Enums.PokemonId {
            get {
                return builderResult.parentPokemonId
            }
            set (value) {
                builderResult.hasParentPokemonId = true
                builderResult.parentPokemonId = value
            }
        }
        public func setParentPokemonId(value:Pogoprotos.Enums.PokemonId) -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
          self.parentPokemonId = value
          return self
        }
        public func clearParentPokemonId() -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
           builderResult.hasParentPokemonId = false
           builderResult.parentPokemonId = .Missingno
           return self
        }
      public var hasHeightStdDev:Bool {
           get {
                return builderResult.hasHeightStdDev
           }
      }
      public var heightStdDev:Float {
           get {
                return builderResult.heightStdDev
           }
           set (value) {
               builderResult.hasHeightStdDev = true
               builderResult.heightStdDev = value
           }
      }
      public func setHeightStdDev(value:Float) -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
        self.heightStdDev = value
        return self
      }
      public func clearHeightStdDev() -> Pogoprotos.Settings.Master.PokemonSettings.Builder{
           builderResult.hasHeightStdDev = false
           builderResult.heightStdDev = Float(0)
           return self
      }
      public var hasWeightStdDev:Bool {
           get {
                return builderResult.hasWeightStdDev
           }
      }
      public var weightStdDev:Float {
           get {
                return builderResult.weightStdDev
           }
           set (value) {
               builderResult.hasWeightStdDev = true
               builderResult.weightStdDev = value
           }
      }
      public func setWeightStdDev(value:Float) -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
        self.weightStdDev = value
        return self
      }
      public func clearWeightStdDev() -> Pogoprotos.Settings.Master.PokemonSettings.Builder{
           builderResult.hasWeightStdDev = false
           builderResult.weightStdDev = Float(0)
           return self
      }
      public var hasKmDistanceToHatch:Bool {
           get {
                return builderResult.hasKmDistanceToHatch
           }
      }
      public var kmDistanceToHatch:Float {
           get {
                return builderResult.kmDistanceToHatch
           }
           set (value) {
               builderResult.hasKmDistanceToHatch = true
               builderResult.kmDistanceToHatch = value
           }
      }
      public func setKmDistanceToHatch(value:Float) -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
        self.kmDistanceToHatch = value
        return self
      }
      public func clearKmDistanceToHatch() -> Pogoprotos.Settings.Master.PokemonSettings.Builder{
           builderResult.hasKmDistanceToHatch = false
           builderResult.kmDistanceToHatch = Float(0)
           return self
      }
        public var hasFamilyId:Bool{
            get {
                return builderResult.hasFamilyId
            }
        }
        public var familyId:Pogoprotos.Enums.PokemonFamilyId {
            get {
                return builderResult.familyId
            }
            set (value) {
                builderResult.hasFamilyId = true
                builderResult.familyId = value
            }
        }
        public func setFamilyId(value:Pogoprotos.Enums.PokemonFamilyId) -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
          self.familyId = value
          return self
        }
        public func clearFamilyId() -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
           builderResult.hasFamilyId = false
           builderResult.familyId = .FamilyUnset
           return self
        }
      public var hasCandyToEvolve:Bool {
           get {
                return builderResult.hasCandyToEvolve
           }
      }
      public var candyToEvolve:Int32 {
           get {
                return builderResult.candyToEvolve
           }
           set (value) {
               builderResult.hasCandyToEvolve = true
               builderResult.candyToEvolve = value
           }
      }
      public func setCandyToEvolve(value:Int32) -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
        self.candyToEvolve = value
        return self
      }
      public func clearCandyToEvolve() -> Pogoprotos.Settings.Master.PokemonSettings.Builder{
           builderResult.hasCandyToEvolve = false
           builderResult.candyToEvolve = Int32(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
        builderResult = Pogoprotos.Settings.Master.PokemonSettings()
        return self
      }
      override public func clone() throws -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
        return try Pogoprotos.Settings.Master.PokemonSettings.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Settings.Master.PokemonSettings {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Settings.Master.PokemonSettings {
        let returnMe:Pogoprotos.Settings.Master.PokemonSettings = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Settings.Master.PokemonSettings) throws -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
        if other == Pogoprotos.Settings.Master.PokemonSettings() {
         return self
        }
        if other.hasPokemonId {
             pokemonId = other.pokemonId
        }
        if other.hasModelScale {
             modelScale = other.modelScale
        }
        if other.hasTypes {
             types = other.types
        }
        if other.hasType2 {
             type2 = other.type2
        }
        if (other.hasCamera) {
            try mergeCamera(other.camera)
        }
        if (other.hasEncounter) {
            try mergeEncounter(other.encounter)
        }
        if (other.hasStats) {
            try mergeStats(other.stats)
        }
        if !other.quickMoves.isEmpty {
           builderResult.quickMoves += other.quickMoves
        }
        if !other.cinematicMoves.isEmpty {
           builderResult.cinematicMoves += other.cinematicMoves
        }
        if !other.animationTime.isEmpty {
            builderResult.animationTime += other.animationTime
        }
        if !other.evolutionIds.isEmpty {
           builderResult.evolutionIds += other.evolutionIds
        }
        if other.hasEvolutionPips {
             evolutionPips = other.evolutionPips
        }
        if other.hasRarity {
             rarity = other.rarity
        }
        if other.hasPokedexHeightM {
             pokedexHeightM = other.pokedexHeightM
        }
        if other.hasPokedexWeightKg {
             pokedexWeightKg = other.pokedexWeightKg
        }
        if other.hasParentPokemonId {
             parentPokemonId = other.parentPokemonId
        }
        if other.hasHeightStdDev {
             heightStdDev = other.heightStdDev
        }
        if other.hasWeightStdDev {
             weightStdDev = other.weightStdDev
        }
        if other.hasKmDistanceToHatch {
             kmDistanceToHatch = other.kmDistanceToHatch
        }
        if other.hasFamilyId {
             familyId = other.familyId
        }
        if other.hasCandyToEvolve {
             candyToEvolve = other.candyToEvolve
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            let valueIntpokemonId = try input.readEnum()
            if let enumspokemonId = Pogoprotos.Enums.PokemonId(rawValue:valueIntpokemonId){
                 pokemonId = enumspokemonId
            } else {
                 try unknownFieldsBuilder.mergeVarintField(1, value:Int64(valueIntpokemonId))
            }

          case 29:
            modelScale = try input.readFloat()

          case 32:
            let valueInttypes = try input.readEnum()
            if let enumstypes = Pogoprotos.Enums.PokemonType(rawValue:valueInttypes){
                 types = enumstypes
            } else {
                 try unknownFieldsBuilder.mergeVarintField(4, value:Int64(valueInttypes))
            }

          case 40:
            let valueInttype2 = try input.readEnum()
            if let enumstype2 = Pogoprotos.Enums.PokemonType(rawValue:valueInttype2){
                 type2 = enumstype2
            } else {
                 try unknownFieldsBuilder.mergeVarintField(5, value:Int64(valueInttype2))
            }

          case 50:
            let subBuilder:Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder = Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder()
            if hasCamera {
              try subBuilder.mergeFrom(camera)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            camera = subBuilder.buildPartial()

          case 58:
            let subBuilder:Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder = Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder()
            if hasEncounter {
              try subBuilder.mergeFrom(encounter)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            encounter = subBuilder.buildPartial()

          case 66:
            let subBuilder:Pogoprotos.Settings.Master.Pokemon.StatsAttributes.Builder = Pogoprotos.Settings.Master.Pokemon.StatsAttributes.Builder()
            if hasStats {
              try subBuilder.mergeFrom(stats)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            stats = subBuilder.buildPartial()

          case 72:
            let valueIntquickMoves = try input.readEnum()
            if let enumsquickMoves = Pogoprotos.Enums.PokemonMove(rawValue:valueIntquickMoves) {
                 builderResult.quickMoves += [enumsquickMoves]
            } else {
                 try unknownFieldsBuilder.mergeVarintField(9, value:Int64(valueIntquickMoves))
            }

          case 80:
            let valueIntcinematicMoves = try input.readEnum()
            if let enumscinematicMoves = Pogoprotos.Enums.PokemonMove(rawValue:valueIntcinematicMoves) {
                 builderResult.cinematicMoves += [enumscinematicMoves]
            } else {
                 try unknownFieldsBuilder.mergeVarintField(10, value:Int64(valueIntcinematicMoves))
            }

          case 90:
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.animationTime += [try input.readFloat()]
            }
            input.popLimit(limit)

          case 96:
            let valueIntevolutionIds = try input.readEnum()
            if let enumsevolutionIds = Pogoprotos.Enums.PokemonId(rawValue:valueIntevolutionIds) {
                 builderResult.evolutionIds += [enumsevolutionIds]
            } else {
                 try unknownFieldsBuilder.mergeVarintField(12, value:Int64(valueIntevolutionIds))
            }

          case 104:
            evolutionPips = try input.readInt32()

          case 112:
            let valueIntrarity = try input.readEnum()
            if let enumsrarity = Pogoprotos.Enums.PokemonRarity(rawValue:valueIntrarity){
                 rarity = enumsrarity
            } else {
                 try unknownFieldsBuilder.mergeVarintField(14, value:Int64(valueIntrarity))
            }

          case 125:
            pokedexHeightM = try input.readFloat()

          case 133:
            pokedexWeightKg = try input.readFloat()

          case 136:
            let valueIntparentPokemonId = try input.readEnum()
            if let enumsparentPokemonId = Pogoprotos.Enums.PokemonId(rawValue:valueIntparentPokemonId){
                 parentPokemonId = enumsparentPokemonId
            } else {
                 try unknownFieldsBuilder.mergeVarintField(17, value:Int64(valueIntparentPokemonId))
            }

          case 149:
            heightStdDev = try input.readFloat()

          case 157:
            weightStdDev = try input.readFloat()

          case 165:
            kmDistanceToHatch = try input.readFloat()

          case 168:
            let valueIntfamilyId = try input.readEnum()
            if let enumsfamilyId = Pogoprotos.Enums.PokemonFamilyId(rawValue:valueIntfamilyId){
                 familyId = enumsfamilyId
            } else {
                 try unknownFieldsBuilder.mergeVarintField(21, value:Int64(valueIntfamilyId))
            }

          case 176:
            candyToEvolve = try input.readInt32()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
        let resultDecodedBuilder = Pogoprotos.Settings.Master.PokemonSettings.Builder()
        if let jsonValuePokemonId = jsonMap["pokemonId"] as? String {
          resultDecodedBuilder.pokemonId = try Pogoprotos.Enums.PokemonId.fromString(jsonValuePokemonId)
        }
        if let jsonValueModelScale = jsonMap["modelScale"] as? NSNumber {
          resultDecodedBuilder.modelScale = jsonValueModelScale.floatValue
        }
        if let jsonValueTypes = jsonMap["type"] as? String {
          resultDecodedBuilder.types = try Pogoprotos.Enums.PokemonType.fromString(jsonValueTypes)
        }
        if let jsonValueType2 = jsonMap["type2"] as? String {
          resultDecodedBuilder.type2 = try Pogoprotos.Enums.PokemonType.fromString(jsonValueType2)
        }
        if let jsonValueCamera = jsonMap["camera"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.camera = try Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder.decodeToBuilder(jsonValueCamera).build()

        }
        if let jsonValueEncounter = jsonMap["encounter"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.encounter = try Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder.decodeToBuilder(jsonValueEncounter).build()

        }
        if let jsonValueStats = jsonMap["stats"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.stats = try Pogoprotos.Settings.Master.Pokemon.StatsAttributes.Builder.decodeToBuilder(jsonValueStats).build()

        }
        if let jsonValueQuickMoves = jsonMap["quickMoves"] as? Array<String> {
          var jsonArrayQuickMoves:Array<Pogoprotos.Enums.PokemonMove> = []
          for oneValueQuickMoves in jsonValueQuickMoves {
            let enumFromStringQuickMoves = try Pogoprotos.Enums.PokemonMove.fromString(oneValueQuickMoves)
            jsonArrayQuickMoves += [enumFromStringQuickMoves]
          }
          resultDecodedBuilder.quickMoves = jsonArrayQuickMoves
        }
        if let jsonValueCinematicMoves = jsonMap["cinematicMoves"] as? Array<String> {
          var jsonArrayCinematicMoves:Array<Pogoprotos.Enums.PokemonMove> = []
          for oneValueCinematicMoves in jsonValueCinematicMoves {
            let enumFromStringCinematicMoves = try Pogoprotos.Enums.PokemonMove.fromString(oneValueCinematicMoves)
            jsonArrayCinematicMoves += [enumFromStringCinematicMoves]
          }
          resultDecodedBuilder.cinematicMoves = jsonArrayCinematicMoves
        }
        if let jsonValueAnimationTime = jsonMap["animationTime"] as? Array<NSNumber> {
          var jsonArrayAnimationTime:Array<Float> = []
          for oneValueAnimationTime in jsonValueAnimationTime {
            jsonArrayAnimationTime += [oneValueAnimationTime.floatValue]
          }
          resultDecodedBuilder.animationTime = jsonArrayAnimationTime
        }
        if let jsonValueEvolutionIds = jsonMap["evolutionIds"] as? Array<String> {
          var jsonArrayEvolutionIds:Array<Pogoprotos.Enums.PokemonId> = []
          for oneValueEvolutionIds in jsonValueEvolutionIds {
            let enumFromStringEvolutionIds = try Pogoprotos.Enums.PokemonId.fromString(oneValueEvolutionIds)
            jsonArrayEvolutionIds += [enumFromStringEvolutionIds]
          }
          resultDecodedBuilder.evolutionIds = jsonArrayEvolutionIds
        }
        if let jsonValueEvolutionPips = jsonMap["evolutionPips"] as? NSNumber {
          resultDecodedBuilder.evolutionPips = jsonValueEvolutionPips.intValue
        }
        if let jsonValueRarity = jsonMap["rarity"] as? String {
          resultDecodedBuilder.rarity = try Pogoprotos.Enums.PokemonRarity.fromString(jsonValueRarity)
        }
        if let jsonValuePokedexHeightM = jsonMap["pokedexHeightM"] as? NSNumber {
          resultDecodedBuilder.pokedexHeightM = jsonValuePokedexHeightM.floatValue
        }
        if let jsonValuePokedexWeightKg = jsonMap["pokedexWeightKg"] as? NSNumber {
          resultDecodedBuilder.pokedexWeightKg = jsonValuePokedexWeightKg.floatValue
        }
        if let jsonValueParentPokemonId = jsonMap["parentPokemonId"] as? String {
          resultDecodedBuilder.parentPokemonId = try Pogoprotos.Enums.PokemonId.fromString(jsonValueParentPokemonId)
        }
        if let jsonValueHeightStdDev = jsonMap["heightStdDev"] as? NSNumber {
          resultDecodedBuilder.heightStdDev = jsonValueHeightStdDev.floatValue
        }
        if let jsonValueWeightStdDev = jsonMap["weightStdDev"] as? NSNumber {
          resultDecodedBuilder.weightStdDev = jsonValueWeightStdDev.floatValue
        }
        if let jsonValueKmDistanceToHatch = jsonMap["kmDistanceToHatch"] as? NSNumber {
          resultDecodedBuilder.kmDistanceToHatch = jsonValueKmDistanceToHatch.floatValue
        }
        if let jsonValueFamilyId = jsonMap["familyId"] as? String {
          resultDecodedBuilder.familyId = try Pogoprotos.Enums.PokemonFamilyId.fromString(jsonValueFamilyId)
        }
        if let jsonValueCandyToEvolve = jsonMap["candyToEvolve"] as? NSNumber {
          resultDecodedBuilder.candyToEvolve = jsonValueCandyToEvolve.intValue
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Settings.Master.PokemonSettings.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
