// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "FortSettings.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Pogoprotos { public struct Settings { }}

public func == (lhs: Pogoprotos.Settings.FortSettings, rhs: Pogoprotos.Settings.FortSettings) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasInteractionRangeMeters == rhs.hasInteractionRangeMeters) && (!lhs.hasInteractionRangeMeters || lhs.interactionRangeMeters == rhs.interactionRangeMeters)
  fieldCheck = fieldCheck && (lhs.hasMaxTotalDeployedPokemon == rhs.hasMaxTotalDeployedPokemon) && (!lhs.hasMaxTotalDeployedPokemon || lhs.maxTotalDeployedPokemon == rhs.maxTotalDeployedPokemon)
  fieldCheck = fieldCheck && (lhs.hasMaxPlayerDeployedPokemon == rhs.hasMaxPlayerDeployedPokemon) && (!lhs.hasMaxPlayerDeployedPokemon || lhs.maxPlayerDeployedPokemon == rhs.maxPlayerDeployedPokemon)
  fieldCheck = fieldCheck && (lhs.hasDeployStaminaMultiplier == rhs.hasDeployStaminaMultiplier) && (!lhs.hasDeployStaminaMultiplier || lhs.deployStaminaMultiplier == rhs.deployStaminaMultiplier)
  fieldCheck = fieldCheck && (lhs.hasDeployAttackMultiplier == rhs.hasDeployAttackMultiplier) && (!lhs.hasDeployAttackMultiplier || lhs.deployAttackMultiplier == rhs.deployAttackMultiplier)
  fieldCheck = fieldCheck && (lhs.hasFarInteractionRangeMeters == rhs.hasFarInteractionRangeMeters) && (!lhs.hasFarInteractionRangeMeters || lhs.farInteractionRangeMeters == rhs.farInteractionRangeMeters)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Pogoprotos.Settings {
  public struct FortSettingsRoot {
    public static var sharedInstance : FortSettingsRoot {
     struct Static {
         static let instance : FortSettingsRoot = FortSettingsRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class FortSettings : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasInteractionRangeMeters:Bool = false
    public private(set) var interactionRangeMeters:Double = Double(0)

    public private(set) var hasMaxTotalDeployedPokemon:Bool = false
    public private(set) var maxTotalDeployedPokemon:Int32 = Int32(0)

    public private(set) var hasMaxPlayerDeployedPokemon:Bool = false
    public private(set) var maxPlayerDeployedPokemon:Int32 = Int32(0)

    public private(set) var hasDeployStaminaMultiplier:Bool = false
    public private(set) var deployStaminaMultiplier:Double = Double(0)

    public private(set) var hasDeployAttackMultiplier:Bool = false
    public private(set) var deployAttackMultiplier:Double = Double(0)

    public private(set) var hasFarInteractionRangeMeters:Bool = false
    public private(set) var farInteractionRangeMeters:Double = Double(0)

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasInteractionRangeMeters {
        try output.writeDouble(1, value:interactionRangeMeters)
      }
      if hasMaxTotalDeployedPokemon {
        try output.writeInt32(2, value:maxTotalDeployedPokemon)
      }
      if hasMaxPlayerDeployedPokemon {
        try output.writeInt32(3, value:maxPlayerDeployedPokemon)
      }
      if hasDeployStaminaMultiplier {
        try output.writeDouble(4, value:deployStaminaMultiplier)
      }
      if hasDeployAttackMultiplier {
        try output.writeDouble(5, value:deployAttackMultiplier)
      }
      if hasFarInteractionRangeMeters {
        try output.writeDouble(6, value:farInteractionRangeMeters)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasInteractionRangeMeters {
        serialize_size += interactionRangeMeters.computeDoubleSize(1)
      }
      if hasMaxTotalDeployedPokemon {
        serialize_size += maxTotalDeployedPokemon.computeInt32Size(2)
      }
      if hasMaxPlayerDeployedPokemon {
        serialize_size += maxPlayerDeployedPokemon.computeInt32Size(3)
      }
      if hasDeployStaminaMultiplier {
        serialize_size += deployStaminaMultiplier.computeDoubleSize(4)
      }
      if hasDeployAttackMultiplier {
        serialize_size += deployAttackMultiplier.computeDoubleSize(5)
      }
      if hasFarInteractionRangeMeters {
        serialize_size += farInteractionRangeMeters.computeDoubleSize(6)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Settings.FortSettings> {
      var mergedArray = Array<Pogoprotos.Settings.FortSettings>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.FortSettings? {
      return try Pogoprotos.Settings.FortSettings.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Settings.FortSettings {
      return try Pogoprotos.Settings.FortSettings.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Settings.FortSettingsRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.FortSettings {
      return try Pogoprotos.Settings.FortSettings.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.FortSettings {
      return try Pogoprotos.Settings.FortSettings.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.FortSettings {
      return try Pogoprotos.Settings.FortSettings.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.FortSettings {
      return try Pogoprotos.Settings.FortSettings.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.FortSettings {
      return try Pogoprotos.Settings.FortSettings.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Settings.FortSettings.Builder {
      return Pogoprotos.Settings.FortSettings.classBuilder() as! Pogoprotos.Settings.FortSettings.Builder
    }
    public func getBuilder() -> Pogoprotos.Settings.FortSettings.Builder {
      return classBuilder() as! Pogoprotos.Settings.FortSettings.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.FortSettings.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.FortSettings.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Settings.FortSettings.Builder {
      return try Pogoprotos.Settings.FortSettings.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Settings.FortSettings) throws -> Pogoprotos.Settings.FortSettings.Builder {
      return try Pogoprotos.Settings.FortSettings.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasInteractionRangeMeters {
        jsonMap["interactionRangeMeters"] = NSNumber(double:interactionRangeMeters)
      }
      if hasMaxTotalDeployedPokemon {
        jsonMap["maxTotalDeployedPokemon"] = NSNumber(int:maxTotalDeployedPokemon)
      }
      if hasMaxPlayerDeployedPokemon {
        jsonMap["maxPlayerDeployedPokemon"] = NSNumber(int:maxPlayerDeployedPokemon)
      }
      if hasDeployStaminaMultiplier {
        jsonMap["deployStaminaMultiplier"] = NSNumber(double:deployStaminaMultiplier)
      }
      if hasDeployAttackMultiplier {
        jsonMap["deployAttackMultiplier"] = NSNumber(double:deployAttackMultiplier)
      }
      if hasFarInteractionRangeMeters {
        jsonMap["farInteractionRangeMeters"] = NSNumber(double:farInteractionRangeMeters)
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.FortSettings {
      return try Pogoprotos.Settings.FortSettings.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Settings.FortSettings {
      return try Pogoprotos.Settings.FortSettings.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasInteractionRangeMeters {
        output += "\(indent) interactionRangeMeters: \(interactionRangeMeters) \n"
      }
      if hasMaxTotalDeployedPokemon {
        output += "\(indent) maxTotalDeployedPokemon: \(maxTotalDeployedPokemon) \n"
      }
      if hasMaxPlayerDeployedPokemon {
        output += "\(indent) maxPlayerDeployedPokemon: \(maxPlayerDeployedPokemon) \n"
      }
      if hasDeployStaminaMultiplier {
        output += "\(indent) deployStaminaMultiplier: \(deployStaminaMultiplier) \n"
      }
      if hasDeployAttackMultiplier {
        output += "\(indent) deployAttackMultiplier: \(deployAttackMultiplier) \n"
      }
      if hasFarInteractionRangeMeters {
        output += "\(indent) farInteractionRangeMeters: \(farInteractionRangeMeters) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasInteractionRangeMeters {
               hashCode = (hashCode &* 31) &+ interactionRangeMeters.hashValue
            }
            if hasMaxTotalDeployedPokemon {
               hashCode = (hashCode &* 31) &+ maxTotalDeployedPokemon.hashValue
            }
            if hasMaxPlayerDeployedPokemon {
               hashCode = (hashCode &* 31) &+ maxPlayerDeployedPokemon.hashValue
            }
            if hasDeployStaminaMultiplier {
               hashCode = (hashCode &* 31) &+ deployStaminaMultiplier.hashValue
            }
            if hasDeployAttackMultiplier {
               hashCode = (hashCode &* 31) &+ deployAttackMultiplier.hashValue
            }
            if hasFarInteractionRangeMeters {
               hashCode = (hashCode &* 31) &+ farInteractionRangeMeters.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Settings.FortSettings"
    }
    override public func className() -> String {
        return "Pogoprotos.Settings.FortSettings"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Settings.FortSettings.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Settings.FortSettings = Pogoprotos.Settings.FortSettings()
      public func getMessage() -> Pogoprotos.Settings.FortSettings {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasInteractionRangeMeters:Bool {
           get {
                return builderResult.hasInteractionRangeMeters
           }
      }
      public var interactionRangeMeters:Double {
           get {
                return builderResult.interactionRangeMeters
           }
           set (value) {
               builderResult.hasInteractionRangeMeters = true
               builderResult.interactionRangeMeters = value
           }
      }
      public func setInteractionRangeMeters(value:Double) -> Pogoprotos.Settings.FortSettings.Builder {
        self.interactionRangeMeters = value
        return self
      }
      public func clearInteractionRangeMeters() -> Pogoprotos.Settings.FortSettings.Builder{
           builderResult.hasInteractionRangeMeters = false
           builderResult.interactionRangeMeters = Double(0)
           return self
      }
      public var hasMaxTotalDeployedPokemon:Bool {
           get {
                return builderResult.hasMaxTotalDeployedPokemon
           }
      }
      public var maxTotalDeployedPokemon:Int32 {
           get {
                return builderResult.maxTotalDeployedPokemon
           }
           set (value) {
               builderResult.hasMaxTotalDeployedPokemon = true
               builderResult.maxTotalDeployedPokemon = value
           }
      }
      public func setMaxTotalDeployedPokemon(value:Int32) -> Pogoprotos.Settings.FortSettings.Builder {
        self.maxTotalDeployedPokemon = value
        return self
      }
      public func clearMaxTotalDeployedPokemon() -> Pogoprotos.Settings.FortSettings.Builder{
           builderResult.hasMaxTotalDeployedPokemon = false
           builderResult.maxTotalDeployedPokemon = Int32(0)
           return self
      }
      public var hasMaxPlayerDeployedPokemon:Bool {
           get {
                return builderResult.hasMaxPlayerDeployedPokemon
           }
      }
      public var maxPlayerDeployedPokemon:Int32 {
           get {
                return builderResult.maxPlayerDeployedPokemon
           }
           set (value) {
               builderResult.hasMaxPlayerDeployedPokemon = true
               builderResult.maxPlayerDeployedPokemon = value
           }
      }
      public func setMaxPlayerDeployedPokemon(value:Int32) -> Pogoprotos.Settings.FortSettings.Builder {
        self.maxPlayerDeployedPokemon = value
        return self
      }
      public func clearMaxPlayerDeployedPokemon() -> Pogoprotos.Settings.FortSettings.Builder{
           builderResult.hasMaxPlayerDeployedPokemon = false
           builderResult.maxPlayerDeployedPokemon = Int32(0)
           return self
      }
      public var hasDeployStaminaMultiplier:Bool {
           get {
                return builderResult.hasDeployStaminaMultiplier
           }
      }
      public var deployStaminaMultiplier:Double {
           get {
                return builderResult.deployStaminaMultiplier
           }
           set (value) {
               builderResult.hasDeployStaminaMultiplier = true
               builderResult.deployStaminaMultiplier = value
           }
      }
      public func setDeployStaminaMultiplier(value:Double) -> Pogoprotos.Settings.FortSettings.Builder {
        self.deployStaminaMultiplier = value
        return self
      }
      public func clearDeployStaminaMultiplier() -> Pogoprotos.Settings.FortSettings.Builder{
           builderResult.hasDeployStaminaMultiplier = false
           builderResult.deployStaminaMultiplier = Double(0)
           return self
      }
      public var hasDeployAttackMultiplier:Bool {
           get {
                return builderResult.hasDeployAttackMultiplier
           }
      }
      public var deployAttackMultiplier:Double {
           get {
                return builderResult.deployAttackMultiplier
           }
           set (value) {
               builderResult.hasDeployAttackMultiplier = true
               builderResult.deployAttackMultiplier = value
           }
      }
      public func setDeployAttackMultiplier(value:Double) -> Pogoprotos.Settings.FortSettings.Builder {
        self.deployAttackMultiplier = value
        return self
      }
      public func clearDeployAttackMultiplier() -> Pogoprotos.Settings.FortSettings.Builder{
           builderResult.hasDeployAttackMultiplier = false
           builderResult.deployAttackMultiplier = Double(0)
           return self
      }
      public var hasFarInteractionRangeMeters:Bool {
           get {
                return builderResult.hasFarInteractionRangeMeters
           }
      }
      public var farInteractionRangeMeters:Double {
           get {
                return builderResult.farInteractionRangeMeters
           }
           set (value) {
               builderResult.hasFarInteractionRangeMeters = true
               builderResult.farInteractionRangeMeters = value
           }
      }
      public func setFarInteractionRangeMeters(value:Double) -> Pogoprotos.Settings.FortSettings.Builder {
        self.farInteractionRangeMeters = value
        return self
      }
      public func clearFarInteractionRangeMeters() -> Pogoprotos.Settings.FortSettings.Builder{
           builderResult.hasFarInteractionRangeMeters = false
           builderResult.farInteractionRangeMeters = Double(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Settings.FortSettings.Builder {
        builderResult = Pogoprotos.Settings.FortSettings()
        return self
      }
      override public func clone() throws -> Pogoprotos.Settings.FortSettings.Builder {
        return try Pogoprotos.Settings.FortSettings.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Settings.FortSettings {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Settings.FortSettings {
        let returnMe:Pogoprotos.Settings.FortSettings = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Settings.FortSettings) throws -> Pogoprotos.Settings.FortSettings.Builder {
        if other == Pogoprotos.Settings.FortSettings() {
         return self
        }
        if other.hasInteractionRangeMeters {
             interactionRangeMeters = other.interactionRangeMeters
        }
        if other.hasMaxTotalDeployedPokemon {
             maxTotalDeployedPokemon = other.maxTotalDeployedPokemon
        }
        if other.hasMaxPlayerDeployedPokemon {
             maxPlayerDeployedPokemon = other.maxPlayerDeployedPokemon
        }
        if other.hasDeployStaminaMultiplier {
             deployStaminaMultiplier = other.deployStaminaMultiplier
        }
        if other.hasDeployAttackMultiplier {
             deployAttackMultiplier = other.deployAttackMultiplier
        }
        if other.hasFarInteractionRangeMeters {
             farInteractionRangeMeters = other.farInteractionRangeMeters
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.FortSettings.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.FortSettings.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 9:
            interactionRangeMeters = try input.readDouble()

          case 16:
            maxTotalDeployedPokemon = try input.readInt32()

          case 24:
            maxPlayerDeployedPokemon = try input.readInt32()

          case 33:
            deployStaminaMultiplier = try input.readDouble()

          case 41:
            deployAttackMultiplier = try input.readDouble()

          case 49:
            farInteractionRangeMeters = try input.readDouble()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.FortSettings.Builder {
        let resultDecodedBuilder = Pogoprotos.Settings.FortSettings.Builder()
        if let jsonValueInteractionRangeMeters = jsonMap["interactionRangeMeters"] as? NSNumber {
          resultDecodedBuilder.interactionRangeMeters = jsonValueInteractionRangeMeters.doubleValue
        }
        if let jsonValueMaxTotalDeployedPokemon = jsonMap["maxTotalDeployedPokemon"] as? NSNumber {
          resultDecodedBuilder.maxTotalDeployedPokemon = jsonValueMaxTotalDeployedPokemon.intValue
        }
        if let jsonValueMaxPlayerDeployedPokemon = jsonMap["maxPlayerDeployedPokemon"] as? NSNumber {
          resultDecodedBuilder.maxPlayerDeployedPokemon = jsonValueMaxPlayerDeployedPokemon.intValue
        }
        if let jsonValueDeployStaminaMultiplier = jsonMap["deployStaminaMultiplier"] as? NSNumber {
          resultDecodedBuilder.deployStaminaMultiplier = jsonValueDeployStaminaMultiplier.doubleValue
        }
        if let jsonValueDeployAttackMultiplier = jsonMap["deployAttackMultiplier"] as? NSNumber {
          resultDecodedBuilder.deployAttackMultiplier = jsonValueDeployAttackMultiplier.doubleValue
        }
        if let jsonValueFarInteractionRangeMeters = jsonMap["farInteractionRangeMeters"] as? NSNumber {
          resultDecodedBuilder.farInteractionRangeMeters = jsonValueFarInteractionRangeMeters.doubleValue
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Settings.FortSettings.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Settings.FortSettings.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
