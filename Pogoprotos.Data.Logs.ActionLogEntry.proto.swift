// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "ActionLogEntry.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Pogoprotos { public struct Data { public struct Logs { }}}

public func == (lhs: Pogoprotos.Data.Logs.ActionLogEntry, rhs: Pogoprotos.Data.Logs.ActionLogEntry) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasTimestampMs == rhs.hasTimestampMs) && (!lhs.hasTimestampMs || lhs.timestampMs == rhs.timestampMs)
  fieldCheck = fieldCheck && (lhs.hasSfida == rhs.hasSfida) && (!lhs.hasSfida || lhs.sfida == rhs.sfida)
  fieldCheck = fieldCheck && (lhs.hasCatchPokemon == rhs.hasCatchPokemon) && (!lhs.hasCatchPokemon || lhs.catchPokemon == rhs.catchPokemon)
  fieldCheck = fieldCheck && (lhs.hasFortSearch == rhs.hasFortSearch) && (!lhs.hasFortSearch || lhs.fortSearch == rhs.fortSearch)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Pogoprotos.Data.Logs {
  public struct ActionLogEntryRoot {
    public static var sharedInstance : ActionLogEntryRoot {
     struct Static {
         static let instance : ActionLogEntryRoot = ActionLogEntryRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Pogoprotos.Data.Logs.CatchPokemonLogEntryRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Data.Logs.FortSearchLogEntryRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class ActionLogEntry : GeneratedMessage, GeneratedMessageProtocol {


    //OneOf declaration start

    public enum Action {
      case OneOfActionNotSet

      public func checkOneOfIsSet() -> Bool {
           switch self {
           case .OneOfActionNotSet:
                return false
           default:
                return true
           }
      }
      case CatchPokemon(Pogoprotos.Data.Logs.CatchPokemonLogEntry)

      public static func getCatchPokemon(value:Action) -> Pogoprotos.Data.Logs.CatchPokemonLogEntry? {
           switch value {
           case .CatchPokemon(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case FortSearch(Pogoprotos.Data.Logs.FortSearchLogEntry)

      public static func getFortSearch(value:Action) -> Pogoprotos.Data.Logs.FortSearchLogEntry? {
           switch value {
           case .FortSearch(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
    }
    //OneOf declaration end

    private var storageAction:ActionLogEntry.Action =  ActionLogEntry.Action.OneOfActionNotSet
    public func getOneOfAction() ->  ActionLogEntry.Action {
        let copyObjectAction = storageAction
        return copyObjectAction
    }
    public private(set) var hasTimestampMs:Bool = false
    public private(set) var timestampMs:Int64 = Int64(0)

    public private(set) var hasSfida:Bool = false
    public private(set) var sfida:Bool = false

    public private(set) var hasCatchPokemon:Bool {
          get {
                guard let _ = ActionLogEntry.Action.getCatchPokemon(storageAction) else {
                    return false
                }
                return true
          }
          set(newValue) {
          }
    }
    public private(set) var catchPokemon:Pogoprotos.Data.Logs.CatchPokemonLogEntry!{
         get {
              return ActionLogEntry.Action.getCatchPokemon(storageAction)
         }
         set (newvalue) {
              storageAction = ActionLogEntry.Action.CatchPokemon(newvalue)
         }
    }
    public private(set) var hasFortSearch:Bool {
          get {
                guard let _ = ActionLogEntry.Action.getFortSearch(storageAction) else {
                    return false
                }
                return true
          }
          set(newValue) {
          }
    }
    public private(set) var fortSearch:Pogoprotos.Data.Logs.FortSearchLogEntry!{
         get {
              return ActionLogEntry.Action.getFortSearch(storageAction)
         }
         set (newvalue) {
              storageAction = ActionLogEntry.Action.FortSearch(newvalue)
         }
    }
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasTimestampMs {
        try output.writeInt64(1, value:timestampMs)
      }
      if hasSfida {
        try output.writeBool(2, value:sfida)
      }
      if hasCatchPokemon {
        try output.writeMessage(3, value:catchPokemon)
      }
      if hasFortSearch {
        try output.writeMessage(4, value:fortSearch)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasTimestampMs {
        serialize_size += timestampMs.computeInt64Size(1)
      }
      if hasSfida {
        serialize_size += sfida.computeBoolSize(2)
      }
      if hasCatchPokemon {
          if let varSizecatchPokemon = catchPokemon?.computeMessageSize(3) {
              serialize_size += varSizecatchPokemon
          }
      }
      if hasFortSearch {
          if let varSizefortSearch = fortSearch?.computeMessageSize(4) {
              serialize_size += varSizefortSearch
          }
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Data.Logs.ActionLogEntry> {
      var mergedArray = Array<Pogoprotos.Data.Logs.ActionLogEntry>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Data.Logs.ActionLogEntry? {
      return try Pogoprotos.Data.Logs.ActionLogEntry.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Data.Logs.ActionLogEntry {
      return try Pogoprotos.Data.Logs.ActionLogEntry.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Data.Logs.ActionLogEntryRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.Logs.ActionLogEntry {
      return try Pogoprotos.Data.Logs.ActionLogEntry.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Data.Logs.ActionLogEntry {
      return try Pogoprotos.Data.Logs.ActionLogEntry.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.Logs.ActionLogEntry {
      return try Pogoprotos.Data.Logs.ActionLogEntry.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Data.Logs.ActionLogEntry {
      return try Pogoprotos.Data.Logs.ActionLogEntry.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.Logs.ActionLogEntry {
      return try Pogoprotos.Data.Logs.ActionLogEntry.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Data.Logs.ActionLogEntry.Builder {
      return Pogoprotos.Data.Logs.ActionLogEntry.classBuilder() as! Pogoprotos.Data.Logs.ActionLogEntry.Builder
    }
    public func getBuilder() -> Pogoprotos.Data.Logs.ActionLogEntry.Builder {
      return classBuilder() as! Pogoprotos.Data.Logs.ActionLogEntry.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Data.Logs.ActionLogEntry.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Data.Logs.ActionLogEntry.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Data.Logs.ActionLogEntry.Builder {
      return try Pogoprotos.Data.Logs.ActionLogEntry.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Data.Logs.ActionLogEntry) throws -> Pogoprotos.Data.Logs.ActionLogEntry.Builder {
      return try Pogoprotos.Data.Logs.ActionLogEntry.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasTimestampMs {
        jsonMap["timestampMs"] = "\(timestampMs)"
      }
      if hasSfida {
        jsonMap["sfida"] = sfida
      }
      if hasCatchPokemon {
        jsonMap["catchPokemon"] = try catchPokemon.encode()
      }
      if hasFortSearch {
        jsonMap["fortSearch"] = try fortSearch.encode()
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Data.Logs.ActionLogEntry {
      return try Pogoprotos.Data.Logs.ActionLogEntry.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Data.Logs.ActionLogEntry {
      return try Pogoprotos.Data.Logs.ActionLogEntry.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasTimestampMs {
        output += "\(indent) timestampMs: \(timestampMs) \n"
      }
      if hasSfida {
        output += "\(indent) sfida: \(sfida) \n"
      }
      if hasCatchPokemon {
        output += "\(indent) catchPokemon {\n"
        if let outDescCatchPokemon = catchPokemon {
          output += try outDescCatchPokemon.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasFortSearch {
        output += "\(indent) fortSearch {\n"
        if let outDescFortSearch = fortSearch {
          output += try outDescFortSearch.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasTimestampMs {
               hashCode = (hashCode &* 31) &+ timestampMs.hashValue
            }
            if hasSfida {
               hashCode = (hashCode &* 31) &+ sfida.hashValue
            }
            if hasCatchPokemon {
                if let hashValuecatchPokemon = catchPokemon?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuecatchPokemon
                }
            }
            if hasFortSearch {
                if let hashValuefortSearch = fortSearch?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuefortSearch
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Data.Logs.ActionLogEntry"
    }
    override public func className() -> String {
        return "Pogoprotos.Data.Logs.ActionLogEntry"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Data.Logs.ActionLogEntry.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Data.Logs.ActionLogEntry = Pogoprotos.Data.Logs.ActionLogEntry()
      public func getMessage() -> Pogoprotos.Data.Logs.ActionLogEntry {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasTimestampMs:Bool {
           get {
                return builderResult.hasTimestampMs
           }
      }
      public var timestampMs:Int64 {
           get {
                return builderResult.timestampMs
           }
           set (value) {
               builderResult.hasTimestampMs = true
               builderResult.timestampMs = value
           }
      }
      public func setTimestampMs(value:Int64) -> Pogoprotos.Data.Logs.ActionLogEntry.Builder {
        self.timestampMs = value
        return self
      }
      public func clearTimestampMs() -> Pogoprotos.Data.Logs.ActionLogEntry.Builder{
           builderResult.hasTimestampMs = false
           builderResult.timestampMs = Int64(0)
           return self
      }
      public var hasSfida:Bool {
           get {
                return builderResult.hasSfida
           }
      }
      public var sfida:Bool {
           get {
                return builderResult.sfida
           }
           set (value) {
               builderResult.hasSfida = true
               builderResult.sfida = value
           }
      }
      public func setSfida(value:Bool) -> Pogoprotos.Data.Logs.ActionLogEntry.Builder {
        self.sfida = value
        return self
      }
      public func clearSfida() -> Pogoprotos.Data.Logs.ActionLogEntry.Builder{
           builderResult.hasSfida = false
           builderResult.sfida = false
           return self
      }
      public var hasCatchPokemon:Bool {
           get {
               return builderResult.hasCatchPokemon
           }
      }
      public var catchPokemon:Pogoprotos.Data.Logs.CatchPokemonLogEntry! {
           get {
               if catchPokemonBuilder_ != nil {
                  builderResult.catchPokemon = catchPokemonBuilder_.getMessage()
               }
               return builderResult.catchPokemon
           }
           set (value) {
               builderResult.hasCatchPokemon = true
               builderResult.catchPokemon = value
           }
      }
      private var catchPokemonBuilder_:Pogoprotos.Data.Logs.CatchPokemonLogEntry.Builder! {
           didSet {
              builderResult.hasCatchPokemon = true
           }
      }
      public func getCatchPokemonBuilder() -> Pogoprotos.Data.Logs.CatchPokemonLogEntry.Builder {
        if catchPokemonBuilder_ == nil {
           catchPokemonBuilder_ = Pogoprotos.Data.Logs.CatchPokemonLogEntry.Builder()
           builderResult.catchPokemon = catchPokemonBuilder_.getMessage()
           if catchPokemon != nil {
              try! catchPokemonBuilder_.mergeFrom(catchPokemon)
           }
        }
        return catchPokemonBuilder_
      }
      public func setCatchPokemon(value:Pogoprotos.Data.Logs.CatchPokemonLogEntry!) -> Pogoprotos.Data.Logs.ActionLogEntry.Builder {
        self.catchPokemon = value
        return self
      }
      public func mergeCatchPokemon(value:Pogoprotos.Data.Logs.CatchPokemonLogEntry) throws -> Pogoprotos.Data.Logs.ActionLogEntry.Builder {
        if builderResult.hasCatchPokemon {
          builderResult.catchPokemon = try Pogoprotos.Data.Logs.CatchPokemonLogEntry.builderWithPrototype(builderResult.catchPokemon).mergeFrom(value).buildPartial()
        } else {
          builderResult.catchPokemon = value
        }
        builderResult.hasCatchPokemon = true
        return self
      }
      public func clearCatchPokemon() -> Pogoprotos.Data.Logs.ActionLogEntry.Builder {
        catchPokemonBuilder_ = nil
        builderResult.hasCatchPokemon = false
        builderResult.catchPokemon = nil
        return self
      }
      public var hasFortSearch:Bool {
           get {
               return builderResult.hasFortSearch
           }
      }
      public var fortSearch:Pogoprotos.Data.Logs.FortSearchLogEntry! {
           get {
               if fortSearchBuilder_ != nil {
                  builderResult.fortSearch = fortSearchBuilder_.getMessage()
               }
               return builderResult.fortSearch
           }
           set (value) {
               builderResult.hasFortSearch = true
               builderResult.fortSearch = value
           }
      }
      private var fortSearchBuilder_:Pogoprotos.Data.Logs.FortSearchLogEntry.Builder! {
           didSet {
              builderResult.hasFortSearch = true
           }
      }
      public func getFortSearchBuilder() -> Pogoprotos.Data.Logs.FortSearchLogEntry.Builder {
        if fortSearchBuilder_ == nil {
           fortSearchBuilder_ = Pogoprotos.Data.Logs.FortSearchLogEntry.Builder()
           builderResult.fortSearch = fortSearchBuilder_.getMessage()
           if fortSearch != nil {
              try! fortSearchBuilder_.mergeFrom(fortSearch)
           }
        }
        return fortSearchBuilder_
      }
      public func setFortSearch(value:Pogoprotos.Data.Logs.FortSearchLogEntry!) -> Pogoprotos.Data.Logs.ActionLogEntry.Builder {
        self.fortSearch = value
        return self
      }
      public func mergeFortSearch(value:Pogoprotos.Data.Logs.FortSearchLogEntry) throws -> Pogoprotos.Data.Logs.ActionLogEntry.Builder {
        if builderResult.hasFortSearch {
          builderResult.fortSearch = try Pogoprotos.Data.Logs.FortSearchLogEntry.builderWithPrototype(builderResult.fortSearch).mergeFrom(value).buildPartial()
        } else {
          builderResult.fortSearch = value
        }
        builderResult.hasFortSearch = true
        return self
      }
      public func clearFortSearch() -> Pogoprotos.Data.Logs.ActionLogEntry.Builder {
        fortSearchBuilder_ = nil
        builderResult.hasFortSearch = false
        builderResult.fortSearch = nil
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Data.Logs.ActionLogEntry.Builder {
        builderResult = Pogoprotos.Data.Logs.ActionLogEntry()
        return self
      }
      override public func clone() throws -> Pogoprotos.Data.Logs.ActionLogEntry.Builder {
        return try Pogoprotos.Data.Logs.ActionLogEntry.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Data.Logs.ActionLogEntry {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Data.Logs.ActionLogEntry {
        let returnMe:Pogoprotos.Data.Logs.ActionLogEntry = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Data.Logs.ActionLogEntry) throws -> Pogoprotos.Data.Logs.ActionLogEntry.Builder {
        if other == Pogoprotos.Data.Logs.ActionLogEntry() {
         return self
        }
        if other.hasTimestampMs {
             timestampMs = other.timestampMs
        }
        if other.hasSfida {
             sfida = other.sfida
        }
        if (other.hasCatchPokemon) {
            try mergeCatchPokemon(other.catchPokemon)
        }
        if (other.hasFortSearch) {
            try mergeFortSearch(other.fortSearch)
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Data.Logs.ActionLogEntry.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.Logs.ActionLogEntry.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            timestampMs = try input.readInt64()

          case 16:
            sfida = try input.readBool()

          case 26:
            let subBuilder:Pogoprotos.Data.Logs.CatchPokemonLogEntry.Builder = Pogoprotos.Data.Logs.CatchPokemonLogEntry.Builder()
            if hasCatchPokemon {
              try subBuilder.mergeFrom(catchPokemon)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            catchPokemon = subBuilder.buildPartial()

          case 34:
            let subBuilder:Pogoprotos.Data.Logs.FortSearchLogEntry.Builder = Pogoprotos.Data.Logs.FortSearchLogEntry.Builder()
            if hasFortSearch {
              try subBuilder.mergeFrom(fortSearch)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            fortSearch = subBuilder.buildPartial()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Data.Logs.ActionLogEntry.Builder {
        let resultDecodedBuilder = Pogoprotos.Data.Logs.ActionLogEntry.Builder()
        if let jsonValueTimestampMs = jsonMap["timestampMs"] as? String {
          resultDecodedBuilder.timestampMs = Int64(jsonValueTimestampMs)!
        }
        if let jsonValueSfida = jsonMap["sfida"] as? Bool {
          resultDecodedBuilder.sfida = jsonValueSfida
        }
        if let jsonValueCatchPokemon = jsonMap["catchPokemon"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.catchPokemon = try Pogoprotos.Data.Logs.CatchPokemonLogEntry.Builder.decodeToBuilder(jsonValueCatchPokemon).build()

        }
        if let jsonValueFortSearch = jsonMap["fortSearch"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.fortSearch = try Pogoprotos.Data.Logs.FortSearchLogEntry.Builder.decodeToBuilder(jsonValueFortSearch).build()

        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Data.Logs.ActionLogEntry.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Data.Logs.ActionLogEntry.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
