// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "BadgeSettings.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Pogoprotos { public struct Settings { public struct Master { }}}

public func == (lhs: Pogoprotos.Settings.Master.BadgeSettings, rhs: Pogoprotos.Settings.Master.BadgeSettings) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasBadgeType == rhs.hasBadgeType) && (!lhs.hasBadgeType || lhs.badgeType == rhs.badgeType)
  fieldCheck = fieldCheck && (lhs.hasBadgeRank == rhs.hasBadgeRank) && (!lhs.hasBadgeRank || lhs.badgeRank == rhs.badgeRank)
  fieldCheck = fieldCheck && (lhs.targets == rhs.targets)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Pogoprotos.Settings.Master {
  public struct BadgeSettingsRoot {
    public static var sharedInstance : BadgeSettingsRoot {
     struct Static {
         static let instance : BadgeSettingsRoot = BadgeSettingsRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Pogoprotos.Enums.BadgeTypeRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class BadgeSettings : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var badgeType:Pogoprotos.Enums.BadgeType = Pogoprotos.Enums.BadgeType.BadgeUnset
    public private(set) var hasBadgeType:Bool = false
    public private(set) var hasBadgeRank:Bool = false
    public private(set) var badgeRank:Int32 = Int32(0)

    public private(set) var targets:Array<Int32> = Array<Int32>()
    private var targetsMemoizedSerializedSize:Int32 = -1
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasBadgeType {
        try output.writeEnum(1, value:badgeType.rawValue)
      }
      if hasBadgeRank {
        try output.writeInt32(2, value:badgeRank)
      }
      if !targets.isEmpty {
        try output.writeRawVarint32(26)
        try output.writeRawVarint32(targetsMemoizedSerializedSize)
        for oneValuetargets in targets {
          try output.writeInt32NoTag(oneValuetargets)
        }
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if (hasBadgeType) {
        serialize_size += badgeType.rawValue.computeEnumSize(1)
      }
      if hasBadgeRank {
        serialize_size += badgeRank.computeInt32Size(2)
      }
      var dataSizeTargets:Int32 = 0
      for oneValuetargets in targets {
          dataSizeTargets += oneValuetargets.computeInt32SizeNoTag()
      }
      serialize_size += dataSizeTargets
      if !targets.isEmpty {
        serialize_size += 1
        serialize_size += dataSizeTargets.computeInt32SizeNoTag()
      }
      targetsMemoizedSerializedSize = dataSizeTargets
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Settings.Master.BadgeSettings> {
      var mergedArray = Array<Pogoprotos.Settings.Master.BadgeSettings>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.Master.BadgeSettings? {
      return try Pogoprotos.Settings.Master.BadgeSettings.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Settings.Master.BadgeSettings {
      return try Pogoprotos.Settings.Master.BadgeSettings.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Settings.Master.BadgeSettingsRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.BadgeSettings {
      return try Pogoprotos.Settings.Master.BadgeSettings.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.Master.BadgeSettings {
      return try Pogoprotos.Settings.Master.BadgeSettings.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.BadgeSettings {
      return try Pogoprotos.Settings.Master.BadgeSettings.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.Master.BadgeSettings {
      return try Pogoprotos.Settings.Master.BadgeSettings.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.BadgeSettings {
      return try Pogoprotos.Settings.Master.BadgeSettings.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Settings.Master.BadgeSettings.Builder {
      return Pogoprotos.Settings.Master.BadgeSettings.classBuilder() as! Pogoprotos.Settings.Master.BadgeSettings.Builder
    }
    public func getBuilder() -> Pogoprotos.Settings.Master.BadgeSettings.Builder {
      return classBuilder() as! Pogoprotos.Settings.Master.BadgeSettings.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.Master.BadgeSettings.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.Master.BadgeSettings.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Settings.Master.BadgeSettings.Builder {
      return try Pogoprotos.Settings.Master.BadgeSettings.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Settings.Master.BadgeSettings) throws -> Pogoprotos.Settings.Master.BadgeSettings.Builder {
      return try Pogoprotos.Settings.Master.BadgeSettings.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasBadgeType {
        jsonMap["badgeType"] = badgeType.toString()
      }
      if hasBadgeRank {
        jsonMap["badgeRank"] = NSNumber(int:badgeRank)
      }
      if !targets.isEmpty {
        var jsonArrayTargets:Array<NSNumber> = []
          for oneValueTargets in targets {
            jsonArrayTargets += [NSNumber(int:oneValueTargets)]
          }
        jsonMap["targets"] = jsonArrayTargets
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.Master.BadgeSettings {
      return try Pogoprotos.Settings.Master.BadgeSettings.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Settings.Master.BadgeSettings {
      return try Pogoprotos.Settings.Master.BadgeSettings.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if (hasBadgeType) {
        output += "\(indent) badgeType: \(badgeType.description)\n"
      }
      if hasBadgeRank {
        output += "\(indent) badgeRank: \(badgeRank) \n"
      }
      var targetsElementIndex:Int = 0
      for oneValueTargets in targets  {
          output += "\(indent) targets[\(targetsElementIndex)]: \(oneValueTargets)\n"
          targetsElementIndex += 1
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasBadgeType {
               hashCode = (hashCode &* 31) &+ Int(badgeType.rawValue)
            }
            if hasBadgeRank {
               hashCode = (hashCode &* 31) &+ badgeRank.hashValue
            }
            for oneValueTargets in targets {
                hashCode = (hashCode &* 31) &+ oneValueTargets.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Settings.Master.BadgeSettings"
    }
    override public func className() -> String {
        return "Pogoprotos.Settings.Master.BadgeSettings"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Settings.Master.BadgeSettings.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Settings.Master.BadgeSettings = Pogoprotos.Settings.Master.BadgeSettings()
      public func getMessage() -> Pogoprotos.Settings.Master.BadgeSettings {
          return builderResult
      }

      required override public init () {
         super.init()
      }
        public var hasBadgeType:Bool{
            get {
                return builderResult.hasBadgeType
            }
        }
        public var badgeType:Pogoprotos.Enums.BadgeType {
            get {
                return builderResult.badgeType
            }
            set (value) {
                builderResult.hasBadgeType = true
                builderResult.badgeType = value
            }
        }
        public func setBadgeType(value:Pogoprotos.Enums.BadgeType) -> Pogoprotos.Settings.Master.BadgeSettings.Builder {
          self.badgeType = value
          return self
        }
        public func clearBadgeType() -> Pogoprotos.Settings.Master.BadgeSettings.Builder {
           builderResult.hasBadgeType = false
           builderResult.badgeType = .BadgeUnset
           return self
        }
      public var hasBadgeRank:Bool {
           get {
                return builderResult.hasBadgeRank
           }
      }
      public var badgeRank:Int32 {
           get {
                return builderResult.badgeRank
           }
           set (value) {
               builderResult.hasBadgeRank = true
               builderResult.badgeRank = value
           }
      }
      public func setBadgeRank(value:Int32) -> Pogoprotos.Settings.Master.BadgeSettings.Builder {
        self.badgeRank = value
        return self
      }
      public func clearBadgeRank() -> Pogoprotos.Settings.Master.BadgeSettings.Builder{
           builderResult.hasBadgeRank = false
           builderResult.badgeRank = Int32(0)
           return self
      }
      public var targets:Array<Int32> {
           get {
               return builderResult.targets
           }
           set (array) {
               builderResult.targets = array
           }
      }
      public func setTargets(value:Array<Int32>) -> Pogoprotos.Settings.Master.BadgeSettings.Builder {
        self.targets = value
        return self
      }
      public func clearTargets() -> Pogoprotos.Settings.Master.BadgeSettings.Builder {
         builderResult.targets.removeAll(keepCapacity: false)
         return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Settings.Master.BadgeSettings.Builder {
        builderResult = Pogoprotos.Settings.Master.BadgeSettings()
        return self
      }
      override public func clone() throws -> Pogoprotos.Settings.Master.BadgeSettings.Builder {
        return try Pogoprotos.Settings.Master.BadgeSettings.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Settings.Master.BadgeSettings {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Settings.Master.BadgeSettings {
        let returnMe:Pogoprotos.Settings.Master.BadgeSettings = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Settings.Master.BadgeSettings) throws -> Pogoprotos.Settings.Master.BadgeSettings.Builder {
        if other == Pogoprotos.Settings.Master.BadgeSettings() {
         return self
        }
        if other.hasBadgeType {
             badgeType = other.badgeType
        }
        if other.hasBadgeRank {
             badgeRank = other.badgeRank
        }
        if !other.targets.isEmpty {
            builderResult.targets += other.targets
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.Master.BadgeSettings.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.BadgeSettings.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            let valueIntbadgeType = try input.readEnum()
            if let enumsbadgeType = Pogoprotos.Enums.BadgeType(rawValue:valueIntbadgeType){
                 badgeType = enumsbadgeType
            } else {
                 try unknownFieldsBuilder.mergeVarintField(1, value:Int64(valueIntbadgeType))
            }

          case 16:
            badgeRank = try input.readInt32()

          case 26:
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.targets += [try input.readInt32()]
            }
            input.popLimit(limit)

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.Master.BadgeSettings.Builder {
        let resultDecodedBuilder = Pogoprotos.Settings.Master.BadgeSettings.Builder()
        if let jsonValueBadgeType = jsonMap["badgeType"] as? String {
          resultDecodedBuilder.badgeType = try Pogoprotos.Enums.BadgeType.fromString(jsonValueBadgeType)
        }
        if let jsonValueBadgeRank = jsonMap["badgeRank"] as? NSNumber {
          resultDecodedBuilder.badgeRank = jsonValueBadgeRank.intValue
        }
        if let jsonValueTargets = jsonMap["targets"] as? Array<NSNumber> {
          var jsonArrayTargets:Array<Int32> = []
          for oneValueTargets in jsonValueTargets {
            jsonArrayTargets += [oneValueTargets.intValue]
          }
          resultDecodedBuilder.targets = jsonArrayTargets
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Settings.Master.BadgeSettings.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Settings.Master.BadgeSettings.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
