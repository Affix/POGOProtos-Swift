// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "EncounterMessage.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Pogoprotos { public struct Networking { public struct Requests { public struct Messages { }}}}

public func == (lhs: Pogoprotos.Networking.Requests.Messages.EncounterMessage, rhs: Pogoprotos.Networking.Requests.Messages.EncounterMessage) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasEncounterId == rhs.hasEncounterId) && (!lhs.hasEncounterId || lhs.encounterId == rhs.encounterId)
  fieldCheck = fieldCheck && (lhs.hasSpawnPointId == rhs.hasSpawnPointId) && (!lhs.hasSpawnPointId || lhs.spawnPointId == rhs.spawnPointId)
  fieldCheck = fieldCheck && (lhs.hasPlayerLatitude == rhs.hasPlayerLatitude) && (!lhs.hasPlayerLatitude || lhs.playerLatitude == rhs.playerLatitude)
  fieldCheck = fieldCheck && (lhs.hasPlayerLongitude == rhs.hasPlayerLongitude) && (!lhs.hasPlayerLongitude || lhs.playerLongitude == rhs.playerLongitude)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Pogoprotos.Networking.Requests.Messages {
  public struct EncounterMessageRoot {
    public static var sharedInstance : EncounterMessageRoot {
     struct Static {
         static let instance : EncounterMessageRoot = EncounterMessageRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class EncounterMessage : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasEncounterId:Bool = false
    public private(set) var encounterId:UInt64 = UInt64(0)

    public private(set) var hasSpawnPointId:Bool = false
    public private(set) var spawnPointId:String = ""

    public private(set) var hasPlayerLatitude:Bool = false
    public private(set) var playerLatitude:Double = Double(0)

    public private(set) var hasPlayerLongitude:Bool = false
    public private(set) var playerLongitude:Double = Double(0)

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasEncounterId {
        try output.writeFixed64(1, value:encounterId)
      }
      if hasSpawnPointId {
        try output.writeString(2, value:spawnPointId)
      }
      if hasPlayerLatitude {
        try output.writeDouble(3, value:playerLatitude)
      }
      if hasPlayerLongitude {
        try output.writeDouble(4, value:playerLongitude)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasEncounterId {
        serialize_size += encounterId.computeFixed64Size(1)
      }
      if hasSpawnPointId {
        serialize_size += spawnPointId.computeStringSize(2)
      }
      if hasPlayerLatitude {
        serialize_size += playerLatitude.computeDoubleSize(3)
      }
      if hasPlayerLongitude {
        serialize_size += playerLongitude.computeDoubleSize(4)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Networking.Requests.Messages.EncounterMessage> {
      var mergedArray = Array<Pogoprotos.Networking.Requests.Messages.EncounterMessage>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Requests.Messages.EncounterMessage? {
      return try Pogoprotos.Networking.Requests.Messages.EncounterMessage.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Networking.Requests.Messages.EncounterMessage {
      return try Pogoprotos.Networking.Requests.Messages.EncounterMessage.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Networking.Requests.Messages.EncounterMessageRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Requests.Messages.EncounterMessage {
      return try Pogoprotos.Networking.Requests.Messages.EncounterMessage.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Requests.Messages.EncounterMessage {
      return try Pogoprotos.Networking.Requests.Messages.EncounterMessage.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Requests.Messages.EncounterMessage {
      return try Pogoprotos.Networking.Requests.Messages.EncounterMessage.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Requests.Messages.EncounterMessage {
      return try Pogoprotos.Networking.Requests.Messages.EncounterMessage.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Requests.Messages.EncounterMessage {
      return try Pogoprotos.Networking.Requests.Messages.EncounterMessage.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Networking.Requests.Messages.EncounterMessage.Builder {
      return Pogoprotos.Networking.Requests.Messages.EncounterMessage.classBuilder() as! Pogoprotos.Networking.Requests.Messages.EncounterMessage.Builder
    }
    public func getBuilder() -> Pogoprotos.Networking.Requests.Messages.EncounterMessage.Builder {
      return classBuilder() as! Pogoprotos.Networking.Requests.Messages.EncounterMessage.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Networking.Requests.Messages.EncounterMessage.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Networking.Requests.Messages.EncounterMessage.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Networking.Requests.Messages.EncounterMessage.Builder {
      return try Pogoprotos.Networking.Requests.Messages.EncounterMessage.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Networking.Requests.Messages.EncounterMessage) throws -> Pogoprotos.Networking.Requests.Messages.EncounterMessage.Builder {
      return try Pogoprotos.Networking.Requests.Messages.EncounterMessage.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasEncounterId {
        jsonMap["encounterId"] = "\(encounterId)"
      }
      if hasSpawnPointId {
        jsonMap["spawnPointId"] = spawnPointId
      }
      if hasPlayerLatitude {
        jsonMap["playerLatitude"] = NSNumber(double:playerLatitude)
      }
      if hasPlayerLongitude {
        jsonMap["playerLongitude"] = NSNumber(double:playerLongitude)
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Requests.Messages.EncounterMessage {
      return try Pogoprotos.Networking.Requests.Messages.EncounterMessage.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Networking.Requests.Messages.EncounterMessage {
      return try Pogoprotos.Networking.Requests.Messages.EncounterMessage.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasEncounterId {
        output += "\(indent) encounterId: \(encounterId) \n"
      }
      if hasSpawnPointId {
        output += "\(indent) spawnPointId: \(spawnPointId) \n"
      }
      if hasPlayerLatitude {
        output += "\(indent) playerLatitude: \(playerLatitude) \n"
      }
      if hasPlayerLongitude {
        output += "\(indent) playerLongitude: \(playerLongitude) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasEncounterId {
               hashCode = (hashCode &* 31) &+ encounterId.hashValue
            }
            if hasSpawnPointId {
               hashCode = (hashCode &* 31) &+ spawnPointId.hashValue
            }
            if hasPlayerLatitude {
               hashCode = (hashCode &* 31) &+ playerLatitude.hashValue
            }
            if hasPlayerLongitude {
               hashCode = (hashCode &* 31) &+ playerLongitude.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Networking.Requests.Messages.EncounterMessage"
    }
    override public func className() -> String {
        return "Pogoprotos.Networking.Requests.Messages.EncounterMessage"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Networking.Requests.Messages.EncounterMessage.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Networking.Requests.Messages.EncounterMessage = Pogoprotos.Networking.Requests.Messages.EncounterMessage()
      public func getMessage() -> Pogoprotos.Networking.Requests.Messages.EncounterMessage {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasEncounterId:Bool {
           get {
                return builderResult.hasEncounterId
           }
      }
      public var encounterId:UInt64 {
           get {
                return builderResult.encounterId
           }
           set (value) {
               builderResult.hasEncounterId = true
               builderResult.encounterId = value
           }
      }
      public func setEncounterId(value:UInt64) -> Pogoprotos.Networking.Requests.Messages.EncounterMessage.Builder {
        self.encounterId = value
        return self
      }
      public func clearEncounterId() -> Pogoprotos.Networking.Requests.Messages.EncounterMessage.Builder{
           builderResult.hasEncounterId = false
           builderResult.encounterId = UInt64(0)
           return self
      }
      public var hasSpawnPointId:Bool {
           get {
                return builderResult.hasSpawnPointId
           }
      }
      public var spawnPointId:String {
           get {
                return builderResult.spawnPointId
           }
           set (value) {
               builderResult.hasSpawnPointId = true
               builderResult.spawnPointId = value
           }
      }
      public func setSpawnPointId(value:String) -> Pogoprotos.Networking.Requests.Messages.EncounterMessage.Builder {
        self.spawnPointId = value
        return self
      }
      public func clearSpawnPointId() -> Pogoprotos.Networking.Requests.Messages.EncounterMessage.Builder{
           builderResult.hasSpawnPointId = false
           builderResult.spawnPointId = ""
           return self
      }
      public var hasPlayerLatitude:Bool {
           get {
                return builderResult.hasPlayerLatitude
           }
      }
      public var playerLatitude:Double {
           get {
                return builderResult.playerLatitude
           }
           set (value) {
               builderResult.hasPlayerLatitude = true
               builderResult.playerLatitude = value
           }
      }
      public func setPlayerLatitude(value:Double) -> Pogoprotos.Networking.Requests.Messages.EncounterMessage.Builder {
        self.playerLatitude = value
        return self
      }
      public func clearPlayerLatitude() -> Pogoprotos.Networking.Requests.Messages.EncounterMessage.Builder{
           builderResult.hasPlayerLatitude = false
           builderResult.playerLatitude = Double(0)
           return self
      }
      public var hasPlayerLongitude:Bool {
           get {
                return builderResult.hasPlayerLongitude
           }
      }
      public var playerLongitude:Double {
           get {
                return builderResult.playerLongitude
           }
           set (value) {
               builderResult.hasPlayerLongitude = true
               builderResult.playerLongitude = value
           }
      }
      public func setPlayerLongitude(value:Double) -> Pogoprotos.Networking.Requests.Messages.EncounterMessage.Builder {
        self.playerLongitude = value
        return self
      }
      public func clearPlayerLongitude() -> Pogoprotos.Networking.Requests.Messages.EncounterMessage.Builder{
           builderResult.hasPlayerLongitude = false
           builderResult.playerLongitude = Double(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Networking.Requests.Messages.EncounterMessage.Builder {
        builderResult = Pogoprotos.Networking.Requests.Messages.EncounterMessage()
        return self
      }
      override public func clone() throws -> Pogoprotos.Networking.Requests.Messages.EncounterMessage.Builder {
        return try Pogoprotos.Networking.Requests.Messages.EncounterMessage.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Networking.Requests.Messages.EncounterMessage {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Networking.Requests.Messages.EncounterMessage {
        let returnMe:Pogoprotos.Networking.Requests.Messages.EncounterMessage = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Networking.Requests.Messages.EncounterMessage) throws -> Pogoprotos.Networking.Requests.Messages.EncounterMessage.Builder {
        if other == Pogoprotos.Networking.Requests.Messages.EncounterMessage() {
         return self
        }
        if other.hasEncounterId {
             encounterId = other.encounterId
        }
        if other.hasSpawnPointId {
             spawnPointId = other.spawnPointId
        }
        if other.hasPlayerLatitude {
             playerLatitude = other.playerLatitude
        }
        if other.hasPlayerLongitude {
             playerLongitude = other.playerLongitude
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Requests.Messages.EncounterMessage.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Requests.Messages.EncounterMessage.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 9:
            encounterId = try input.readFixed64()

          case 18:
            spawnPointId = try input.readString()

          case 25:
            playerLatitude = try input.readDouble()

          case 33:
            playerLongitude = try input.readDouble()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Requests.Messages.EncounterMessage.Builder {
        let resultDecodedBuilder = Pogoprotos.Networking.Requests.Messages.EncounterMessage.Builder()
        if let jsonValueEncounterId = jsonMap["encounterId"] as? String {
          resultDecodedBuilder.encounterId = UInt64(jsonValueEncounterId)!
        }
        if let jsonValueSpawnPointId = jsonMap["spawnPointId"] as? String {
          resultDecodedBuilder.spawnPointId = jsonValueSpawnPointId
        }
        if let jsonValuePlayerLatitude = jsonMap["playerLatitude"] as? NSNumber {
          resultDecodedBuilder.playerLatitude = jsonValuePlayerLatitude.doubleValue
        }
        if let jsonValuePlayerLongitude = jsonMap["playerLongitude"] as? NSNumber {
          resultDecodedBuilder.playerLongitude = jsonValuePlayerLongitude.doubleValue
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Networking.Requests.Messages.EncounterMessage.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Networking.Requests.Messages.EncounterMessage.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
