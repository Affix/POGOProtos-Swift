// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "FortSearchResponse.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Pogoprotos { public struct Networking { public struct Responses { }}}

public func == (lhs: Pogoprotos.Networking.Responses.FortSearchResponse, rhs: Pogoprotos.Networking.Responses.FortSearchResponse) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasResult == rhs.hasResult) && (!lhs.hasResult || lhs.result == rhs.result)
  fieldCheck = fieldCheck && (lhs.itemsAwarded == rhs.itemsAwarded)
  fieldCheck = fieldCheck && (lhs.hasGemsAwarded == rhs.hasGemsAwarded) && (!lhs.hasGemsAwarded || lhs.gemsAwarded == rhs.gemsAwarded)
  fieldCheck = fieldCheck && (lhs.hasPokemonDataEgg == rhs.hasPokemonDataEgg) && (!lhs.hasPokemonDataEgg || lhs.pokemonDataEgg == rhs.pokemonDataEgg)
  fieldCheck = fieldCheck && (lhs.hasExperienceAwarded == rhs.hasExperienceAwarded) && (!lhs.hasExperienceAwarded || lhs.experienceAwarded == rhs.experienceAwarded)
  fieldCheck = fieldCheck && (lhs.hasCooldownCompleteTimestampMs == rhs.hasCooldownCompleteTimestampMs) && (!lhs.hasCooldownCompleteTimestampMs || lhs.cooldownCompleteTimestampMs == rhs.cooldownCompleteTimestampMs)
  fieldCheck = fieldCheck && (lhs.hasChainHackSequenceNumber == rhs.hasChainHackSequenceNumber) && (!lhs.hasChainHackSequenceNumber || lhs.chainHackSequenceNumber == rhs.chainHackSequenceNumber)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Pogoprotos.Networking.Responses {
  public struct FortSearchResponseRoot {
    public static var sharedInstance : FortSearchResponseRoot {
     struct Static {
         static let instance : FortSearchResponseRoot = FortSearchResponseRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Pogoprotos.Data.PokemonDataRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Inventory.Item.ItemAwardRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class FortSearchResponse : GeneratedMessage, GeneratedMessageProtocol {


      //Enum type declaration start 

      public enum Result:Int32, CustomDebugStringConvertible, CustomStringConvertible {
        case NoResultSet = 0
        case Success = 1
        case OutOfRange = 2
        case InCooldownPeriod = 3
        case InventoryFull = 4
        public func toString() -> String {
          switch self {
          case .NoResultSet: return "NO_RESULT_SET"
          case .Success: return "SUCCESS"
          case .OutOfRange: return "OUT_OF_RANGE"
          case .InCooldownPeriod: return "IN_COOLDOWN_PERIOD"
          case .InventoryFull: return "INVENTORY_FULL"
          }
        }
        public static func fromString(str:String) throws -> Pogoprotos.Networking.Responses.FortSearchResponse.Result {
          switch str {
          case "NO_RESULT_SET":  return .NoResultSet
          case "SUCCESS":  return .Success
          case "OUT_OF_RANGE":  return .OutOfRange
          case "IN_COOLDOWN_PERIOD":  return .InCooldownPeriod
          case "INVENTORY_FULL":  return .InventoryFull
          default: throw ProtocolBuffersError.InvalidProtocolBuffer("Conversion String to Enum has failed.")
          }
        }
        public var debugDescription:String { return getDescription() }
        public var description:String { return getDescription() }
        private func getDescription() -> String { 
            switch self {
                case .NoResultSet: return ".NoResultSet"
                case .Success: return ".Success"
                case .OutOfRange: return ".OutOfRange"
                case .InCooldownPeriod: return ".InCooldownPeriod"
                case .InventoryFull: return ".InventoryFull"
            }
        }
      }

      //Enum type declaration end 

    public private(set) var result:Pogoprotos.Networking.Responses.FortSearchResponse.Result = Pogoprotos.Networking.Responses.FortSearchResponse.Result.NoResultSet
    public private(set) var hasResult:Bool = false
    public private(set) var itemsAwarded:Array<Pogoprotos.Inventory.Item.ItemAward>  = Array<Pogoprotos.Inventory.Item.ItemAward>()
    public private(set) var hasGemsAwarded:Bool = false
    public private(set) var gemsAwarded:Int32 = Int32(0)

    public private(set) var hasPokemonDataEgg:Bool = false
    public private(set) var pokemonDataEgg:Pogoprotos.Data.PokemonData!
    public private(set) var hasExperienceAwarded:Bool = false
    public private(set) var experienceAwarded:Int32 = Int32(0)

    public private(set) var hasCooldownCompleteTimestampMs:Bool = false
    public private(set) var cooldownCompleteTimestampMs:Int64 = Int64(0)

    public private(set) var hasChainHackSequenceNumber:Bool = false
    public private(set) var chainHackSequenceNumber:Int32 = Int32(0)

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasResult {
        try output.writeEnum(1, value:result.rawValue)
      }
      for oneElementItemsAwarded in itemsAwarded {
          try output.writeMessage(2, value:oneElementItemsAwarded)
      }
      if hasGemsAwarded {
        try output.writeInt32(3, value:gemsAwarded)
      }
      if hasPokemonDataEgg {
        try output.writeMessage(4, value:pokemonDataEgg)
      }
      if hasExperienceAwarded {
        try output.writeInt32(5, value:experienceAwarded)
      }
      if hasCooldownCompleteTimestampMs {
        try output.writeInt64(6, value:cooldownCompleteTimestampMs)
      }
      if hasChainHackSequenceNumber {
        try output.writeInt32(7, value:chainHackSequenceNumber)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if (hasResult) {
        serialize_size += result.rawValue.computeEnumSize(1)
      }
      for oneElementItemsAwarded in itemsAwarded {
          serialize_size += oneElementItemsAwarded.computeMessageSize(2)
      }
      if hasGemsAwarded {
        serialize_size += gemsAwarded.computeInt32Size(3)
      }
      if hasPokemonDataEgg {
          if let varSizepokemonDataEgg = pokemonDataEgg?.computeMessageSize(4) {
              serialize_size += varSizepokemonDataEgg
          }
      }
      if hasExperienceAwarded {
        serialize_size += experienceAwarded.computeInt32Size(5)
      }
      if hasCooldownCompleteTimestampMs {
        serialize_size += cooldownCompleteTimestampMs.computeInt64Size(6)
      }
      if hasChainHackSequenceNumber {
        serialize_size += chainHackSequenceNumber.computeInt32Size(7)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Networking.Responses.FortSearchResponse> {
      var mergedArray = Array<Pogoprotos.Networking.Responses.FortSearchResponse>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Responses.FortSearchResponse? {
      return try Pogoprotos.Networking.Responses.FortSearchResponse.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Networking.Responses.FortSearchResponse {
      return try Pogoprotos.Networking.Responses.FortSearchResponse.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Networking.Responses.FortSearchResponseRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Responses.FortSearchResponse {
      return try Pogoprotos.Networking.Responses.FortSearchResponse.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Responses.FortSearchResponse {
      return try Pogoprotos.Networking.Responses.FortSearchResponse.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Responses.FortSearchResponse {
      return try Pogoprotos.Networking.Responses.FortSearchResponse.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Responses.FortSearchResponse {
      return try Pogoprotos.Networking.Responses.FortSearchResponse.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Responses.FortSearchResponse {
      return try Pogoprotos.Networking.Responses.FortSearchResponse.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Networking.Responses.FortSearchResponse.Builder {
      return Pogoprotos.Networking.Responses.FortSearchResponse.classBuilder() as! Pogoprotos.Networking.Responses.FortSearchResponse.Builder
    }
    public func getBuilder() -> Pogoprotos.Networking.Responses.FortSearchResponse.Builder {
      return classBuilder() as! Pogoprotos.Networking.Responses.FortSearchResponse.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Networking.Responses.FortSearchResponse.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Networking.Responses.FortSearchResponse.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Networking.Responses.FortSearchResponse.Builder {
      return try Pogoprotos.Networking.Responses.FortSearchResponse.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Networking.Responses.FortSearchResponse) throws -> Pogoprotos.Networking.Responses.FortSearchResponse.Builder {
      return try Pogoprotos.Networking.Responses.FortSearchResponse.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasResult {
        jsonMap["result"] = result.toString()
      }
      if !itemsAwarded.isEmpty {
        var jsonArrayItemsAwarded:Array<Dictionary<String,AnyObject>> = []
          for oneValueItemsAwarded in itemsAwarded {
            let ecodedMessageItemsAwarded = try oneValueItemsAwarded.encode()
            jsonArrayItemsAwarded += [ecodedMessageItemsAwarded]
          }
        jsonMap["itemsAwarded"] = jsonArrayItemsAwarded
      }
      if hasGemsAwarded {
        jsonMap["gemsAwarded"] = NSNumber(int:gemsAwarded)
      }
      if hasPokemonDataEgg {
        jsonMap["pokemonDataEgg"] = try pokemonDataEgg.encode()
      }
      if hasExperienceAwarded {
        jsonMap["experienceAwarded"] = NSNumber(int:experienceAwarded)
      }
      if hasCooldownCompleteTimestampMs {
        jsonMap["cooldownCompleteTimestampMs"] = "\(cooldownCompleteTimestampMs)"
      }
      if hasChainHackSequenceNumber {
        jsonMap["chainHackSequenceNumber"] = NSNumber(int:chainHackSequenceNumber)
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Responses.FortSearchResponse {
      return try Pogoprotos.Networking.Responses.FortSearchResponse.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Networking.Responses.FortSearchResponse {
      return try Pogoprotos.Networking.Responses.FortSearchResponse.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if (hasResult) {
        output += "\(indent) result: \(result.description)\n"
      }
      var itemsAwardedElementIndex:Int = 0
      for oneElementItemsAwarded in itemsAwarded {
          output += "\(indent) itemsAwarded[\(itemsAwardedElementIndex)] {\n"
          output += try oneElementItemsAwarded.getDescription("\(indent)  ")
          output += "\(indent)}\n"
          itemsAwardedElementIndex += 1
      }
      if hasGemsAwarded {
        output += "\(indent) gemsAwarded: \(gemsAwarded) \n"
      }
      if hasPokemonDataEgg {
        output += "\(indent) pokemonDataEgg {\n"
        if let outDescPokemonDataEgg = pokemonDataEgg {
          output += try outDescPokemonDataEgg.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasExperienceAwarded {
        output += "\(indent) experienceAwarded: \(experienceAwarded) \n"
      }
      if hasCooldownCompleteTimestampMs {
        output += "\(indent) cooldownCompleteTimestampMs: \(cooldownCompleteTimestampMs) \n"
      }
      if hasChainHackSequenceNumber {
        output += "\(indent) chainHackSequenceNumber: \(chainHackSequenceNumber) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasResult {
               hashCode = (hashCode &* 31) &+ Int(result.rawValue)
            }
            for oneElementItemsAwarded in itemsAwarded {
                hashCode = (hashCode &* 31) &+ oneElementItemsAwarded.hashValue
            }
            if hasGemsAwarded {
               hashCode = (hashCode &* 31) &+ gemsAwarded.hashValue
            }
            if hasPokemonDataEgg {
                if let hashValuepokemonDataEgg = pokemonDataEgg?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuepokemonDataEgg
                }
            }
            if hasExperienceAwarded {
               hashCode = (hashCode &* 31) &+ experienceAwarded.hashValue
            }
            if hasCooldownCompleteTimestampMs {
               hashCode = (hashCode &* 31) &+ cooldownCompleteTimestampMs.hashValue
            }
            if hasChainHackSequenceNumber {
               hashCode = (hashCode &* 31) &+ chainHackSequenceNumber.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Networking.Responses.FortSearchResponse"
    }
    override public func className() -> String {
        return "Pogoprotos.Networking.Responses.FortSearchResponse"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Networking.Responses.FortSearchResponse.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Networking.Responses.FortSearchResponse = Pogoprotos.Networking.Responses.FortSearchResponse()
      public func getMessage() -> Pogoprotos.Networking.Responses.FortSearchResponse {
          return builderResult
      }

      required override public init () {
         super.init()
      }
        public var hasResult:Bool{
            get {
                return builderResult.hasResult
            }
        }
        public var result:Pogoprotos.Networking.Responses.FortSearchResponse.Result {
            get {
                return builderResult.result
            }
            set (value) {
                builderResult.hasResult = true
                builderResult.result = value
            }
        }
        public func setResult(value:Pogoprotos.Networking.Responses.FortSearchResponse.Result) -> Pogoprotos.Networking.Responses.FortSearchResponse.Builder {
          self.result = value
          return self
        }
        public func clearResult() -> Pogoprotos.Networking.Responses.FortSearchResponse.Builder {
           builderResult.hasResult = false
           builderResult.result = .NoResultSet
           return self
        }
      public var itemsAwarded:Array<Pogoprotos.Inventory.Item.ItemAward> {
           get {
               return builderResult.itemsAwarded
           }
           set (value) {
               builderResult.itemsAwarded = value
           }
      }
      public func setItemsAwarded(value:Array<Pogoprotos.Inventory.Item.ItemAward>) -> Pogoprotos.Networking.Responses.FortSearchResponse.Builder {
        self.itemsAwarded = value
        return self
      }
      public func clearItemsAwarded() -> Pogoprotos.Networking.Responses.FortSearchResponse.Builder {
        builderResult.itemsAwarded.removeAll(keepCapacity: false)
        return self
      }
      public var hasGemsAwarded:Bool {
           get {
                return builderResult.hasGemsAwarded
           }
      }
      public var gemsAwarded:Int32 {
           get {
                return builderResult.gemsAwarded
           }
           set (value) {
               builderResult.hasGemsAwarded = true
               builderResult.gemsAwarded = value
           }
      }
      public func setGemsAwarded(value:Int32) -> Pogoprotos.Networking.Responses.FortSearchResponse.Builder {
        self.gemsAwarded = value
        return self
      }
      public func clearGemsAwarded() -> Pogoprotos.Networking.Responses.FortSearchResponse.Builder{
           builderResult.hasGemsAwarded = false
           builderResult.gemsAwarded = Int32(0)
           return self
      }
      public var hasPokemonDataEgg:Bool {
           get {
               return builderResult.hasPokemonDataEgg
           }
      }
      public var pokemonDataEgg:Pogoprotos.Data.PokemonData! {
           get {
               if pokemonDataEggBuilder_ != nil {
                  builderResult.pokemonDataEgg = pokemonDataEggBuilder_.getMessage()
               }
               return builderResult.pokemonDataEgg
           }
           set (value) {
               builderResult.hasPokemonDataEgg = true
               builderResult.pokemonDataEgg = value
           }
      }
      private var pokemonDataEggBuilder_:Pogoprotos.Data.PokemonData.Builder! {
           didSet {
              builderResult.hasPokemonDataEgg = true
           }
      }
      public func getPokemonDataEggBuilder() -> Pogoprotos.Data.PokemonData.Builder {
        if pokemonDataEggBuilder_ == nil {
           pokemonDataEggBuilder_ = Pogoprotos.Data.PokemonData.Builder()
           builderResult.pokemonDataEgg = pokemonDataEggBuilder_.getMessage()
           if pokemonDataEgg != nil {
              try! pokemonDataEggBuilder_.mergeFrom(pokemonDataEgg)
           }
        }
        return pokemonDataEggBuilder_
      }
      public func setPokemonDataEgg(value:Pogoprotos.Data.PokemonData!) -> Pogoprotos.Networking.Responses.FortSearchResponse.Builder {
        self.pokemonDataEgg = value
        return self
      }
      public func mergePokemonDataEgg(value:Pogoprotos.Data.PokemonData) throws -> Pogoprotos.Networking.Responses.FortSearchResponse.Builder {
        if builderResult.hasPokemonDataEgg {
          builderResult.pokemonDataEgg = try Pogoprotos.Data.PokemonData.builderWithPrototype(builderResult.pokemonDataEgg).mergeFrom(value).buildPartial()
        } else {
          builderResult.pokemonDataEgg = value
        }
        builderResult.hasPokemonDataEgg = true
        return self
      }
      public func clearPokemonDataEgg() -> Pogoprotos.Networking.Responses.FortSearchResponse.Builder {
        pokemonDataEggBuilder_ = nil
        builderResult.hasPokemonDataEgg = false
        builderResult.pokemonDataEgg = nil
        return self
      }
      public var hasExperienceAwarded:Bool {
           get {
                return builderResult.hasExperienceAwarded
           }
      }
      public var experienceAwarded:Int32 {
           get {
                return builderResult.experienceAwarded
           }
           set (value) {
               builderResult.hasExperienceAwarded = true
               builderResult.experienceAwarded = value
           }
      }
      public func setExperienceAwarded(value:Int32) -> Pogoprotos.Networking.Responses.FortSearchResponse.Builder {
        self.experienceAwarded = value
        return self
      }
      public func clearExperienceAwarded() -> Pogoprotos.Networking.Responses.FortSearchResponse.Builder{
           builderResult.hasExperienceAwarded = false
           builderResult.experienceAwarded = Int32(0)
           return self
      }
      public var hasCooldownCompleteTimestampMs:Bool {
           get {
                return builderResult.hasCooldownCompleteTimestampMs
           }
      }
      public var cooldownCompleteTimestampMs:Int64 {
           get {
                return builderResult.cooldownCompleteTimestampMs
           }
           set (value) {
               builderResult.hasCooldownCompleteTimestampMs = true
               builderResult.cooldownCompleteTimestampMs = value
           }
      }
      public func setCooldownCompleteTimestampMs(value:Int64) -> Pogoprotos.Networking.Responses.FortSearchResponse.Builder {
        self.cooldownCompleteTimestampMs = value
        return self
      }
      public func clearCooldownCompleteTimestampMs() -> Pogoprotos.Networking.Responses.FortSearchResponse.Builder{
           builderResult.hasCooldownCompleteTimestampMs = false
           builderResult.cooldownCompleteTimestampMs = Int64(0)
           return self
      }
      public var hasChainHackSequenceNumber:Bool {
           get {
                return builderResult.hasChainHackSequenceNumber
           }
      }
      public var chainHackSequenceNumber:Int32 {
           get {
                return builderResult.chainHackSequenceNumber
           }
           set (value) {
               builderResult.hasChainHackSequenceNumber = true
               builderResult.chainHackSequenceNumber = value
           }
      }
      public func setChainHackSequenceNumber(value:Int32) -> Pogoprotos.Networking.Responses.FortSearchResponse.Builder {
        self.chainHackSequenceNumber = value
        return self
      }
      public func clearChainHackSequenceNumber() -> Pogoprotos.Networking.Responses.FortSearchResponse.Builder{
           builderResult.hasChainHackSequenceNumber = false
           builderResult.chainHackSequenceNumber = Int32(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Networking.Responses.FortSearchResponse.Builder {
        builderResult = Pogoprotos.Networking.Responses.FortSearchResponse()
        return self
      }
      override public func clone() throws -> Pogoprotos.Networking.Responses.FortSearchResponse.Builder {
        return try Pogoprotos.Networking.Responses.FortSearchResponse.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Networking.Responses.FortSearchResponse {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Networking.Responses.FortSearchResponse {
        let returnMe:Pogoprotos.Networking.Responses.FortSearchResponse = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Networking.Responses.FortSearchResponse) throws -> Pogoprotos.Networking.Responses.FortSearchResponse.Builder {
        if other == Pogoprotos.Networking.Responses.FortSearchResponse() {
         return self
        }
        if other.hasResult {
             result = other.result
        }
        if !other.itemsAwarded.isEmpty  {
           builderResult.itemsAwarded += other.itemsAwarded
        }
        if other.hasGemsAwarded {
             gemsAwarded = other.gemsAwarded
        }
        if (other.hasPokemonDataEgg) {
            try mergePokemonDataEgg(other.pokemonDataEgg)
        }
        if other.hasExperienceAwarded {
             experienceAwarded = other.experienceAwarded
        }
        if other.hasCooldownCompleteTimestampMs {
             cooldownCompleteTimestampMs = other.cooldownCompleteTimestampMs
        }
        if other.hasChainHackSequenceNumber {
             chainHackSequenceNumber = other.chainHackSequenceNumber
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Responses.FortSearchResponse.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Responses.FortSearchResponse.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            let valueIntresult = try input.readEnum()
            if let enumsresult = Pogoprotos.Networking.Responses.FortSearchResponse.Result(rawValue:valueIntresult){
                 result = enumsresult
            } else {
                 try unknownFieldsBuilder.mergeVarintField(1, value:Int64(valueIntresult))
            }

          case 18:
            let subBuilder = Pogoprotos.Inventory.Item.ItemAward.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            itemsAwarded += [subBuilder.buildPartial()]

          case 24:
            gemsAwarded = try input.readInt32()

          case 34:
            let subBuilder:Pogoprotos.Data.PokemonData.Builder = Pogoprotos.Data.PokemonData.Builder()
            if hasPokemonDataEgg {
              try subBuilder.mergeFrom(pokemonDataEgg)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            pokemonDataEgg = subBuilder.buildPartial()

          case 40:
            experienceAwarded = try input.readInt32()

          case 48:
            cooldownCompleteTimestampMs = try input.readInt64()

          case 56:
            chainHackSequenceNumber = try input.readInt32()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Responses.FortSearchResponse.Builder {
        let resultDecodedBuilder = Pogoprotos.Networking.Responses.FortSearchResponse.Builder()
        if let jsonValueResult = jsonMap["result"] as? String {
          resultDecodedBuilder.result = try Pogoprotos.Networking.Responses.FortSearchResponse.Result.fromString(jsonValueResult)
        }
        if let jsonValueItemsAwarded = jsonMap["itemsAwarded"] as? Array<Dictionary<String,AnyObject>> {
          var jsonArrayItemsAwarded:Array<Pogoprotos.Inventory.Item.ItemAward> = []
          for oneValueItemsAwarded in jsonValueItemsAwarded {
            let messageFromStringItemsAwarded = try Pogoprotos.Inventory.Item.ItemAward.Builder.decodeToBuilder(oneValueItemsAwarded).build()

            jsonArrayItemsAwarded += [messageFromStringItemsAwarded]
          }
          resultDecodedBuilder.itemsAwarded = jsonArrayItemsAwarded
        }
        if let jsonValueGemsAwarded = jsonMap["gemsAwarded"] as? NSNumber {
          resultDecodedBuilder.gemsAwarded = jsonValueGemsAwarded.intValue
        }
        if let jsonValuePokemonDataEgg = jsonMap["pokemonDataEgg"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.pokemonDataEgg = try Pogoprotos.Data.PokemonData.Builder.decodeToBuilder(jsonValuePokemonDataEgg).build()

        }
        if let jsonValueExperienceAwarded = jsonMap["experienceAwarded"] as? NSNumber {
          resultDecodedBuilder.experienceAwarded = jsonValueExperienceAwarded.intValue
        }
        if let jsonValueCooldownCompleteTimestampMs = jsonMap["cooldownCompleteTimestampMs"] as? String {
          resultDecodedBuilder.cooldownCompleteTimestampMs = Int64(jsonValueCooldownCompleteTimestampMs)!
        }
        if let jsonValueChainHackSequenceNumber = jsonMap["chainHackSequenceNumber"] as? NSNumber {
          resultDecodedBuilder.chainHackSequenceNumber = jsonValueChainHackSequenceNumber.intValue
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Networking.Responses.FortSearchResponse.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Networking.Responses.FortSearchResponse.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
