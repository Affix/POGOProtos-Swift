// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "AuthTicket.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Pogoprotos { public struct Networking { public struct Envelopes { }}}

public func == (lhs: Pogoprotos.Networking.Envelopes.AuthTicket, rhs: Pogoprotos.Networking.Envelopes.AuthTicket) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasStart == rhs.hasStart) && (!lhs.hasStart || lhs.start == rhs.start)
  fieldCheck = fieldCheck && (lhs.hasExpireTimestampMs == rhs.hasExpireTimestampMs) && (!lhs.hasExpireTimestampMs || lhs.expireTimestampMs == rhs.expireTimestampMs)
  fieldCheck = fieldCheck && (lhs.hasEnd == rhs.hasEnd) && (!lhs.hasEnd || lhs.end == rhs.end)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Pogoprotos.Networking.Envelopes {
  public struct AuthTicketRoot {
    public static var sharedInstance : AuthTicketRoot {
     struct Static {
         static let instance : AuthTicketRoot = AuthTicketRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class AuthTicket : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasStart:Bool = false
    public private(set) var start:NSData = NSData()

    public private(set) var hasExpireTimestampMs:Bool = false
    public private(set) var expireTimestampMs:UInt64 = UInt64(0)

    public private(set) var hasEnd:Bool = false
    public private(set) var end:NSData = NSData()

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasStart {
        try output.writeData(1, value:start)
      }
      if hasExpireTimestampMs {
        try output.writeUInt64(2, value:expireTimestampMs)
      }
      if hasEnd {
        try output.writeData(3, value:end)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasStart {
        serialize_size += start.computeDataSize(1)
      }
      if hasExpireTimestampMs {
        serialize_size += expireTimestampMs.computeUInt64Size(2)
      }
      if hasEnd {
        serialize_size += end.computeDataSize(3)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Networking.Envelopes.AuthTicket> {
      var mergedArray = Array<Pogoprotos.Networking.Envelopes.AuthTicket>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Envelopes.AuthTicket? {
      return try Pogoprotos.Networking.Envelopes.AuthTicket.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Networking.Envelopes.AuthTicket {
      return try Pogoprotos.Networking.Envelopes.AuthTicket.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Networking.Envelopes.AuthTicketRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.AuthTicket {
      return try Pogoprotos.Networking.Envelopes.AuthTicket.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Envelopes.AuthTicket {
      return try Pogoprotos.Networking.Envelopes.AuthTicket.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.AuthTicket {
      return try Pogoprotos.Networking.Envelopes.AuthTicket.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.AuthTicket {
      return try Pogoprotos.Networking.Envelopes.AuthTicket.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.AuthTicket {
      return try Pogoprotos.Networking.Envelopes.AuthTicket.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder {
      return Pogoprotos.Networking.Envelopes.AuthTicket.classBuilder() as! Pogoprotos.Networking.Envelopes.AuthTicket.Builder
    }
    public func getBuilder() -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder {
      return classBuilder() as! Pogoprotos.Networking.Envelopes.AuthTicket.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Networking.Envelopes.AuthTicket.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Networking.Envelopes.AuthTicket.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder {
      return try Pogoprotos.Networking.Envelopes.AuthTicket.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Networking.Envelopes.AuthTicket) throws -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder {
      return try Pogoprotos.Networking.Envelopes.AuthTicket.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasStart {
        jsonMap["start"] = start.base64EncodedStringWithOptions(NSDataBase64EncodingOptions(rawValue: 0))
      }
      if hasExpireTimestampMs {
        jsonMap["expireTimestampMs"] = "\(expireTimestampMs)"
      }
      if hasEnd {
        jsonMap["end"] = end.base64EncodedStringWithOptions(NSDataBase64EncodingOptions(rawValue: 0))
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Envelopes.AuthTicket {
      return try Pogoprotos.Networking.Envelopes.AuthTicket.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Networking.Envelopes.AuthTicket {
      return try Pogoprotos.Networking.Envelopes.AuthTicket.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasStart {
        output += "\(indent) start: \(start) \n"
      }
      if hasExpireTimestampMs {
        output += "\(indent) expireTimestampMs: \(expireTimestampMs) \n"
      }
      if hasEnd {
        output += "\(indent) end: \(end) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasStart {
               hashCode = (hashCode &* 31) &+ start.hashValue
            }
            if hasExpireTimestampMs {
               hashCode = (hashCode &* 31) &+ expireTimestampMs.hashValue
            }
            if hasEnd {
               hashCode = (hashCode &* 31) &+ end.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Networking.Envelopes.AuthTicket"
    }
    override public func className() -> String {
        return "Pogoprotos.Networking.Envelopes.AuthTicket"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Networking.Envelopes.AuthTicket.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Networking.Envelopes.AuthTicket = Pogoprotos.Networking.Envelopes.AuthTicket()
      public func getMessage() -> Pogoprotos.Networking.Envelopes.AuthTicket {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasStart:Bool {
           get {
                return builderResult.hasStart
           }
      }
      public var start:NSData {
           get {
                return builderResult.start
           }
           set (value) {
               builderResult.hasStart = true
               builderResult.start = value
           }
      }
      public func setStart(value:NSData) -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder {
        self.start = value
        return self
      }
      public func clearStart() -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder{
           builderResult.hasStart = false
           builderResult.start = NSData()
           return self
      }
      public var hasExpireTimestampMs:Bool {
           get {
                return builderResult.hasExpireTimestampMs
           }
      }
      public var expireTimestampMs:UInt64 {
           get {
                return builderResult.expireTimestampMs
           }
           set (value) {
               builderResult.hasExpireTimestampMs = true
               builderResult.expireTimestampMs = value
           }
      }
      public func setExpireTimestampMs(value:UInt64) -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder {
        self.expireTimestampMs = value
        return self
      }
      public func clearExpireTimestampMs() -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder{
           builderResult.hasExpireTimestampMs = false
           builderResult.expireTimestampMs = UInt64(0)
           return self
      }
      public var hasEnd:Bool {
           get {
                return builderResult.hasEnd
           }
      }
      public var end:NSData {
           get {
                return builderResult.end
           }
           set (value) {
               builderResult.hasEnd = true
               builderResult.end = value
           }
      }
      public func setEnd(value:NSData) -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder {
        self.end = value
        return self
      }
      public func clearEnd() -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder{
           builderResult.hasEnd = false
           builderResult.end = NSData()
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder {
        builderResult = Pogoprotos.Networking.Envelopes.AuthTicket()
        return self
      }
      override public func clone() throws -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder {
        return try Pogoprotos.Networking.Envelopes.AuthTicket.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Networking.Envelopes.AuthTicket {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Networking.Envelopes.AuthTicket {
        let returnMe:Pogoprotos.Networking.Envelopes.AuthTicket = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Networking.Envelopes.AuthTicket) throws -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder {
        if other == Pogoprotos.Networking.Envelopes.AuthTicket() {
         return self
        }
        if other.hasStart {
             start = other.start
        }
        if other.hasExpireTimestampMs {
             expireTimestampMs = other.expireTimestampMs
        }
        if other.hasEnd {
             end = other.end
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10:
            start = try input.readData()

          case 16:
            expireTimestampMs = try input.readUInt64()

          case 26:
            end = try input.readData()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder {
        let resultDecodedBuilder = Pogoprotos.Networking.Envelopes.AuthTicket.Builder()
        if let jsonValueStart = jsonMap["start"] as? String {
          resultDecodedBuilder.start = NSData(base64EncodedString:jsonValueStart, options: NSDataBase64DecodingOptions(rawValue:0))!
        }
        if let jsonValueExpireTimestampMs = jsonMap["expireTimestampMs"] as? String {
          resultDecodedBuilder.expireTimestampMs = UInt64(jsonValueExpireTimestampMs)!
        }
        if let jsonValueEnd = jsonMap["end"] as? String {
          resultDecodedBuilder.end = NSData(base64EncodedString:jsonValueEnd, options: NSDataBase64DecodingOptions(rawValue:0))!
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Networking.Envelopes.AuthTicket.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
