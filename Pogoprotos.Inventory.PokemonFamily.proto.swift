// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "PokemonFamily.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Pogoprotos { public struct Inventory { }}

public func == (lhs: Pogoprotos.Inventory.PokemonFamily, rhs: Pogoprotos.Inventory.PokemonFamily) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasFamilyId == rhs.hasFamilyId) && (!lhs.hasFamilyId || lhs.familyId == rhs.familyId)
  fieldCheck = fieldCheck && (lhs.hasCandy == rhs.hasCandy) && (!lhs.hasCandy || lhs.candy == rhs.candy)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Pogoprotos.Inventory {
  public struct PokemonFamilyRoot {
    public static var sharedInstance : PokemonFamilyRoot {
     struct Static {
         static let instance : PokemonFamilyRoot = PokemonFamilyRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Pogoprotos.Enums.PokemonFamilyIdRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class PokemonFamily : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var familyId:Pogoprotos.Enums.PokemonFamilyId = Pogoprotos.Enums.PokemonFamilyId.FamilyUnset
    public private(set) var hasFamilyId:Bool = false
    public private(set) var hasCandy:Bool = false
    public private(set) var candy:Int32 = Int32(0)

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasFamilyId {
        try output.writeEnum(1, value:familyId.rawValue)
      }
      if hasCandy {
        try output.writeInt32(2, value:candy)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if (hasFamilyId) {
        serialize_size += familyId.rawValue.computeEnumSize(1)
      }
      if hasCandy {
        serialize_size += candy.computeInt32Size(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Inventory.PokemonFamily> {
      var mergedArray = Array<Pogoprotos.Inventory.PokemonFamily>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Inventory.PokemonFamily? {
      return try Pogoprotos.Inventory.PokemonFamily.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Inventory.PokemonFamily {
      return try Pogoprotos.Inventory.PokemonFamily.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Inventory.PokemonFamilyRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Inventory.PokemonFamily {
      return try Pogoprotos.Inventory.PokemonFamily.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Inventory.PokemonFamily {
      return try Pogoprotos.Inventory.PokemonFamily.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Inventory.PokemonFamily {
      return try Pogoprotos.Inventory.PokemonFamily.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Inventory.PokemonFamily {
      return try Pogoprotos.Inventory.PokemonFamily.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Inventory.PokemonFamily {
      return try Pogoprotos.Inventory.PokemonFamily.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Inventory.PokemonFamily.Builder {
      return Pogoprotos.Inventory.PokemonFamily.classBuilder() as! Pogoprotos.Inventory.PokemonFamily.Builder
    }
    public func getBuilder() -> Pogoprotos.Inventory.PokemonFamily.Builder {
      return classBuilder() as! Pogoprotos.Inventory.PokemonFamily.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Inventory.PokemonFamily.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Inventory.PokemonFamily.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Inventory.PokemonFamily.Builder {
      return try Pogoprotos.Inventory.PokemonFamily.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Inventory.PokemonFamily) throws -> Pogoprotos.Inventory.PokemonFamily.Builder {
      return try Pogoprotos.Inventory.PokemonFamily.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasFamilyId {
        jsonMap["familyId"] = familyId.toString()
      }
      if hasCandy {
        jsonMap["candy"] = NSNumber(int:candy)
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Inventory.PokemonFamily {
      return try Pogoprotos.Inventory.PokemonFamily.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Inventory.PokemonFamily {
      return try Pogoprotos.Inventory.PokemonFamily.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if (hasFamilyId) {
        output += "\(indent) familyId: \(familyId.description)\n"
      }
      if hasCandy {
        output += "\(indent) candy: \(candy) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasFamilyId {
               hashCode = (hashCode &* 31) &+ Int(familyId.rawValue)
            }
            if hasCandy {
               hashCode = (hashCode &* 31) &+ candy.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Inventory.PokemonFamily"
    }
    override public func className() -> String {
        return "Pogoprotos.Inventory.PokemonFamily"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Inventory.PokemonFamily.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Inventory.PokemonFamily = Pogoprotos.Inventory.PokemonFamily()
      public func getMessage() -> Pogoprotos.Inventory.PokemonFamily {
          return builderResult
      }

      required override public init () {
         super.init()
      }
        public var hasFamilyId:Bool{
            get {
                return builderResult.hasFamilyId
            }
        }
        public var familyId:Pogoprotos.Enums.PokemonFamilyId {
            get {
                return builderResult.familyId
            }
            set (value) {
                builderResult.hasFamilyId = true
                builderResult.familyId = value
            }
        }
        public func setFamilyId(value:Pogoprotos.Enums.PokemonFamilyId) -> Pogoprotos.Inventory.PokemonFamily.Builder {
          self.familyId = value
          return self
        }
        public func clearFamilyId() -> Pogoprotos.Inventory.PokemonFamily.Builder {
           builderResult.hasFamilyId = false
           builderResult.familyId = .FamilyUnset
           return self
        }
      public var hasCandy:Bool {
           get {
                return builderResult.hasCandy
           }
      }
      public var candy:Int32 {
           get {
                return builderResult.candy
           }
           set (value) {
               builderResult.hasCandy = true
               builderResult.candy = value
           }
      }
      public func setCandy(value:Int32) -> Pogoprotos.Inventory.PokemonFamily.Builder {
        self.candy = value
        return self
      }
      public func clearCandy() -> Pogoprotos.Inventory.PokemonFamily.Builder{
           builderResult.hasCandy = false
           builderResult.candy = Int32(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Inventory.PokemonFamily.Builder {
        builderResult = Pogoprotos.Inventory.PokemonFamily()
        return self
      }
      override public func clone() throws -> Pogoprotos.Inventory.PokemonFamily.Builder {
        return try Pogoprotos.Inventory.PokemonFamily.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Inventory.PokemonFamily {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Inventory.PokemonFamily {
        let returnMe:Pogoprotos.Inventory.PokemonFamily = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Inventory.PokemonFamily) throws -> Pogoprotos.Inventory.PokemonFamily.Builder {
        if other == Pogoprotos.Inventory.PokemonFamily() {
         return self
        }
        if other.hasFamilyId {
             familyId = other.familyId
        }
        if other.hasCandy {
             candy = other.candy
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Inventory.PokemonFamily.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Inventory.PokemonFamily.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            let valueIntfamilyId = try input.readEnum()
            if let enumsfamilyId = Pogoprotos.Enums.PokemonFamilyId(rawValue:valueIntfamilyId){
                 familyId = enumsfamilyId
            } else {
                 try unknownFieldsBuilder.mergeVarintField(1, value:Int64(valueIntfamilyId))
            }

          case 16:
            candy = try input.readInt32()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Inventory.PokemonFamily.Builder {
        let resultDecodedBuilder = Pogoprotos.Inventory.PokemonFamily.Builder()
        if let jsonValueFamilyId = jsonMap["familyId"] as? String {
          resultDecodedBuilder.familyId = try Pogoprotos.Enums.PokemonFamilyId.fromString(jsonValueFamilyId)
        }
        if let jsonValueCandy = jsonMap["candy"] as? NSNumber {
          resultDecodedBuilder.candy = jsonValueCandy.intValue
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Inventory.PokemonFamily.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Inventory.PokemonFamily.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
