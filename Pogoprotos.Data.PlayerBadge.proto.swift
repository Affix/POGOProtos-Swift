// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "PlayerBadge.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Pogoprotos { public struct Data { }}

public func == (lhs: Pogoprotos.Data.PlayerBadge, rhs: Pogoprotos.Data.PlayerBadge) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasBadgeType == rhs.hasBadgeType) && (!lhs.hasBadgeType || lhs.badgeType == rhs.badgeType)
  fieldCheck = fieldCheck && (lhs.hasRank == rhs.hasRank) && (!lhs.hasRank || lhs.rank == rhs.rank)
  fieldCheck = fieldCheck && (lhs.hasStartValue == rhs.hasStartValue) && (!lhs.hasStartValue || lhs.startValue == rhs.startValue)
  fieldCheck = fieldCheck && (lhs.hasEndValue == rhs.hasEndValue) && (!lhs.hasEndValue || lhs.endValue == rhs.endValue)
  fieldCheck = fieldCheck && (lhs.hasCurrentValue == rhs.hasCurrentValue) && (!lhs.hasCurrentValue || lhs.currentValue == rhs.currentValue)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Pogoprotos.Data {
  public struct PlayerBadgeRoot {
    public static var sharedInstance : PlayerBadgeRoot {
     struct Static {
         static let instance : PlayerBadgeRoot = PlayerBadgeRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Pogoprotos.Enums.BadgeTypeRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class PlayerBadge : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var badgeType:Pogoprotos.Enums.BadgeType = Pogoprotos.Enums.BadgeType.BadgeUnset
    public private(set) var hasBadgeType:Bool = false
    public private(set) var hasRank:Bool = false
    public private(set) var rank:Int32 = Int32(0)

    public private(set) var hasStartValue:Bool = false
    public private(set) var startValue:Int32 = Int32(0)

    public private(set) var hasEndValue:Bool = false
    public private(set) var endValue:Int32 = Int32(0)

    public private(set) var hasCurrentValue:Bool = false
    public private(set) var currentValue:Double = Double(0)

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasBadgeType {
        try output.writeEnum(1, value:badgeType.rawValue)
      }
      if hasRank {
        try output.writeInt32(2, value:rank)
      }
      if hasStartValue {
        try output.writeInt32(3, value:startValue)
      }
      if hasEndValue {
        try output.writeInt32(4, value:endValue)
      }
      if hasCurrentValue {
        try output.writeDouble(5, value:currentValue)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if (hasBadgeType) {
        serialize_size += badgeType.rawValue.computeEnumSize(1)
      }
      if hasRank {
        serialize_size += rank.computeInt32Size(2)
      }
      if hasStartValue {
        serialize_size += startValue.computeInt32Size(3)
      }
      if hasEndValue {
        serialize_size += endValue.computeInt32Size(4)
      }
      if hasCurrentValue {
        serialize_size += currentValue.computeDoubleSize(5)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Data.PlayerBadge> {
      var mergedArray = Array<Pogoprotos.Data.PlayerBadge>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Data.PlayerBadge? {
      return try Pogoprotos.Data.PlayerBadge.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Data.PlayerBadge {
      return try Pogoprotos.Data.PlayerBadge.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Data.PlayerBadgeRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.PlayerBadge {
      return try Pogoprotos.Data.PlayerBadge.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Data.PlayerBadge {
      return try Pogoprotos.Data.PlayerBadge.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.PlayerBadge {
      return try Pogoprotos.Data.PlayerBadge.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Data.PlayerBadge {
      return try Pogoprotos.Data.PlayerBadge.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.PlayerBadge {
      return try Pogoprotos.Data.PlayerBadge.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Data.PlayerBadge.Builder {
      return Pogoprotos.Data.PlayerBadge.classBuilder() as! Pogoprotos.Data.PlayerBadge.Builder
    }
    public func getBuilder() -> Pogoprotos.Data.PlayerBadge.Builder {
      return classBuilder() as! Pogoprotos.Data.PlayerBadge.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Data.PlayerBadge.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Data.PlayerBadge.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Data.PlayerBadge.Builder {
      return try Pogoprotos.Data.PlayerBadge.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Data.PlayerBadge) throws -> Pogoprotos.Data.PlayerBadge.Builder {
      return try Pogoprotos.Data.PlayerBadge.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasBadgeType {
        jsonMap["badgeType"] = badgeType.toString()
      }
      if hasRank {
        jsonMap["rank"] = NSNumber(int:rank)
      }
      if hasStartValue {
        jsonMap["startValue"] = NSNumber(int:startValue)
      }
      if hasEndValue {
        jsonMap["endValue"] = NSNumber(int:endValue)
      }
      if hasCurrentValue {
        jsonMap["currentValue"] = NSNumber(double:currentValue)
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Data.PlayerBadge {
      return try Pogoprotos.Data.PlayerBadge.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Data.PlayerBadge {
      return try Pogoprotos.Data.PlayerBadge.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if (hasBadgeType) {
        output += "\(indent) badgeType: \(badgeType.description)\n"
      }
      if hasRank {
        output += "\(indent) rank: \(rank) \n"
      }
      if hasStartValue {
        output += "\(indent) startValue: \(startValue) \n"
      }
      if hasEndValue {
        output += "\(indent) endValue: \(endValue) \n"
      }
      if hasCurrentValue {
        output += "\(indent) currentValue: \(currentValue) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasBadgeType {
               hashCode = (hashCode &* 31) &+ Int(badgeType.rawValue)
            }
            if hasRank {
               hashCode = (hashCode &* 31) &+ rank.hashValue
            }
            if hasStartValue {
               hashCode = (hashCode &* 31) &+ startValue.hashValue
            }
            if hasEndValue {
               hashCode = (hashCode &* 31) &+ endValue.hashValue
            }
            if hasCurrentValue {
               hashCode = (hashCode &* 31) &+ currentValue.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Data.PlayerBadge"
    }
    override public func className() -> String {
        return "Pogoprotos.Data.PlayerBadge"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Data.PlayerBadge.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Data.PlayerBadge = Pogoprotos.Data.PlayerBadge()
      public func getMessage() -> Pogoprotos.Data.PlayerBadge {
          return builderResult
      }

      required override public init () {
         super.init()
      }
        public var hasBadgeType:Bool{
            get {
                return builderResult.hasBadgeType
            }
        }
        public var badgeType:Pogoprotos.Enums.BadgeType {
            get {
                return builderResult.badgeType
            }
            set (value) {
                builderResult.hasBadgeType = true
                builderResult.badgeType = value
            }
        }
        public func setBadgeType(value:Pogoprotos.Enums.BadgeType) -> Pogoprotos.Data.PlayerBadge.Builder {
          self.badgeType = value
          return self
        }
        public func clearBadgeType() -> Pogoprotos.Data.PlayerBadge.Builder {
           builderResult.hasBadgeType = false
           builderResult.badgeType = .BadgeUnset
           return self
        }
      public var hasRank:Bool {
           get {
                return builderResult.hasRank
           }
      }
      public var rank:Int32 {
           get {
                return builderResult.rank
           }
           set (value) {
               builderResult.hasRank = true
               builderResult.rank = value
           }
      }
      public func setRank(value:Int32) -> Pogoprotos.Data.PlayerBadge.Builder {
        self.rank = value
        return self
      }
      public func clearRank() -> Pogoprotos.Data.PlayerBadge.Builder{
           builderResult.hasRank = false
           builderResult.rank = Int32(0)
           return self
      }
      public var hasStartValue:Bool {
           get {
                return builderResult.hasStartValue
           }
      }
      public var startValue:Int32 {
           get {
                return builderResult.startValue
           }
           set (value) {
               builderResult.hasStartValue = true
               builderResult.startValue = value
           }
      }
      public func setStartValue(value:Int32) -> Pogoprotos.Data.PlayerBadge.Builder {
        self.startValue = value
        return self
      }
      public func clearStartValue() -> Pogoprotos.Data.PlayerBadge.Builder{
           builderResult.hasStartValue = false
           builderResult.startValue = Int32(0)
           return self
      }
      public var hasEndValue:Bool {
           get {
                return builderResult.hasEndValue
           }
      }
      public var endValue:Int32 {
           get {
                return builderResult.endValue
           }
           set (value) {
               builderResult.hasEndValue = true
               builderResult.endValue = value
           }
      }
      public func setEndValue(value:Int32) -> Pogoprotos.Data.PlayerBadge.Builder {
        self.endValue = value
        return self
      }
      public func clearEndValue() -> Pogoprotos.Data.PlayerBadge.Builder{
           builderResult.hasEndValue = false
           builderResult.endValue = Int32(0)
           return self
      }
      public var hasCurrentValue:Bool {
           get {
                return builderResult.hasCurrentValue
           }
      }
      public var currentValue:Double {
           get {
                return builderResult.currentValue
           }
           set (value) {
               builderResult.hasCurrentValue = true
               builderResult.currentValue = value
           }
      }
      public func setCurrentValue(value:Double) -> Pogoprotos.Data.PlayerBadge.Builder {
        self.currentValue = value
        return self
      }
      public func clearCurrentValue() -> Pogoprotos.Data.PlayerBadge.Builder{
           builderResult.hasCurrentValue = false
           builderResult.currentValue = Double(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Data.PlayerBadge.Builder {
        builderResult = Pogoprotos.Data.PlayerBadge()
        return self
      }
      override public func clone() throws -> Pogoprotos.Data.PlayerBadge.Builder {
        return try Pogoprotos.Data.PlayerBadge.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Data.PlayerBadge {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Data.PlayerBadge {
        let returnMe:Pogoprotos.Data.PlayerBadge = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Data.PlayerBadge) throws -> Pogoprotos.Data.PlayerBadge.Builder {
        if other == Pogoprotos.Data.PlayerBadge() {
         return self
        }
        if other.hasBadgeType {
             badgeType = other.badgeType
        }
        if other.hasRank {
             rank = other.rank
        }
        if other.hasStartValue {
             startValue = other.startValue
        }
        if other.hasEndValue {
             endValue = other.endValue
        }
        if other.hasCurrentValue {
             currentValue = other.currentValue
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Data.PlayerBadge.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.PlayerBadge.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            let valueIntbadgeType = try input.readEnum()
            if let enumsbadgeType = Pogoprotos.Enums.BadgeType(rawValue:valueIntbadgeType){
                 badgeType = enumsbadgeType
            } else {
                 try unknownFieldsBuilder.mergeVarintField(1, value:Int64(valueIntbadgeType))
            }

          case 16:
            rank = try input.readInt32()

          case 24:
            startValue = try input.readInt32()

          case 32:
            endValue = try input.readInt32()

          case 41:
            currentValue = try input.readDouble()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Data.PlayerBadge.Builder {
        let resultDecodedBuilder = Pogoprotos.Data.PlayerBadge.Builder()
        if let jsonValueBadgeType = jsonMap["badgeType"] as? String {
          resultDecodedBuilder.badgeType = try Pogoprotos.Enums.BadgeType.fromString(jsonValueBadgeType)
        }
        if let jsonValueRank = jsonMap["rank"] as? NSNumber {
          resultDecodedBuilder.rank = jsonValueRank.intValue
        }
        if let jsonValueStartValue = jsonMap["startValue"] as? NSNumber {
          resultDecodedBuilder.startValue = jsonValueStartValue.intValue
        }
        if let jsonValueEndValue = jsonMap["endValue"] as? NSNumber {
          resultDecodedBuilder.endValue = jsonValueEndValue.intValue
        }
        if let jsonValueCurrentValue = jsonMap["currentValue"] as? NSNumber {
          resultDecodedBuilder.currentValue = jsonValueCurrentValue.doubleValue
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Data.PlayerBadge.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Data.PlayerBadge.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
