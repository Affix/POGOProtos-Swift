// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "FortData.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Pogoprotos { public struct Map { public struct Fort { }}}

public func == (lhs: Pogoprotos.Map.Fort.FortData, rhs: Pogoprotos.Map.Fort.FortData) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasLastModifiedTimestampMs == rhs.hasLastModifiedTimestampMs) && (!lhs.hasLastModifiedTimestampMs || lhs.lastModifiedTimestampMs == rhs.lastModifiedTimestampMs)
  fieldCheck = fieldCheck && (lhs.hasLatitude == rhs.hasLatitude) && (!lhs.hasLatitude || lhs.latitude == rhs.latitude)
  fieldCheck = fieldCheck && (lhs.hasLongitude == rhs.hasLongitude) && (!lhs.hasLongitude || lhs.longitude == rhs.longitude)
  fieldCheck = fieldCheck && (lhs.hasOwnedByTeam == rhs.hasOwnedByTeam) && (!lhs.hasOwnedByTeam || lhs.ownedByTeam == rhs.ownedByTeam)
  fieldCheck = fieldCheck && (lhs.hasGuardPokemonId == rhs.hasGuardPokemonId) && (!lhs.hasGuardPokemonId || lhs.guardPokemonId == rhs.guardPokemonId)
  fieldCheck = fieldCheck && (lhs.hasGuardPokemonCp == rhs.hasGuardPokemonCp) && (!lhs.hasGuardPokemonCp || lhs.guardPokemonCp == rhs.guardPokemonCp)
  fieldCheck = fieldCheck && (lhs.hasEnabled == rhs.hasEnabled) && (!lhs.hasEnabled || lhs.enabled == rhs.enabled)
  fieldCheck = fieldCheck && (lhs.hasTypes == rhs.hasTypes) && (!lhs.hasTypes || lhs.types == rhs.types)
  fieldCheck = fieldCheck && (lhs.hasGymPoints == rhs.hasGymPoints) && (!lhs.hasGymPoints || lhs.gymPoints == rhs.gymPoints)
  fieldCheck = fieldCheck && (lhs.hasIsInBattle == rhs.hasIsInBattle) && (!lhs.hasIsInBattle || lhs.isInBattle == rhs.isInBattle)
  fieldCheck = fieldCheck && (lhs.hasActiveFortModifier == rhs.hasActiveFortModifier) && (!lhs.hasActiveFortModifier || lhs.activeFortModifier == rhs.activeFortModifier)
  fieldCheck = fieldCheck && (lhs.hasLureInfo == rhs.hasLureInfo) && (!lhs.hasLureInfo || lhs.lureInfo == rhs.lureInfo)
  fieldCheck = fieldCheck && (lhs.hasCooldownCompleteTimestampMs == rhs.hasCooldownCompleteTimestampMs) && (!lhs.hasCooldownCompleteTimestampMs || lhs.cooldownCompleteTimestampMs == rhs.cooldownCompleteTimestampMs)
  fieldCheck = fieldCheck && (lhs.hasSponsor == rhs.hasSponsor) && (!lhs.hasSponsor || lhs.sponsor == rhs.sponsor)
  fieldCheck = fieldCheck && (lhs.hasRenderingType == rhs.hasRenderingType) && (!lhs.hasRenderingType || lhs.renderingType == rhs.renderingType)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Pogoprotos.Map.Fort {
  public struct FortDataRoot {
    public static var sharedInstance : FortDataRoot {
     struct Static {
         static let instance : FortDataRoot = FortDataRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Pogoprotos.Enums.PokemonIdRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Enums.TeamColorRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Map.Fort.FortTypeRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Map.Fort.FortSponsorRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Map.Fort.FortRenderingTypeRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Map.Fort.FortLureInfoRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class FortData : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasId:Bool = false
    public private(set) var id:String = ""

    public private(set) var hasLastModifiedTimestampMs:Bool = false
    public private(set) var lastModifiedTimestampMs:Int64 = Int64(0)

    public private(set) var hasLatitude:Bool = false
    public private(set) var latitude:Double = Double(0)

    public private(set) var hasLongitude:Bool = false
    public private(set) var longitude:Double = Double(0)

    public private(set) var hasEnabled:Bool = false
    public private(set) var enabled:Bool = false

    public private(set) var types:Pogoprotos.Map.Fort.FortType = Pogoprotos.Map.Fort.FortType.Gym
    public private(set) var hasTypes:Bool = false
    public private(set) var ownedByTeam:Pogoprotos.Enums.TeamColor = Pogoprotos.Enums.TeamColor.Neutral
    public private(set) var hasOwnedByTeam:Bool = false
    public private(set) var guardPokemonId:Pogoprotos.Enums.PokemonId = Pogoprotos.Enums.PokemonId.Missingno
    public private(set) var hasGuardPokemonId:Bool = false
    public private(set) var hasGuardPokemonCp:Bool = false
    public private(set) var guardPokemonCp:Int32 = Int32(0)

    // Prestigate / experience of the gym
    public private(set) var hasGymPoints:Bool = false
    public private(set) var gymPoints:Int64 = Int64(0)

    // Whether someone is battling at the gym currently
    public private(set) var hasIsInBattle:Bool = false
    public private(set) var isInBattle:Bool = false

    // Timestamp when the pokestop can be activated again to get items / xp
    public private(set) var hasCooldownCompleteTimestampMs:Bool = false
    public private(set) var cooldownCompleteTimestampMs:Int64 = Int64(0)

    public private(set) var sponsor:Pogoprotos.Map.Fort.FortSponsor = Pogoprotos.Map.Fort.FortSponsor.UnsetSponsor
    public private(set) var hasSponsor:Bool = false
    public private(set) var renderingType:Pogoprotos.Map.Fort.FortRenderingType = Pogoprotos.Map.Fort.FortRenderingType.Default
    public private(set) var hasRenderingType:Bool = false
    // Might represent the type of item applied to the pokestop, right now only lures can be applied
    public private(set) var hasActiveFortModifier:Bool = false
    public private(set) var activeFortModifier:NSData = NSData()

    public private(set) var hasLureInfo:Bool = false
    public private(set) var lureInfo:Pogoprotos.Map.Fort.FortLureInfo!
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasId {
        try output.writeString(1, value:id)
      }
      if hasLastModifiedTimestampMs {
        try output.writeInt64(2, value:lastModifiedTimestampMs)
      }
      if hasLatitude {
        try output.writeDouble(3, value:latitude)
      }
      if hasLongitude {
        try output.writeDouble(4, value:longitude)
      }
      if hasOwnedByTeam {
        try output.writeEnum(5, value:ownedByTeam.rawValue)
      }
      if hasGuardPokemonId {
        try output.writeEnum(6, value:guardPokemonId.rawValue)
      }
      if hasGuardPokemonCp {
        try output.writeInt32(7, value:guardPokemonCp)
      }
      if hasEnabled {
        try output.writeBool(8, value:enabled)
      }
      if hasTypes {
        try output.writeEnum(9, value:types.rawValue)
      }
      if hasGymPoints {
        try output.writeInt64(10, value:gymPoints)
      }
      if hasIsInBattle {
        try output.writeBool(11, value:isInBattle)
      }
      if hasActiveFortModifier {
        try output.writeData(12, value:activeFortModifier)
      }
      if hasLureInfo {
        try output.writeMessage(13, value:lureInfo)
      }
      if hasCooldownCompleteTimestampMs {
        try output.writeInt64(14, value:cooldownCompleteTimestampMs)
      }
      if hasSponsor {
        try output.writeEnum(15, value:sponsor.rawValue)
      }
      if hasRenderingType {
        try output.writeEnum(16, value:renderingType.rawValue)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasId {
        serialize_size += id.computeStringSize(1)
      }
      if hasLastModifiedTimestampMs {
        serialize_size += lastModifiedTimestampMs.computeInt64Size(2)
      }
      if hasLatitude {
        serialize_size += latitude.computeDoubleSize(3)
      }
      if hasLongitude {
        serialize_size += longitude.computeDoubleSize(4)
      }
      if (hasOwnedByTeam) {
        serialize_size += ownedByTeam.rawValue.computeEnumSize(5)
      }
      if (hasGuardPokemonId) {
        serialize_size += guardPokemonId.rawValue.computeEnumSize(6)
      }
      if hasGuardPokemonCp {
        serialize_size += guardPokemonCp.computeInt32Size(7)
      }
      if hasEnabled {
        serialize_size += enabled.computeBoolSize(8)
      }
      if (hasTypes) {
        serialize_size += types.rawValue.computeEnumSize(9)
      }
      if hasGymPoints {
        serialize_size += gymPoints.computeInt64Size(10)
      }
      if hasIsInBattle {
        serialize_size += isInBattle.computeBoolSize(11)
      }
      if hasActiveFortModifier {
        serialize_size += activeFortModifier.computeDataSize(12)
      }
      if hasLureInfo {
          if let varSizelureInfo = lureInfo?.computeMessageSize(13) {
              serialize_size += varSizelureInfo
          }
      }
      if hasCooldownCompleteTimestampMs {
        serialize_size += cooldownCompleteTimestampMs.computeInt64Size(14)
      }
      if (hasSponsor) {
        serialize_size += sponsor.rawValue.computeEnumSize(15)
      }
      if (hasRenderingType) {
        serialize_size += renderingType.rawValue.computeEnumSize(16)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Map.Fort.FortData> {
      var mergedArray = Array<Pogoprotos.Map.Fort.FortData>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Map.Fort.FortData? {
      return try Pogoprotos.Map.Fort.FortData.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Map.Fort.FortData {
      return try Pogoprotos.Map.Fort.FortData.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Map.Fort.FortDataRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Map.Fort.FortData {
      return try Pogoprotos.Map.Fort.FortData.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Map.Fort.FortData {
      return try Pogoprotos.Map.Fort.FortData.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Map.Fort.FortData {
      return try Pogoprotos.Map.Fort.FortData.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Map.Fort.FortData {
      return try Pogoprotos.Map.Fort.FortData.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Map.Fort.FortData {
      return try Pogoprotos.Map.Fort.FortData.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Map.Fort.FortData.Builder {
      return Pogoprotos.Map.Fort.FortData.classBuilder() as! Pogoprotos.Map.Fort.FortData.Builder
    }
    public func getBuilder() -> Pogoprotos.Map.Fort.FortData.Builder {
      return classBuilder() as! Pogoprotos.Map.Fort.FortData.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Map.Fort.FortData.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Map.Fort.FortData.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Map.Fort.FortData.Builder {
      return try Pogoprotos.Map.Fort.FortData.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Map.Fort.FortData) throws -> Pogoprotos.Map.Fort.FortData.Builder {
      return try Pogoprotos.Map.Fort.FortData.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasId {
        jsonMap["id"] = id
      }
      if hasLastModifiedTimestampMs {
        jsonMap["lastModifiedTimestampMs"] = "\(lastModifiedTimestampMs)"
      }
      if hasLatitude {
        jsonMap["latitude"] = NSNumber(double:latitude)
      }
      if hasLongitude {
        jsonMap["longitude"] = NSNumber(double:longitude)
      }
      if hasEnabled {
        jsonMap["enabled"] = enabled
      }
      if hasTypes {
        jsonMap["type"] = types.toString()
      }
      if hasOwnedByTeam {
        jsonMap["ownedByTeam"] = ownedByTeam.toString()
      }
      if hasGuardPokemonId {
        jsonMap["guardPokemonId"] = guardPokemonId.toString()
      }
      if hasGuardPokemonCp {
        jsonMap["guardPokemonCp"] = NSNumber(int:guardPokemonCp)
      }
      if hasGymPoints {
        jsonMap["gymPoints"] = "\(gymPoints)"
      }
      if hasIsInBattle {
        jsonMap["isInBattle"] = isInBattle
      }
      if hasCooldownCompleteTimestampMs {
        jsonMap["cooldownCompleteTimestampMs"] = "\(cooldownCompleteTimestampMs)"
      }
      if hasSponsor {
        jsonMap["sponsor"] = sponsor.toString()
      }
      if hasRenderingType {
        jsonMap["renderingType"] = renderingType.toString()
      }
      if hasActiveFortModifier {
        jsonMap["activeFortModifier"] = activeFortModifier.base64EncodedStringWithOptions(NSDataBase64EncodingOptions(rawValue: 0))
      }
      if hasLureInfo {
        jsonMap["lureInfo"] = try lureInfo.encode()
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Map.Fort.FortData {
      return try Pogoprotos.Map.Fort.FortData.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Map.Fort.FortData {
      return try Pogoprotos.Map.Fort.FortData.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasId {
        output += "\(indent) id: \(id) \n"
      }
      if hasLastModifiedTimestampMs {
        output += "\(indent) lastModifiedTimestampMs: \(lastModifiedTimestampMs) \n"
      }
      if hasLatitude {
        output += "\(indent) latitude: \(latitude) \n"
      }
      if hasLongitude {
        output += "\(indent) longitude: \(longitude) \n"
      }
      if (hasOwnedByTeam) {
        output += "\(indent) ownedByTeam: \(ownedByTeam.description)\n"
      }
      if (hasGuardPokemonId) {
        output += "\(indent) guardPokemonId: \(guardPokemonId.description)\n"
      }
      if hasGuardPokemonCp {
        output += "\(indent) guardPokemonCp: \(guardPokemonCp) \n"
      }
      if hasEnabled {
        output += "\(indent) enabled: \(enabled) \n"
      }
      if (hasTypes) {
        output += "\(indent) types: \(types.description)\n"
      }
      if hasGymPoints {
        output += "\(indent) gymPoints: \(gymPoints) \n"
      }
      if hasIsInBattle {
        output += "\(indent) isInBattle: \(isInBattle) \n"
      }
      if hasActiveFortModifier {
        output += "\(indent) activeFortModifier: \(activeFortModifier) \n"
      }
      if hasLureInfo {
        output += "\(indent) lureInfo {\n"
        if let outDescLureInfo = lureInfo {
          output += try outDescLureInfo.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasCooldownCompleteTimestampMs {
        output += "\(indent) cooldownCompleteTimestampMs: \(cooldownCompleteTimestampMs) \n"
      }
      if (hasSponsor) {
        output += "\(indent) sponsor: \(sponsor.description)\n"
      }
      if (hasRenderingType) {
        output += "\(indent) renderingType: \(renderingType.description)\n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasId {
               hashCode = (hashCode &* 31) &+ id.hashValue
            }
            if hasLastModifiedTimestampMs {
               hashCode = (hashCode &* 31) &+ lastModifiedTimestampMs.hashValue
            }
            if hasLatitude {
               hashCode = (hashCode &* 31) &+ latitude.hashValue
            }
            if hasLongitude {
               hashCode = (hashCode &* 31) &+ longitude.hashValue
            }
            if hasOwnedByTeam {
               hashCode = (hashCode &* 31) &+ Int(ownedByTeam.rawValue)
            }
            if hasGuardPokemonId {
               hashCode = (hashCode &* 31) &+ Int(guardPokemonId.rawValue)
            }
            if hasGuardPokemonCp {
               hashCode = (hashCode &* 31) &+ guardPokemonCp.hashValue
            }
            if hasEnabled {
               hashCode = (hashCode &* 31) &+ enabled.hashValue
            }
            if hasTypes {
               hashCode = (hashCode &* 31) &+ Int(types.rawValue)
            }
            if hasGymPoints {
               hashCode = (hashCode &* 31) &+ gymPoints.hashValue
            }
            if hasIsInBattle {
               hashCode = (hashCode &* 31) &+ isInBattle.hashValue
            }
            if hasActiveFortModifier {
               hashCode = (hashCode &* 31) &+ activeFortModifier.hashValue
            }
            if hasLureInfo {
                if let hashValuelureInfo = lureInfo?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuelureInfo
                }
            }
            if hasCooldownCompleteTimestampMs {
               hashCode = (hashCode &* 31) &+ cooldownCompleteTimestampMs.hashValue
            }
            if hasSponsor {
               hashCode = (hashCode &* 31) &+ Int(sponsor.rawValue)
            }
            if hasRenderingType {
               hashCode = (hashCode &* 31) &+ Int(renderingType.rawValue)
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Map.Fort.FortData"
    }
    override public func className() -> String {
        return "Pogoprotos.Map.Fort.FortData"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Map.Fort.FortData.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Map.Fort.FortData = Pogoprotos.Map.Fort.FortData()
      public func getMessage() -> Pogoprotos.Map.Fort.FortData {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasId:Bool {
           get {
                return builderResult.hasId
           }
      }
      public var id:String {
           get {
                return builderResult.id
           }
           set (value) {
               builderResult.hasId = true
               builderResult.id = value
           }
      }
      public func setId(value:String) -> Pogoprotos.Map.Fort.FortData.Builder {
        self.id = value
        return self
      }
      public func clearId() -> Pogoprotos.Map.Fort.FortData.Builder{
           builderResult.hasId = false
           builderResult.id = ""
           return self
      }
      public var hasLastModifiedTimestampMs:Bool {
           get {
                return builderResult.hasLastModifiedTimestampMs
           }
      }
      public var lastModifiedTimestampMs:Int64 {
           get {
                return builderResult.lastModifiedTimestampMs
           }
           set (value) {
               builderResult.hasLastModifiedTimestampMs = true
               builderResult.lastModifiedTimestampMs = value
           }
      }
      public func setLastModifiedTimestampMs(value:Int64) -> Pogoprotos.Map.Fort.FortData.Builder {
        self.lastModifiedTimestampMs = value
        return self
      }
      public func clearLastModifiedTimestampMs() -> Pogoprotos.Map.Fort.FortData.Builder{
           builderResult.hasLastModifiedTimestampMs = false
           builderResult.lastModifiedTimestampMs = Int64(0)
           return self
      }
      public var hasLatitude:Bool {
           get {
                return builderResult.hasLatitude
           }
      }
      public var latitude:Double {
           get {
                return builderResult.latitude
           }
           set (value) {
               builderResult.hasLatitude = true
               builderResult.latitude = value
           }
      }
      public func setLatitude(value:Double) -> Pogoprotos.Map.Fort.FortData.Builder {
        self.latitude = value
        return self
      }
      public func clearLatitude() -> Pogoprotos.Map.Fort.FortData.Builder{
           builderResult.hasLatitude = false
           builderResult.latitude = Double(0)
           return self
      }
      public var hasLongitude:Bool {
           get {
                return builderResult.hasLongitude
           }
      }
      public var longitude:Double {
           get {
                return builderResult.longitude
           }
           set (value) {
               builderResult.hasLongitude = true
               builderResult.longitude = value
           }
      }
      public func setLongitude(value:Double) -> Pogoprotos.Map.Fort.FortData.Builder {
        self.longitude = value
        return self
      }
      public func clearLongitude() -> Pogoprotos.Map.Fort.FortData.Builder{
           builderResult.hasLongitude = false
           builderResult.longitude = Double(0)
           return self
      }
      public var hasEnabled:Bool {
           get {
                return builderResult.hasEnabled
           }
      }
      public var enabled:Bool {
           get {
                return builderResult.enabled
           }
           set (value) {
               builderResult.hasEnabled = true
               builderResult.enabled = value
           }
      }
      public func setEnabled(value:Bool) -> Pogoprotos.Map.Fort.FortData.Builder {
        self.enabled = value
        return self
      }
      public func clearEnabled() -> Pogoprotos.Map.Fort.FortData.Builder{
           builderResult.hasEnabled = false
           builderResult.enabled = false
           return self
      }
        public var hasTypes:Bool{
            get {
                return builderResult.hasTypes
            }
        }
        public var types:Pogoprotos.Map.Fort.FortType {
            get {
                return builderResult.types
            }
            set (value) {
                builderResult.hasTypes = true
                builderResult.types = value
            }
        }
        public func setTypes(value:Pogoprotos.Map.Fort.FortType) -> Pogoprotos.Map.Fort.FortData.Builder {
          self.types = value
          return self
        }
        public func clearTypes() -> Pogoprotos.Map.Fort.FortData.Builder {
           builderResult.hasTypes = false
           builderResult.types = .Gym
           return self
        }
        public var hasOwnedByTeam:Bool{
            get {
                return builderResult.hasOwnedByTeam
            }
        }
        public var ownedByTeam:Pogoprotos.Enums.TeamColor {
            get {
                return builderResult.ownedByTeam
            }
            set (value) {
                builderResult.hasOwnedByTeam = true
                builderResult.ownedByTeam = value
            }
        }
        public func setOwnedByTeam(value:Pogoprotos.Enums.TeamColor) -> Pogoprotos.Map.Fort.FortData.Builder {
          self.ownedByTeam = value
          return self
        }
        public func clearOwnedByTeam() -> Pogoprotos.Map.Fort.FortData.Builder {
           builderResult.hasOwnedByTeam = false
           builderResult.ownedByTeam = .Neutral
           return self
        }
        public var hasGuardPokemonId:Bool{
            get {
                return builderResult.hasGuardPokemonId
            }
        }
        public var guardPokemonId:Pogoprotos.Enums.PokemonId {
            get {
                return builderResult.guardPokemonId
            }
            set (value) {
                builderResult.hasGuardPokemonId = true
                builderResult.guardPokemonId = value
            }
        }
        public func setGuardPokemonId(value:Pogoprotos.Enums.PokemonId) -> Pogoprotos.Map.Fort.FortData.Builder {
          self.guardPokemonId = value
          return self
        }
        public func clearGuardPokemonId() -> Pogoprotos.Map.Fort.FortData.Builder {
           builderResult.hasGuardPokemonId = false
           builderResult.guardPokemonId = .Missingno
           return self
        }
      public var hasGuardPokemonCp:Bool {
           get {
                return builderResult.hasGuardPokemonCp
           }
      }
      public var guardPokemonCp:Int32 {
           get {
                return builderResult.guardPokemonCp
           }
           set (value) {
               builderResult.hasGuardPokemonCp = true
               builderResult.guardPokemonCp = value
           }
      }
      public func setGuardPokemonCp(value:Int32) -> Pogoprotos.Map.Fort.FortData.Builder {
        self.guardPokemonCp = value
        return self
      }
      public func clearGuardPokemonCp() -> Pogoprotos.Map.Fort.FortData.Builder{
           builderResult.hasGuardPokemonCp = false
           builderResult.guardPokemonCp = Int32(0)
           return self
      }
      public var hasGymPoints:Bool {
           get {
                return builderResult.hasGymPoints
           }
      }
      public var gymPoints:Int64 {
           get {
                return builderResult.gymPoints
           }
           set (value) {
               builderResult.hasGymPoints = true
               builderResult.gymPoints = value
           }
      }
      public func setGymPoints(value:Int64) -> Pogoprotos.Map.Fort.FortData.Builder {
        self.gymPoints = value
        return self
      }
      public func clearGymPoints() -> Pogoprotos.Map.Fort.FortData.Builder{
           builderResult.hasGymPoints = false
           builderResult.gymPoints = Int64(0)
           return self
      }
      public var hasIsInBattle:Bool {
           get {
                return builderResult.hasIsInBattle
           }
      }
      public var isInBattle:Bool {
           get {
                return builderResult.isInBattle
           }
           set (value) {
               builderResult.hasIsInBattle = true
               builderResult.isInBattle = value
           }
      }
      public func setIsInBattle(value:Bool) -> Pogoprotos.Map.Fort.FortData.Builder {
        self.isInBattle = value
        return self
      }
      public func clearIsInBattle() -> Pogoprotos.Map.Fort.FortData.Builder{
           builderResult.hasIsInBattle = false
           builderResult.isInBattle = false
           return self
      }
      public var hasCooldownCompleteTimestampMs:Bool {
           get {
                return builderResult.hasCooldownCompleteTimestampMs
           }
      }
      public var cooldownCompleteTimestampMs:Int64 {
           get {
                return builderResult.cooldownCompleteTimestampMs
           }
           set (value) {
               builderResult.hasCooldownCompleteTimestampMs = true
               builderResult.cooldownCompleteTimestampMs = value
           }
      }
      public func setCooldownCompleteTimestampMs(value:Int64) -> Pogoprotos.Map.Fort.FortData.Builder {
        self.cooldownCompleteTimestampMs = value
        return self
      }
      public func clearCooldownCompleteTimestampMs() -> Pogoprotos.Map.Fort.FortData.Builder{
           builderResult.hasCooldownCompleteTimestampMs = false
           builderResult.cooldownCompleteTimestampMs = Int64(0)
           return self
      }
        public var hasSponsor:Bool{
            get {
                return builderResult.hasSponsor
            }
        }
        public var sponsor:Pogoprotos.Map.Fort.FortSponsor {
            get {
                return builderResult.sponsor
            }
            set (value) {
                builderResult.hasSponsor = true
                builderResult.sponsor = value
            }
        }
        public func setSponsor(value:Pogoprotos.Map.Fort.FortSponsor) -> Pogoprotos.Map.Fort.FortData.Builder {
          self.sponsor = value
          return self
        }
        public func clearSponsor() -> Pogoprotos.Map.Fort.FortData.Builder {
           builderResult.hasSponsor = false
           builderResult.sponsor = .UnsetSponsor
           return self
        }
        public var hasRenderingType:Bool{
            get {
                return builderResult.hasRenderingType
            }
        }
        public var renderingType:Pogoprotos.Map.Fort.FortRenderingType {
            get {
                return builderResult.renderingType
            }
            set (value) {
                builderResult.hasRenderingType = true
                builderResult.renderingType = value
            }
        }
        public func setRenderingType(value:Pogoprotos.Map.Fort.FortRenderingType) -> Pogoprotos.Map.Fort.FortData.Builder {
          self.renderingType = value
          return self
        }
        public func clearRenderingType() -> Pogoprotos.Map.Fort.FortData.Builder {
           builderResult.hasRenderingType = false
           builderResult.renderingType = .Default
           return self
        }
      public var hasActiveFortModifier:Bool {
           get {
                return builderResult.hasActiveFortModifier
           }
      }
      public var activeFortModifier:NSData {
           get {
                return builderResult.activeFortModifier
           }
           set (value) {
               builderResult.hasActiveFortModifier = true
               builderResult.activeFortModifier = value
           }
      }
      public func setActiveFortModifier(value:NSData) -> Pogoprotos.Map.Fort.FortData.Builder {
        self.activeFortModifier = value
        return self
      }
      public func clearActiveFortModifier() -> Pogoprotos.Map.Fort.FortData.Builder{
           builderResult.hasActiveFortModifier = false
           builderResult.activeFortModifier = NSData()
           return self
      }
      public var hasLureInfo:Bool {
           get {
               return builderResult.hasLureInfo
           }
      }
      public var lureInfo:Pogoprotos.Map.Fort.FortLureInfo! {
           get {
               if lureInfoBuilder_ != nil {
                  builderResult.lureInfo = lureInfoBuilder_.getMessage()
               }
               return builderResult.lureInfo
           }
           set (value) {
               builderResult.hasLureInfo = true
               builderResult.lureInfo = value
           }
      }
      private var lureInfoBuilder_:Pogoprotos.Map.Fort.FortLureInfo.Builder! {
           didSet {
              builderResult.hasLureInfo = true
           }
      }
      public func getLureInfoBuilder() -> Pogoprotos.Map.Fort.FortLureInfo.Builder {
        if lureInfoBuilder_ == nil {
           lureInfoBuilder_ = Pogoprotos.Map.Fort.FortLureInfo.Builder()
           builderResult.lureInfo = lureInfoBuilder_.getMessage()
           if lureInfo != nil {
              try! lureInfoBuilder_.mergeFrom(lureInfo)
           }
        }
        return lureInfoBuilder_
      }
      public func setLureInfo(value:Pogoprotos.Map.Fort.FortLureInfo!) -> Pogoprotos.Map.Fort.FortData.Builder {
        self.lureInfo = value
        return self
      }
      public func mergeLureInfo(value:Pogoprotos.Map.Fort.FortLureInfo) throws -> Pogoprotos.Map.Fort.FortData.Builder {
        if builderResult.hasLureInfo {
          builderResult.lureInfo = try Pogoprotos.Map.Fort.FortLureInfo.builderWithPrototype(builderResult.lureInfo).mergeFrom(value).buildPartial()
        } else {
          builderResult.lureInfo = value
        }
        builderResult.hasLureInfo = true
        return self
      }
      public func clearLureInfo() -> Pogoprotos.Map.Fort.FortData.Builder {
        lureInfoBuilder_ = nil
        builderResult.hasLureInfo = false
        builderResult.lureInfo = nil
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Map.Fort.FortData.Builder {
        builderResult = Pogoprotos.Map.Fort.FortData()
        return self
      }
      override public func clone() throws -> Pogoprotos.Map.Fort.FortData.Builder {
        return try Pogoprotos.Map.Fort.FortData.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Map.Fort.FortData {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Map.Fort.FortData {
        let returnMe:Pogoprotos.Map.Fort.FortData = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Map.Fort.FortData) throws -> Pogoprotos.Map.Fort.FortData.Builder {
        if other == Pogoprotos.Map.Fort.FortData() {
         return self
        }
        if other.hasId {
             id = other.id
        }
        if other.hasLastModifiedTimestampMs {
             lastModifiedTimestampMs = other.lastModifiedTimestampMs
        }
        if other.hasLatitude {
             latitude = other.latitude
        }
        if other.hasLongitude {
             longitude = other.longitude
        }
        if other.hasEnabled {
             enabled = other.enabled
        }
        if other.hasTypes {
             types = other.types
        }
        if other.hasOwnedByTeam {
             ownedByTeam = other.ownedByTeam
        }
        if other.hasGuardPokemonId {
             guardPokemonId = other.guardPokemonId
        }
        if other.hasGuardPokemonCp {
             guardPokemonCp = other.guardPokemonCp
        }
        if other.hasGymPoints {
             gymPoints = other.gymPoints
        }
        if other.hasIsInBattle {
             isInBattle = other.isInBattle
        }
        if other.hasCooldownCompleteTimestampMs {
             cooldownCompleteTimestampMs = other.cooldownCompleteTimestampMs
        }
        if other.hasSponsor {
             sponsor = other.sponsor
        }
        if other.hasRenderingType {
             renderingType = other.renderingType
        }
        if other.hasActiveFortModifier {
             activeFortModifier = other.activeFortModifier
        }
        if (other.hasLureInfo) {
            try mergeLureInfo(other.lureInfo)
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Map.Fort.FortData.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Map.Fort.FortData.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10:
            id = try input.readString()

          case 16:
            lastModifiedTimestampMs = try input.readInt64()

          case 25:
            latitude = try input.readDouble()

          case 33:
            longitude = try input.readDouble()

          case 40:
            let valueIntownedByTeam = try input.readEnum()
            if let enumsownedByTeam = Pogoprotos.Enums.TeamColor(rawValue:valueIntownedByTeam){
                 ownedByTeam = enumsownedByTeam
            } else {
                 try unknownFieldsBuilder.mergeVarintField(5, value:Int64(valueIntownedByTeam))
            }

          case 48:
            let valueIntguardPokemonId = try input.readEnum()
            if let enumsguardPokemonId = Pogoprotos.Enums.PokemonId(rawValue:valueIntguardPokemonId){
                 guardPokemonId = enumsguardPokemonId
            } else {
                 try unknownFieldsBuilder.mergeVarintField(6, value:Int64(valueIntguardPokemonId))
            }

          case 56:
            guardPokemonCp = try input.readInt32()

          case 64:
            enabled = try input.readBool()

          case 72:
            let valueInttypes = try input.readEnum()
            if let enumstypes = Pogoprotos.Map.Fort.FortType(rawValue:valueInttypes){
                 types = enumstypes
            } else {
                 try unknownFieldsBuilder.mergeVarintField(9, value:Int64(valueInttypes))
            }

          case 80:
            gymPoints = try input.readInt64()

          case 88:
            isInBattle = try input.readBool()

          case 98:
            activeFortModifier = try input.readData()

          case 106:
            let subBuilder:Pogoprotos.Map.Fort.FortLureInfo.Builder = Pogoprotos.Map.Fort.FortLureInfo.Builder()
            if hasLureInfo {
              try subBuilder.mergeFrom(lureInfo)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            lureInfo = subBuilder.buildPartial()

          case 112:
            cooldownCompleteTimestampMs = try input.readInt64()

          case 120:
            let valueIntsponsor = try input.readEnum()
            if let enumssponsor = Pogoprotos.Map.Fort.FortSponsor(rawValue:valueIntsponsor){
                 sponsor = enumssponsor
            } else {
                 try unknownFieldsBuilder.mergeVarintField(15, value:Int64(valueIntsponsor))
            }

          case 128:
            let valueIntrenderingType = try input.readEnum()
            if let enumsrenderingType = Pogoprotos.Map.Fort.FortRenderingType(rawValue:valueIntrenderingType){
                 renderingType = enumsrenderingType
            } else {
                 try unknownFieldsBuilder.mergeVarintField(16, value:Int64(valueIntrenderingType))
            }

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Map.Fort.FortData.Builder {
        let resultDecodedBuilder = Pogoprotos.Map.Fort.FortData.Builder()
        if let jsonValueId = jsonMap["id"] as? String {
          resultDecodedBuilder.id = jsonValueId
        }
        if let jsonValueLastModifiedTimestampMs = jsonMap["lastModifiedTimestampMs"] as? String {
          resultDecodedBuilder.lastModifiedTimestampMs = Int64(jsonValueLastModifiedTimestampMs)!
        }
        if let jsonValueLatitude = jsonMap["latitude"] as? NSNumber {
          resultDecodedBuilder.latitude = jsonValueLatitude.doubleValue
        }
        if let jsonValueLongitude = jsonMap["longitude"] as? NSNumber {
          resultDecodedBuilder.longitude = jsonValueLongitude.doubleValue
        }
        if let jsonValueEnabled = jsonMap["enabled"] as? Bool {
          resultDecodedBuilder.enabled = jsonValueEnabled
        }
        if let jsonValueTypes = jsonMap["type"] as? String {
          resultDecodedBuilder.types = try Pogoprotos.Map.Fort.FortType.fromString(jsonValueTypes)
        }
        if let jsonValueOwnedByTeam = jsonMap["ownedByTeam"] as? String {
          resultDecodedBuilder.ownedByTeam = try Pogoprotos.Enums.TeamColor.fromString(jsonValueOwnedByTeam)
        }
        if let jsonValueGuardPokemonId = jsonMap["guardPokemonId"] as? String {
          resultDecodedBuilder.guardPokemonId = try Pogoprotos.Enums.PokemonId.fromString(jsonValueGuardPokemonId)
        }
        if let jsonValueGuardPokemonCp = jsonMap["guardPokemonCp"] as? NSNumber {
          resultDecodedBuilder.guardPokemonCp = jsonValueGuardPokemonCp.intValue
        }
        if let jsonValueGymPoints = jsonMap["gymPoints"] as? String {
          resultDecodedBuilder.gymPoints = Int64(jsonValueGymPoints)!
        }
        if let jsonValueIsInBattle = jsonMap["isInBattle"] as? Bool {
          resultDecodedBuilder.isInBattle = jsonValueIsInBattle
        }
        if let jsonValueCooldownCompleteTimestampMs = jsonMap["cooldownCompleteTimestampMs"] as? String {
          resultDecodedBuilder.cooldownCompleteTimestampMs = Int64(jsonValueCooldownCompleteTimestampMs)!
        }
        if let jsonValueSponsor = jsonMap["sponsor"] as? String {
          resultDecodedBuilder.sponsor = try Pogoprotos.Map.Fort.FortSponsor.fromString(jsonValueSponsor)
        }
        if let jsonValueRenderingType = jsonMap["renderingType"] as? String {
          resultDecodedBuilder.renderingType = try Pogoprotos.Map.Fort.FortRenderingType.fromString(jsonValueRenderingType)
        }
        if let jsonValueActiveFortModifier = jsonMap["activeFortModifier"] as? String {
          resultDecodedBuilder.activeFortModifier = NSData(base64EncodedString:jsonValueActiveFortModifier, options: NSDataBase64DecodingOptions(rawValue:0))!
        }
        if let jsonValueLureInfo = jsonMap["lureInfo"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.lureInfo = try Pogoprotos.Map.Fort.FortLureInfo.Builder.decodeToBuilder(jsonValueLureInfo).build()

        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Map.Fort.FortData.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Map.Fort.FortData.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
