// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "CameraAttributes.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Pogoprotos { public struct Settings { public struct Master { public struct Pokemon { }}}}

public func == (lhs: Pogoprotos.Settings.Master.Pokemon.CameraAttributes, rhs: Pogoprotos.Settings.Master.Pokemon.CameraAttributes) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasDiskRadiusM == rhs.hasDiskRadiusM) && (!lhs.hasDiskRadiusM || lhs.diskRadiusM == rhs.diskRadiusM)
  fieldCheck = fieldCheck && (lhs.hasCylinderRadiusM == rhs.hasCylinderRadiusM) && (!lhs.hasCylinderRadiusM || lhs.cylinderRadiusM == rhs.cylinderRadiusM)
  fieldCheck = fieldCheck && (lhs.hasCylinderHeightM == rhs.hasCylinderHeightM) && (!lhs.hasCylinderHeightM || lhs.cylinderHeightM == rhs.cylinderHeightM)
  fieldCheck = fieldCheck && (lhs.hasCylinderGroundM == rhs.hasCylinderGroundM) && (!lhs.hasCylinderGroundM || lhs.cylinderGroundM == rhs.cylinderGroundM)
  fieldCheck = fieldCheck && (lhs.hasShoulderModeScale == rhs.hasShoulderModeScale) && (!lhs.hasShoulderModeScale || lhs.shoulderModeScale == rhs.shoulderModeScale)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Pogoprotos.Settings.Master.Pokemon {
  public struct CameraAttributesRoot {
    public static var sharedInstance : CameraAttributesRoot {
     struct Static {
         static let instance : CameraAttributesRoot = CameraAttributesRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class CameraAttributes : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasDiskRadiusM:Bool = false
    public private(set) var diskRadiusM:Float = Float(0)

    public private(set) var hasCylinderRadiusM:Bool = false
    public private(set) var cylinderRadiusM:Float = Float(0)

    public private(set) var hasCylinderHeightM:Bool = false
    public private(set) var cylinderHeightM:Float = Float(0)

    public private(set) var hasCylinderGroundM:Bool = false
    public private(set) var cylinderGroundM:Float = Float(0)

    public private(set) var hasShoulderModeScale:Bool = false
    public private(set) var shoulderModeScale:Float = Float(0)

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasDiskRadiusM {
        try output.writeFloat(1, value:diskRadiusM)
      }
      if hasCylinderRadiusM {
        try output.writeFloat(2, value:cylinderRadiusM)
      }
      if hasCylinderHeightM {
        try output.writeFloat(3, value:cylinderHeightM)
      }
      if hasCylinderGroundM {
        try output.writeFloat(4, value:cylinderGroundM)
      }
      if hasShoulderModeScale {
        try output.writeFloat(5, value:shoulderModeScale)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasDiskRadiusM {
        serialize_size += diskRadiusM.computeFloatSize(1)
      }
      if hasCylinderRadiusM {
        serialize_size += cylinderRadiusM.computeFloatSize(2)
      }
      if hasCylinderHeightM {
        serialize_size += cylinderHeightM.computeFloatSize(3)
      }
      if hasCylinderGroundM {
        serialize_size += cylinderGroundM.computeFloatSize(4)
      }
      if hasShoulderModeScale {
        serialize_size += shoulderModeScale.computeFloatSize(5)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Settings.Master.Pokemon.CameraAttributes> {
      var mergedArray = Array<Pogoprotos.Settings.Master.Pokemon.CameraAttributes>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.Master.Pokemon.CameraAttributes? {
      return try Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Settings.Master.Pokemon.CameraAttributes {
      return try Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Settings.Master.Pokemon.CameraAttributesRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Pokemon.CameraAttributes {
      return try Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.Master.Pokemon.CameraAttributes {
      return try Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Pokemon.CameraAttributes {
      return try Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.Master.Pokemon.CameraAttributes {
      return try Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Pokemon.CameraAttributes {
      return try Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder {
      return Pogoprotos.Settings.Master.Pokemon.CameraAttributes.classBuilder() as! Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder
    }
    public func getBuilder() -> Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder {
      return classBuilder() as! Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder {
      return try Pogoprotos.Settings.Master.Pokemon.CameraAttributes.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Settings.Master.Pokemon.CameraAttributes) throws -> Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder {
      return try Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasDiskRadiusM {
        jsonMap["diskRadiusM"] = NSNumber(float:diskRadiusM)
      }
      if hasCylinderRadiusM {
        jsonMap["cylinderRadiusM"] = NSNumber(float:cylinderRadiusM)
      }
      if hasCylinderHeightM {
        jsonMap["cylinderHeightM"] = NSNumber(float:cylinderHeightM)
      }
      if hasCylinderGroundM {
        jsonMap["cylinderGroundM"] = NSNumber(float:cylinderGroundM)
      }
      if hasShoulderModeScale {
        jsonMap["shoulderModeScale"] = NSNumber(float:shoulderModeScale)
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.Master.Pokemon.CameraAttributes {
      return try Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Settings.Master.Pokemon.CameraAttributes {
      return try Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasDiskRadiusM {
        output += "\(indent) diskRadiusM: \(diskRadiusM) \n"
      }
      if hasCylinderRadiusM {
        output += "\(indent) cylinderRadiusM: \(cylinderRadiusM) \n"
      }
      if hasCylinderHeightM {
        output += "\(indent) cylinderHeightM: \(cylinderHeightM) \n"
      }
      if hasCylinderGroundM {
        output += "\(indent) cylinderGroundM: \(cylinderGroundM) \n"
      }
      if hasShoulderModeScale {
        output += "\(indent) shoulderModeScale: \(shoulderModeScale) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasDiskRadiusM {
               hashCode = (hashCode &* 31) &+ diskRadiusM.hashValue
            }
            if hasCylinderRadiusM {
               hashCode = (hashCode &* 31) &+ cylinderRadiusM.hashValue
            }
            if hasCylinderHeightM {
               hashCode = (hashCode &* 31) &+ cylinderHeightM.hashValue
            }
            if hasCylinderGroundM {
               hashCode = (hashCode &* 31) &+ cylinderGroundM.hashValue
            }
            if hasShoulderModeScale {
               hashCode = (hashCode &* 31) &+ shoulderModeScale.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Settings.Master.Pokemon.CameraAttributes"
    }
    override public func className() -> String {
        return "Pogoprotos.Settings.Master.Pokemon.CameraAttributes"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Settings.Master.Pokemon.CameraAttributes.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Settings.Master.Pokemon.CameraAttributes = Pogoprotos.Settings.Master.Pokemon.CameraAttributes()
      public func getMessage() -> Pogoprotos.Settings.Master.Pokemon.CameraAttributes {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasDiskRadiusM:Bool {
           get {
                return builderResult.hasDiskRadiusM
           }
      }
      public var diskRadiusM:Float {
           get {
                return builderResult.diskRadiusM
           }
           set (value) {
               builderResult.hasDiskRadiusM = true
               builderResult.diskRadiusM = value
           }
      }
      public func setDiskRadiusM(value:Float) -> Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder {
        self.diskRadiusM = value
        return self
      }
      public func clearDiskRadiusM() -> Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder{
           builderResult.hasDiskRadiusM = false
           builderResult.diskRadiusM = Float(0)
           return self
      }
      public var hasCylinderRadiusM:Bool {
           get {
                return builderResult.hasCylinderRadiusM
           }
      }
      public var cylinderRadiusM:Float {
           get {
                return builderResult.cylinderRadiusM
           }
           set (value) {
               builderResult.hasCylinderRadiusM = true
               builderResult.cylinderRadiusM = value
           }
      }
      public func setCylinderRadiusM(value:Float) -> Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder {
        self.cylinderRadiusM = value
        return self
      }
      public func clearCylinderRadiusM() -> Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder{
           builderResult.hasCylinderRadiusM = false
           builderResult.cylinderRadiusM = Float(0)
           return self
      }
      public var hasCylinderHeightM:Bool {
           get {
                return builderResult.hasCylinderHeightM
           }
      }
      public var cylinderHeightM:Float {
           get {
                return builderResult.cylinderHeightM
           }
           set (value) {
               builderResult.hasCylinderHeightM = true
               builderResult.cylinderHeightM = value
           }
      }
      public func setCylinderHeightM(value:Float) -> Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder {
        self.cylinderHeightM = value
        return self
      }
      public func clearCylinderHeightM() -> Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder{
           builderResult.hasCylinderHeightM = false
           builderResult.cylinderHeightM = Float(0)
           return self
      }
      public var hasCylinderGroundM:Bool {
           get {
                return builderResult.hasCylinderGroundM
           }
      }
      public var cylinderGroundM:Float {
           get {
                return builderResult.cylinderGroundM
           }
           set (value) {
               builderResult.hasCylinderGroundM = true
               builderResult.cylinderGroundM = value
           }
      }
      public func setCylinderGroundM(value:Float) -> Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder {
        self.cylinderGroundM = value
        return self
      }
      public func clearCylinderGroundM() -> Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder{
           builderResult.hasCylinderGroundM = false
           builderResult.cylinderGroundM = Float(0)
           return self
      }
      public var hasShoulderModeScale:Bool {
           get {
                return builderResult.hasShoulderModeScale
           }
      }
      public var shoulderModeScale:Float {
           get {
                return builderResult.shoulderModeScale
           }
           set (value) {
               builderResult.hasShoulderModeScale = true
               builderResult.shoulderModeScale = value
           }
      }
      public func setShoulderModeScale(value:Float) -> Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder {
        self.shoulderModeScale = value
        return self
      }
      public func clearShoulderModeScale() -> Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder{
           builderResult.hasShoulderModeScale = false
           builderResult.shoulderModeScale = Float(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder {
        builderResult = Pogoprotos.Settings.Master.Pokemon.CameraAttributes()
        return self
      }
      override public func clone() throws -> Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder {
        return try Pogoprotos.Settings.Master.Pokemon.CameraAttributes.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Settings.Master.Pokemon.CameraAttributes {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Settings.Master.Pokemon.CameraAttributes {
        let returnMe:Pogoprotos.Settings.Master.Pokemon.CameraAttributes = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Settings.Master.Pokemon.CameraAttributes) throws -> Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder {
        if other == Pogoprotos.Settings.Master.Pokemon.CameraAttributes() {
         return self
        }
        if other.hasDiskRadiusM {
             diskRadiusM = other.diskRadiusM
        }
        if other.hasCylinderRadiusM {
             cylinderRadiusM = other.cylinderRadiusM
        }
        if other.hasCylinderHeightM {
             cylinderHeightM = other.cylinderHeightM
        }
        if other.hasCylinderGroundM {
             cylinderGroundM = other.cylinderGroundM
        }
        if other.hasShoulderModeScale {
             shoulderModeScale = other.shoulderModeScale
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 13:
            diskRadiusM = try input.readFloat()

          case 21:
            cylinderRadiusM = try input.readFloat()

          case 29:
            cylinderHeightM = try input.readFloat()

          case 37:
            cylinderGroundM = try input.readFloat()

          case 45:
            shoulderModeScale = try input.readFloat()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder {
        let resultDecodedBuilder = Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder()
        if let jsonValueDiskRadiusM = jsonMap["diskRadiusM"] as? NSNumber {
          resultDecodedBuilder.diskRadiusM = jsonValueDiskRadiusM.floatValue
        }
        if let jsonValueCylinderRadiusM = jsonMap["cylinderRadiusM"] as? NSNumber {
          resultDecodedBuilder.cylinderRadiusM = jsonValueCylinderRadiusM.floatValue
        }
        if let jsonValueCylinderHeightM = jsonMap["cylinderHeightM"] as? NSNumber {
          resultDecodedBuilder.cylinderHeightM = jsonValueCylinderHeightM.floatValue
        }
        if let jsonValueCylinderGroundM = jsonMap["cylinderGroundM"] as? NSNumber {
          resultDecodedBuilder.cylinderGroundM = jsonValueCylinderGroundM.floatValue
        }
        if let jsonValueShoulderModeScale = jsonMap["shoulderModeScale"] as? NSNumber {
          resultDecodedBuilder.shoulderModeScale = jsonValueShoulderModeScale.floatValue
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
