// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "PlayerData.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Pogoprotos { public struct Data { }}

public func == (lhs: Pogoprotos.Data.PlayerData, rhs: Pogoprotos.Data.PlayerData) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasCreationTimestampMs == rhs.hasCreationTimestampMs) && (!lhs.hasCreationTimestampMs || lhs.creationTimestampMs == rhs.creationTimestampMs)
  fieldCheck = fieldCheck && (lhs.hasUsername == rhs.hasUsername) && (!lhs.hasUsername || lhs.username == rhs.username)
  fieldCheck = fieldCheck && (lhs.hasTeam == rhs.hasTeam) && (!lhs.hasTeam || lhs.team == rhs.team)
  fieldCheck = fieldCheck && (lhs.tutorialState == rhs.tutorialState)
  fieldCheck = fieldCheck && (lhs.hasAvatar == rhs.hasAvatar) && (!lhs.hasAvatar || lhs.avatar == rhs.avatar)
  fieldCheck = fieldCheck && (lhs.hasMaxPokemonStorage == rhs.hasMaxPokemonStorage) && (!lhs.hasMaxPokemonStorage || lhs.maxPokemonStorage == rhs.maxPokemonStorage)
  fieldCheck = fieldCheck && (lhs.hasMaxItemStorage == rhs.hasMaxItemStorage) && (!lhs.hasMaxItemStorage || lhs.maxItemStorage == rhs.maxItemStorage)
  fieldCheck = fieldCheck && (lhs.hasDailyBonus == rhs.hasDailyBonus) && (!lhs.hasDailyBonus || lhs.dailyBonus == rhs.dailyBonus)
  fieldCheck = fieldCheck && (lhs.hasEquippedBadge == rhs.hasEquippedBadge) && (!lhs.hasEquippedBadge || lhs.equippedBadge == rhs.equippedBadge)
  fieldCheck = fieldCheck && (lhs.hasContactSettings == rhs.hasContactSettings) && (!lhs.hasContactSettings || lhs.contactSettings == rhs.contactSettings)
  fieldCheck = fieldCheck && (lhs.currencies == rhs.currencies)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Pogoprotos.Data {
  public struct PlayerDataRoot {
    public static var sharedInstance : PlayerDataRoot {
     struct Static {
         static let instance : PlayerDataRoot = PlayerDataRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Pogoprotos.Enums.TutorialStateRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Data.Player.PlayerAvatarRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Data.Player.DailyBonusRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Data.Player.EquippedBadgeRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Data.Player.ContactSettingsRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Data.Player.CurrencyRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class PlayerData : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasCreationTimestampMs:Bool = false
    public private(set) var creationTimestampMs:Int64 = Int64(0)

    public private(set) var hasUsername:Bool = false
    public private(set) var username:String = ""

    public private(set) var hasTeam:Bool = false
    public private(set) var team:Int32 = Int32(0)

    private var tutorialStateMemoizedSerializedSize:Int32 = 0
    public private(set) var tutorialState:Array<Pogoprotos.Enums.TutorialState> = Array<Pogoprotos.Enums.TutorialState>()
    public private(set) var hasAvatar:Bool = false
    public private(set) var avatar:Pogoprotos.Data.Player.PlayerAvatar!
    public private(set) var hasMaxPokemonStorage:Bool = false
    public private(set) var maxPokemonStorage:Int32 = Int32(0)

    public private(set) var hasMaxItemStorage:Bool = false
    public private(set) var maxItemStorage:Int32 = Int32(0)

    public private(set) var hasDailyBonus:Bool = false
    public private(set) var dailyBonus:Pogoprotos.Data.Player.DailyBonus!
    public private(set) var hasEquippedBadge:Bool = false
    public private(set) var equippedBadge:Pogoprotos.Data.Player.EquippedBadge!
    public private(set) var hasContactSettings:Bool = false
    public private(set) var contactSettings:Pogoprotos.Data.Player.ContactSettings!
    public private(set) var currencies:Array<Pogoprotos.Data.Player.Currency>  = Array<Pogoprotos.Data.Player.Currency>()
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasCreationTimestampMs {
        try output.writeInt64(1, value:creationTimestampMs)
      }
      if hasUsername {
        try output.writeString(2, value:username)
      }
      if hasTeam {
        try output.writeInt32(5, value:team)
      }
      if !tutorialState.isEmpty {
        try output.writeRawVarint32(58)
        try output.writeRawVarint32(tutorialStateMemoizedSerializedSize)
      }
      for oneValueOftutorialState in tutorialState {
          try output.writeEnumNoTag(oneValueOftutorialState.rawValue)
      }
      if hasAvatar {
        try output.writeMessage(8, value:avatar)
      }
      if hasMaxPokemonStorage {
        try output.writeInt32(9, value:maxPokemonStorage)
      }
      if hasMaxItemStorage {
        try output.writeInt32(10, value:maxItemStorage)
      }
      if hasDailyBonus {
        try output.writeMessage(11, value:dailyBonus)
      }
      if hasEquippedBadge {
        try output.writeMessage(12, value:equippedBadge)
      }
      if hasContactSettings {
        try output.writeMessage(13, value:contactSettings)
      }
      for oneElementCurrencies in currencies {
          try output.writeMessage(14, value:oneElementCurrencies)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasCreationTimestampMs {
        serialize_size += creationTimestampMs.computeInt64Size(1)
      }
      if hasUsername {
        serialize_size += username.computeStringSize(2)
      }
      if hasTeam {
        serialize_size += team.computeInt32Size(5)
      }
      var dataSizetutorialState:Int32 = 0
      for oneValueOftutorialState in tutorialState {
          dataSizetutorialState += oneValueOftutorialState.rawValue.computeEnumSizeNoTag()
      }
      serialize_size += dataSizetutorialState
      if !tutorialState.isEmpty {
        serialize_size += 1
        serialize_size += dataSizetutorialState.computeRawVarint32Size()
      }
      tutorialStateMemoizedSerializedSize = dataSizetutorialState
      if hasAvatar {
          if let varSizeavatar = avatar?.computeMessageSize(8) {
              serialize_size += varSizeavatar
          }
      }
      if hasMaxPokemonStorage {
        serialize_size += maxPokemonStorage.computeInt32Size(9)
      }
      if hasMaxItemStorage {
        serialize_size += maxItemStorage.computeInt32Size(10)
      }
      if hasDailyBonus {
          if let varSizedailyBonus = dailyBonus?.computeMessageSize(11) {
              serialize_size += varSizedailyBonus
          }
      }
      if hasEquippedBadge {
          if let varSizeequippedBadge = equippedBadge?.computeMessageSize(12) {
              serialize_size += varSizeequippedBadge
          }
      }
      if hasContactSettings {
          if let varSizecontactSettings = contactSettings?.computeMessageSize(13) {
              serialize_size += varSizecontactSettings
          }
      }
      for oneElementCurrencies in currencies {
          serialize_size += oneElementCurrencies.computeMessageSize(14)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Data.PlayerData> {
      var mergedArray = Array<Pogoprotos.Data.PlayerData>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Data.PlayerData? {
      return try Pogoprotos.Data.PlayerData.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Data.PlayerData {
      return try Pogoprotos.Data.PlayerData.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Data.PlayerDataRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.PlayerData {
      return try Pogoprotos.Data.PlayerData.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Data.PlayerData {
      return try Pogoprotos.Data.PlayerData.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.PlayerData {
      return try Pogoprotos.Data.PlayerData.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Data.PlayerData {
      return try Pogoprotos.Data.PlayerData.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.PlayerData {
      return try Pogoprotos.Data.PlayerData.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Data.PlayerData.Builder {
      return Pogoprotos.Data.PlayerData.classBuilder() as! Pogoprotos.Data.PlayerData.Builder
    }
    public func getBuilder() -> Pogoprotos.Data.PlayerData.Builder {
      return classBuilder() as! Pogoprotos.Data.PlayerData.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Data.PlayerData.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Data.PlayerData.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Data.PlayerData.Builder {
      return try Pogoprotos.Data.PlayerData.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Data.PlayerData) throws -> Pogoprotos.Data.PlayerData.Builder {
      return try Pogoprotos.Data.PlayerData.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasCreationTimestampMs {
        jsonMap["creationTimestampMs"] = "\(creationTimestampMs)"
      }
      if hasUsername {
        jsonMap["username"] = username
      }
      if hasTeam {
        jsonMap["team"] = NSNumber(int:team)
      }
      if !tutorialState.isEmpty {
        var jsonArrayTutorialState:Array<String> = []
          for oneValueTutorialState in tutorialState {
            jsonArrayTutorialState += [oneValueTutorialState.toString()]
          }
        jsonMap["tutorialState"] = jsonArrayTutorialState
      }
      if hasAvatar {
        jsonMap["avatar"] = try avatar.encode()
      }
      if hasMaxPokemonStorage {
        jsonMap["maxPokemonStorage"] = NSNumber(int:maxPokemonStorage)
      }
      if hasMaxItemStorage {
        jsonMap["maxItemStorage"] = NSNumber(int:maxItemStorage)
      }
      if hasDailyBonus {
        jsonMap["dailyBonus"] = try dailyBonus.encode()
      }
      if hasEquippedBadge {
        jsonMap["equippedBadge"] = try equippedBadge.encode()
      }
      if hasContactSettings {
        jsonMap["contactSettings"] = try contactSettings.encode()
      }
      if !currencies.isEmpty {
        var jsonArrayCurrencies:Array<Dictionary<String,AnyObject>> = []
          for oneValueCurrencies in currencies {
            let ecodedMessageCurrencies = try oneValueCurrencies.encode()
            jsonArrayCurrencies += [ecodedMessageCurrencies]
          }
        jsonMap["currencies"] = jsonArrayCurrencies
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Data.PlayerData {
      return try Pogoprotos.Data.PlayerData.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Data.PlayerData {
      return try Pogoprotos.Data.PlayerData.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasCreationTimestampMs {
        output += "\(indent) creationTimestampMs: \(creationTimestampMs) \n"
      }
      if hasUsername {
        output += "\(indent) username: \(username) \n"
      }
      if hasTeam {
        output += "\(indent) team: \(team) \n"
      }
      var tutorialStateElementIndex:Int = 0
      for oneValueOftutorialState in tutorialState {
          output += "\(indent) tutorialState[\(tutorialStateElementIndex)]: \(oneValueOftutorialState.description)\n"
          tutorialStateElementIndex += 1
      }
      if hasAvatar {
        output += "\(indent) avatar {\n"
        if let outDescAvatar = avatar {
          output += try outDescAvatar.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasMaxPokemonStorage {
        output += "\(indent) maxPokemonStorage: \(maxPokemonStorage) \n"
      }
      if hasMaxItemStorage {
        output += "\(indent) maxItemStorage: \(maxItemStorage) \n"
      }
      if hasDailyBonus {
        output += "\(indent) dailyBonus {\n"
        if let outDescDailyBonus = dailyBonus {
          output += try outDescDailyBonus.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasEquippedBadge {
        output += "\(indent) equippedBadge {\n"
        if let outDescEquippedBadge = equippedBadge {
          output += try outDescEquippedBadge.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasContactSettings {
        output += "\(indent) contactSettings {\n"
        if let outDescContactSettings = contactSettings {
          output += try outDescContactSettings.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      var currenciesElementIndex:Int = 0
      for oneElementCurrencies in currencies {
          output += "\(indent) currencies[\(currenciesElementIndex)] {\n"
          output += try oneElementCurrencies.getDescription("\(indent)  ")
          output += "\(indent)}\n"
          currenciesElementIndex += 1
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasCreationTimestampMs {
               hashCode = (hashCode &* 31) &+ creationTimestampMs.hashValue
            }
            if hasUsername {
               hashCode = (hashCode &* 31) &+ username.hashValue
            }
            if hasTeam {
               hashCode = (hashCode &* 31) &+ team.hashValue
            }
            for oneValueOftutorialState in tutorialState {
                hashCode = (hashCode &* 31) &+ Int(oneValueOftutorialState.rawValue)
            }
            if hasAvatar {
                if let hashValueavatar = avatar?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueavatar
                }
            }
            if hasMaxPokemonStorage {
               hashCode = (hashCode &* 31) &+ maxPokemonStorage.hashValue
            }
            if hasMaxItemStorage {
               hashCode = (hashCode &* 31) &+ maxItemStorage.hashValue
            }
            if hasDailyBonus {
                if let hashValuedailyBonus = dailyBonus?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuedailyBonus
                }
            }
            if hasEquippedBadge {
                if let hashValueequippedBadge = equippedBadge?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueequippedBadge
                }
            }
            if hasContactSettings {
                if let hashValuecontactSettings = contactSettings?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuecontactSettings
                }
            }
            for oneElementCurrencies in currencies {
                hashCode = (hashCode &* 31) &+ oneElementCurrencies.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Data.PlayerData"
    }
    override public func className() -> String {
        return "Pogoprotos.Data.PlayerData"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Data.PlayerData.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Data.PlayerData = Pogoprotos.Data.PlayerData()
      public func getMessage() -> Pogoprotos.Data.PlayerData {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasCreationTimestampMs:Bool {
           get {
                return builderResult.hasCreationTimestampMs
           }
      }
      public var creationTimestampMs:Int64 {
           get {
                return builderResult.creationTimestampMs
           }
           set (value) {
               builderResult.hasCreationTimestampMs = true
               builderResult.creationTimestampMs = value
           }
      }
      public func setCreationTimestampMs(value:Int64) -> Pogoprotos.Data.PlayerData.Builder {
        self.creationTimestampMs = value
        return self
      }
      public func clearCreationTimestampMs() -> Pogoprotos.Data.PlayerData.Builder{
           builderResult.hasCreationTimestampMs = false
           builderResult.creationTimestampMs = Int64(0)
           return self
      }
      public var hasUsername:Bool {
           get {
                return builderResult.hasUsername
           }
      }
      public var username:String {
           get {
                return builderResult.username
           }
           set (value) {
               builderResult.hasUsername = true
               builderResult.username = value
           }
      }
      public func setUsername(value:String) -> Pogoprotos.Data.PlayerData.Builder {
        self.username = value
        return self
      }
      public func clearUsername() -> Pogoprotos.Data.PlayerData.Builder{
           builderResult.hasUsername = false
           builderResult.username = ""
           return self
      }
      public var hasTeam:Bool {
           get {
                return builderResult.hasTeam
           }
      }
      public var team:Int32 {
           get {
                return builderResult.team
           }
           set (value) {
               builderResult.hasTeam = true
               builderResult.team = value
           }
      }
      public func setTeam(value:Int32) -> Pogoprotos.Data.PlayerData.Builder {
        self.team = value
        return self
      }
      public func clearTeam() -> Pogoprotos.Data.PlayerData.Builder{
           builderResult.hasTeam = false
           builderResult.team = Int32(0)
           return self
      }
      public var tutorialState:Array<Pogoprotos.Enums.TutorialState> {
          get {
              return builderResult.tutorialState
          }
          set (value) {
              builderResult.tutorialState = value
          }
      }
      public func setTutorialState(value:Array<Pogoprotos.Enums.TutorialState>) -> Pogoprotos.Data.PlayerData.Builder {
        self.tutorialState = value
        return self
      }
      public func clearTutorialState() -> Pogoprotos.Data.PlayerData.Builder {
        builderResult.tutorialState.removeAll(keepCapacity: false)
        return self
      }
      public var hasAvatar:Bool {
           get {
               return builderResult.hasAvatar
           }
      }
      public var avatar:Pogoprotos.Data.Player.PlayerAvatar! {
           get {
               if avatarBuilder_ != nil {
                  builderResult.avatar = avatarBuilder_.getMessage()
               }
               return builderResult.avatar
           }
           set (value) {
               builderResult.hasAvatar = true
               builderResult.avatar = value
           }
      }
      private var avatarBuilder_:Pogoprotos.Data.Player.PlayerAvatar.Builder! {
           didSet {
              builderResult.hasAvatar = true
           }
      }
      public func getAvatarBuilder() -> Pogoprotos.Data.Player.PlayerAvatar.Builder {
        if avatarBuilder_ == nil {
           avatarBuilder_ = Pogoprotos.Data.Player.PlayerAvatar.Builder()
           builderResult.avatar = avatarBuilder_.getMessage()
           if avatar != nil {
              try! avatarBuilder_.mergeFrom(avatar)
           }
        }
        return avatarBuilder_
      }
      public func setAvatar(value:Pogoprotos.Data.Player.PlayerAvatar!) -> Pogoprotos.Data.PlayerData.Builder {
        self.avatar = value
        return self
      }
      public func mergeAvatar(value:Pogoprotos.Data.Player.PlayerAvatar) throws -> Pogoprotos.Data.PlayerData.Builder {
        if builderResult.hasAvatar {
          builderResult.avatar = try Pogoprotos.Data.Player.PlayerAvatar.builderWithPrototype(builderResult.avatar).mergeFrom(value).buildPartial()
        } else {
          builderResult.avatar = value
        }
        builderResult.hasAvatar = true
        return self
      }
      public func clearAvatar() -> Pogoprotos.Data.PlayerData.Builder {
        avatarBuilder_ = nil
        builderResult.hasAvatar = false
        builderResult.avatar = nil
        return self
      }
      public var hasMaxPokemonStorage:Bool {
           get {
                return builderResult.hasMaxPokemonStorage
           }
      }
      public var maxPokemonStorage:Int32 {
           get {
                return builderResult.maxPokemonStorage
           }
           set (value) {
               builderResult.hasMaxPokemonStorage = true
               builderResult.maxPokemonStorage = value
           }
      }
      public func setMaxPokemonStorage(value:Int32) -> Pogoprotos.Data.PlayerData.Builder {
        self.maxPokemonStorage = value
        return self
      }
      public func clearMaxPokemonStorage() -> Pogoprotos.Data.PlayerData.Builder{
           builderResult.hasMaxPokemonStorage = false
           builderResult.maxPokemonStorage = Int32(0)
           return self
      }
      public var hasMaxItemStorage:Bool {
           get {
                return builderResult.hasMaxItemStorage
           }
      }
      public var maxItemStorage:Int32 {
           get {
                return builderResult.maxItemStorage
           }
           set (value) {
               builderResult.hasMaxItemStorage = true
               builderResult.maxItemStorage = value
           }
      }
      public func setMaxItemStorage(value:Int32) -> Pogoprotos.Data.PlayerData.Builder {
        self.maxItemStorage = value
        return self
      }
      public func clearMaxItemStorage() -> Pogoprotos.Data.PlayerData.Builder{
           builderResult.hasMaxItemStorage = false
           builderResult.maxItemStorage = Int32(0)
           return self
      }
      public var hasDailyBonus:Bool {
           get {
               return builderResult.hasDailyBonus
           }
      }
      public var dailyBonus:Pogoprotos.Data.Player.DailyBonus! {
           get {
               if dailyBonusBuilder_ != nil {
                  builderResult.dailyBonus = dailyBonusBuilder_.getMessage()
               }
               return builderResult.dailyBonus
           }
           set (value) {
               builderResult.hasDailyBonus = true
               builderResult.dailyBonus = value
           }
      }
      private var dailyBonusBuilder_:Pogoprotos.Data.Player.DailyBonus.Builder! {
           didSet {
              builderResult.hasDailyBonus = true
           }
      }
      public func getDailyBonusBuilder() -> Pogoprotos.Data.Player.DailyBonus.Builder {
        if dailyBonusBuilder_ == nil {
           dailyBonusBuilder_ = Pogoprotos.Data.Player.DailyBonus.Builder()
           builderResult.dailyBonus = dailyBonusBuilder_.getMessage()
           if dailyBonus != nil {
              try! dailyBonusBuilder_.mergeFrom(dailyBonus)
           }
        }
        return dailyBonusBuilder_
      }
      public func setDailyBonus(value:Pogoprotos.Data.Player.DailyBonus!) -> Pogoprotos.Data.PlayerData.Builder {
        self.dailyBonus = value
        return self
      }
      public func mergeDailyBonus(value:Pogoprotos.Data.Player.DailyBonus) throws -> Pogoprotos.Data.PlayerData.Builder {
        if builderResult.hasDailyBonus {
          builderResult.dailyBonus = try Pogoprotos.Data.Player.DailyBonus.builderWithPrototype(builderResult.dailyBonus).mergeFrom(value).buildPartial()
        } else {
          builderResult.dailyBonus = value
        }
        builderResult.hasDailyBonus = true
        return self
      }
      public func clearDailyBonus() -> Pogoprotos.Data.PlayerData.Builder {
        dailyBonusBuilder_ = nil
        builderResult.hasDailyBonus = false
        builderResult.dailyBonus = nil
        return self
      }
      public var hasEquippedBadge:Bool {
           get {
               return builderResult.hasEquippedBadge
           }
      }
      public var equippedBadge:Pogoprotos.Data.Player.EquippedBadge! {
           get {
               if equippedBadgeBuilder_ != nil {
                  builderResult.equippedBadge = equippedBadgeBuilder_.getMessage()
               }
               return builderResult.equippedBadge
           }
           set (value) {
               builderResult.hasEquippedBadge = true
               builderResult.equippedBadge = value
           }
      }
      private var equippedBadgeBuilder_:Pogoprotos.Data.Player.EquippedBadge.Builder! {
           didSet {
              builderResult.hasEquippedBadge = true
           }
      }
      public func getEquippedBadgeBuilder() -> Pogoprotos.Data.Player.EquippedBadge.Builder {
        if equippedBadgeBuilder_ == nil {
           equippedBadgeBuilder_ = Pogoprotos.Data.Player.EquippedBadge.Builder()
           builderResult.equippedBadge = equippedBadgeBuilder_.getMessage()
           if equippedBadge != nil {
              try! equippedBadgeBuilder_.mergeFrom(equippedBadge)
           }
        }
        return equippedBadgeBuilder_
      }
      public func setEquippedBadge(value:Pogoprotos.Data.Player.EquippedBadge!) -> Pogoprotos.Data.PlayerData.Builder {
        self.equippedBadge = value
        return self
      }
      public func mergeEquippedBadge(value:Pogoprotos.Data.Player.EquippedBadge) throws -> Pogoprotos.Data.PlayerData.Builder {
        if builderResult.hasEquippedBadge {
          builderResult.equippedBadge = try Pogoprotos.Data.Player.EquippedBadge.builderWithPrototype(builderResult.equippedBadge).mergeFrom(value).buildPartial()
        } else {
          builderResult.equippedBadge = value
        }
        builderResult.hasEquippedBadge = true
        return self
      }
      public func clearEquippedBadge() -> Pogoprotos.Data.PlayerData.Builder {
        equippedBadgeBuilder_ = nil
        builderResult.hasEquippedBadge = false
        builderResult.equippedBadge = nil
        return self
      }
      public var hasContactSettings:Bool {
           get {
               return builderResult.hasContactSettings
           }
      }
      public var contactSettings:Pogoprotos.Data.Player.ContactSettings! {
           get {
               if contactSettingsBuilder_ != nil {
                  builderResult.contactSettings = contactSettingsBuilder_.getMessage()
               }
               return builderResult.contactSettings
           }
           set (value) {
               builderResult.hasContactSettings = true
               builderResult.contactSettings = value
           }
      }
      private var contactSettingsBuilder_:Pogoprotos.Data.Player.ContactSettings.Builder! {
           didSet {
              builderResult.hasContactSettings = true
           }
      }
      public func getContactSettingsBuilder() -> Pogoprotos.Data.Player.ContactSettings.Builder {
        if contactSettingsBuilder_ == nil {
           contactSettingsBuilder_ = Pogoprotos.Data.Player.ContactSettings.Builder()
           builderResult.contactSettings = contactSettingsBuilder_.getMessage()
           if contactSettings != nil {
              try! contactSettingsBuilder_.mergeFrom(contactSettings)
           }
        }
        return contactSettingsBuilder_
      }
      public func setContactSettings(value:Pogoprotos.Data.Player.ContactSettings!) -> Pogoprotos.Data.PlayerData.Builder {
        self.contactSettings = value
        return self
      }
      public func mergeContactSettings(value:Pogoprotos.Data.Player.ContactSettings) throws -> Pogoprotos.Data.PlayerData.Builder {
        if builderResult.hasContactSettings {
          builderResult.contactSettings = try Pogoprotos.Data.Player.ContactSettings.builderWithPrototype(builderResult.contactSettings).mergeFrom(value).buildPartial()
        } else {
          builderResult.contactSettings = value
        }
        builderResult.hasContactSettings = true
        return self
      }
      public func clearContactSettings() -> Pogoprotos.Data.PlayerData.Builder {
        contactSettingsBuilder_ = nil
        builderResult.hasContactSettings = false
        builderResult.contactSettings = nil
        return self
      }
      public var currencies:Array<Pogoprotos.Data.Player.Currency> {
           get {
               return builderResult.currencies
           }
           set (value) {
               builderResult.currencies = value
           }
      }
      public func setCurrencies(value:Array<Pogoprotos.Data.Player.Currency>) -> Pogoprotos.Data.PlayerData.Builder {
        self.currencies = value
        return self
      }
      public func clearCurrencies() -> Pogoprotos.Data.PlayerData.Builder {
        builderResult.currencies.removeAll(keepCapacity: false)
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Data.PlayerData.Builder {
        builderResult = Pogoprotos.Data.PlayerData()
        return self
      }
      override public func clone() throws -> Pogoprotos.Data.PlayerData.Builder {
        return try Pogoprotos.Data.PlayerData.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Data.PlayerData {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Data.PlayerData {
        let returnMe:Pogoprotos.Data.PlayerData = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Data.PlayerData) throws -> Pogoprotos.Data.PlayerData.Builder {
        if other == Pogoprotos.Data.PlayerData() {
         return self
        }
        if other.hasCreationTimestampMs {
             creationTimestampMs = other.creationTimestampMs
        }
        if other.hasUsername {
             username = other.username
        }
        if other.hasTeam {
             team = other.team
        }
        if !other.tutorialState.isEmpty {
           builderResult.tutorialState += other.tutorialState
        }
        if (other.hasAvatar) {
            try mergeAvatar(other.avatar)
        }
        if other.hasMaxPokemonStorage {
             maxPokemonStorage = other.maxPokemonStorage
        }
        if other.hasMaxItemStorage {
             maxItemStorage = other.maxItemStorage
        }
        if (other.hasDailyBonus) {
            try mergeDailyBonus(other.dailyBonus)
        }
        if (other.hasEquippedBadge) {
            try mergeEquippedBadge(other.equippedBadge)
        }
        if (other.hasContactSettings) {
            try mergeContactSettings(other.contactSettings)
        }
        if !other.currencies.isEmpty  {
           builderResult.currencies += other.currencies
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Data.PlayerData.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.PlayerData.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            creationTimestampMs = try input.readInt64()

          case 18:
            username = try input.readString()

          case 40:
            team = try input.readInt32()

          case 58:
            let length:Int32 = try input.readRawVarint32()
            let oldLimit:Int32 = try input.pushLimit(length)
            while input.bytesUntilLimit() > 0 {
            let valueInttutorialState = try input.readEnum()
            if let enumstutorialState = Pogoprotos.Enums.TutorialState(rawValue:valueInttutorialState) {
                 builderResult.tutorialState += [enumstutorialState]
            } else {
                 try unknownFieldsBuilder.mergeVarintField(7, value:Int64(valueInttutorialState))
            }
            }
            input.popLimit(oldLimit)

          case 66:
            let subBuilder:Pogoprotos.Data.Player.PlayerAvatar.Builder = Pogoprotos.Data.Player.PlayerAvatar.Builder()
            if hasAvatar {
              try subBuilder.mergeFrom(avatar)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            avatar = subBuilder.buildPartial()

          case 72:
            maxPokemonStorage = try input.readInt32()

          case 80:
            maxItemStorage = try input.readInt32()

          case 90:
            let subBuilder:Pogoprotos.Data.Player.DailyBonus.Builder = Pogoprotos.Data.Player.DailyBonus.Builder()
            if hasDailyBonus {
              try subBuilder.mergeFrom(dailyBonus)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            dailyBonus = subBuilder.buildPartial()

          case 98:
            let subBuilder:Pogoprotos.Data.Player.EquippedBadge.Builder = Pogoprotos.Data.Player.EquippedBadge.Builder()
            if hasEquippedBadge {
              try subBuilder.mergeFrom(equippedBadge)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            equippedBadge = subBuilder.buildPartial()

          case 106:
            let subBuilder:Pogoprotos.Data.Player.ContactSettings.Builder = Pogoprotos.Data.Player.ContactSettings.Builder()
            if hasContactSettings {
              try subBuilder.mergeFrom(contactSettings)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            contactSettings = subBuilder.buildPartial()

          case 114:
            let subBuilder = Pogoprotos.Data.Player.Currency.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            currencies += [subBuilder.buildPartial()]

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Data.PlayerData.Builder {
        let resultDecodedBuilder = Pogoprotos.Data.PlayerData.Builder()
        if let jsonValueCreationTimestampMs = jsonMap["creationTimestampMs"] as? String {
          resultDecodedBuilder.creationTimestampMs = Int64(jsonValueCreationTimestampMs)!
        }
        if let jsonValueUsername = jsonMap["username"] as? String {
          resultDecodedBuilder.username = jsonValueUsername
        }
        if let jsonValueTeam = jsonMap["team"] as? NSNumber {
          resultDecodedBuilder.team = jsonValueTeam.intValue
        }
        if let jsonValueTutorialState = jsonMap["tutorialState"] as? Array<String> {
          var jsonArrayTutorialState:Array<Pogoprotos.Enums.TutorialState> = []
          for oneValueTutorialState in jsonValueTutorialState {
            let enumFromStringTutorialState = try Pogoprotos.Enums.TutorialState.fromString(oneValueTutorialState)
            jsonArrayTutorialState += [enumFromStringTutorialState]
          }
          resultDecodedBuilder.tutorialState = jsonArrayTutorialState
        }
        if let jsonValueAvatar = jsonMap["avatar"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.avatar = try Pogoprotos.Data.Player.PlayerAvatar.Builder.decodeToBuilder(jsonValueAvatar).build()

        }
        if let jsonValueMaxPokemonStorage = jsonMap["maxPokemonStorage"] as? NSNumber {
          resultDecodedBuilder.maxPokemonStorage = jsonValueMaxPokemonStorage.intValue
        }
        if let jsonValueMaxItemStorage = jsonMap["maxItemStorage"] as? NSNumber {
          resultDecodedBuilder.maxItemStorage = jsonValueMaxItemStorage.intValue
        }
        if let jsonValueDailyBonus = jsonMap["dailyBonus"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.dailyBonus = try Pogoprotos.Data.Player.DailyBonus.Builder.decodeToBuilder(jsonValueDailyBonus).build()

        }
        if let jsonValueEquippedBadge = jsonMap["equippedBadge"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.equippedBadge = try Pogoprotos.Data.Player.EquippedBadge.Builder.decodeToBuilder(jsonValueEquippedBadge).build()

        }
        if let jsonValueContactSettings = jsonMap["contactSettings"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.contactSettings = try Pogoprotos.Data.Player.ContactSettings.Builder.decodeToBuilder(jsonValueContactSettings).build()

        }
        if let jsonValueCurrencies = jsonMap["currencies"] as? Array<Dictionary<String,AnyObject>> {
          var jsonArrayCurrencies:Array<Pogoprotos.Data.Player.Currency> = []
          for oneValueCurrencies in jsonValueCurrencies {
            let messageFromStringCurrencies = try Pogoprotos.Data.Player.Currency.Builder.decodeToBuilder(oneValueCurrencies).build()

            jsonArrayCurrencies += [messageFromStringCurrencies]
          }
          resultDecodedBuilder.currencies = jsonArrayCurrencies
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Data.PlayerData.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Data.PlayerData.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
