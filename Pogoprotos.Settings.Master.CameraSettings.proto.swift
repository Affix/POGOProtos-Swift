// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "CameraSettings.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Pogoprotos { public struct Settings { public struct Master { }}}

public func == (lhs: Pogoprotos.Settings.Master.CameraSettings, rhs: Pogoprotos.Settings.Master.CameraSettings) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasNextCamera == rhs.hasNextCamera) && (!lhs.hasNextCamera || lhs.nextCamera == rhs.nextCamera)
  fieldCheck = fieldCheck && (lhs.interpolation == rhs.interpolation)
  fieldCheck = fieldCheck && (lhs.targetType == rhs.targetType)
  fieldCheck = fieldCheck && (lhs.easeInSpeed == rhs.easeInSpeed)
  fieldCheck = fieldCheck && (lhs.eastOutSpeed == rhs.eastOutSpeed)
  fieldCheck = fieldCheck && (lhs.durationSeconds == rhs.durationSeconds)
  fieldCheck = fieldCheck && (lhs.waitSeconds == rhs.waitSeconds)
  fieldCheck = fieldCheck && (lhs.transitionSeconds == rhs.transitionSeconds)
  fieldCheck = fieldCheck && (lhs.angleDegree == rhs.angleDegree)
  fieldCheck = fieldCheck && (lhs.angleOffsetDegree == rhs.angleOffsetDegree)
  fieldCheck = fieldCheck && (lhs.pitchDegree == rhs.pitchDegree)
  fieldCheck = fieldCheck && (lhs.pitchOffsetDegree == rhs.pitchOffsetDegree)
  fieldCheck = fieldCheck && (lhs.rollDegree == rhs.rollDegree)
  fieldCheck = fieldCheck && (lhs.distanceMeters == rhs.distanceMeters)
  fieldCheck = fieldCheck && (lhs.heightPercent == rhs.heightPercent)
  fieldCheck = fieldCheck && (lhs.vertCtrRatio == rhs.vertCtrRatio)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Pogoprotos.Settings.Master {
  public struct CameraSettingsRoot {
    public static var sharedInstance : CameraSettingsRoot {
     struct Static {
         static let instance : CameraSettingsRoot = CameraSettingsRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Pogoprotos.Enums.CameraTargetRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Enums.CameraInterpolationRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class CameraSettings : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasNextCamera:Bool = false
    public private(set) var nextCamera:String = ""

    private var interpolationMemoizedSerializedSize:Int32 = 0
    public private(set) var interpolation:Array<Pogoprotos.Enums.CameraInterpolation> = Array<Pogoprotos.Enums.CameraInterpolation>()
    private var targetTypeMemoizedSerializedSize:Int32 = 0
    public private(set) var targetType:Array<Pogoprotos.Enums.CameraTarget> = Array<Pogoprotos.Enums.CameraTarget>()
    public private(set) var easeInSpeed:Array<Float> = Array<Float>()
    private var easeInSpeedMemoizedSerializedSize:Int32 = -1
    public private(set) var eastOutSpeed:Array<Float> = Array<Float>()
    private var eastOutSpeedMemoizedSerializedSize:Int32 = -1
    public private(set) var durationSeconds:Array<Float> = Array<Float>()
    private var durationSecondsMemoizedSerializedSize:Int32 = -1
    public private(set) var waitSeconds:Array<Float> = Array<Float>()
    private var waitSecondsMemoizedSerializedSize:Int32 = -1
    public private(set) var transitionSeconds:Array<Float> = Array<Float>()
    private var transitionSecondsMemoizedSerializedSize:Int32 = -1
    public private(set) var angleDegree:Array<Float> = Array<Float>()
    private var angleDegreeMemoizedSerializedSize:Int32 = -1
    public private(set) var angleOffsetDegree:Array<Float> = Array<Float>()
    private var angleOffsetDegreeMemoizedSerializedSize:Int32 = -1
    public private(set) var pitchDegree:Array<Float> = Array<Float>()
    private var pitchDegreeMemoizedSerializedSize:Int32 = -1
    public private(set) var pitchOffsetDegree:Array<Float> = Array<Float>()
    private var pitchOffsetDegreeMemoizedSerializedSize:Int32 = -1
    public private(set) var rollDegree:Array<Float> = Array<Float>()
    private var rollDegreeMemoizedSerializedSize:Int32 = -1
    public private(set) var distanceMeters:Array<Float> = Array<Float>()
    private var distanceMetersMemoizedSerializedSize:Int32 = -1
    public private(set) var heightPercent:Array<Float> = Array<Float>()
    private var heightPercentMemoizedSerializedSize:Int32 = -1
    public private(set) var vertCtrRatio:Array<Float> = Array<Float>()
    private var vertCtrRatioMemoizedSerializedSize:Int32 = -1
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasNextCamera {
        try output.writeString(1, value:nextCamera)
      }
      for oneValueOfinterpolation in interpolation {
          try output.writeEnum(2, value:oneValueOfinterpolation.rawValue)
      }
      for oneValueOftargetType in targetType {
          try output.writeEnum(3, value:oneValueOftargetType.rawValue)
      }
      if !easeInSpeed.isEmpty {
        try output.writeRawVarint32(34)
        try output.writeRawVarint32(easeInSpeedMemoizedSerializedSize)
        for oneValueeaseInSpeed in easeInSpeed {
          try output.writeFloatNoTag(oneValueeaseInSpeed)
        }
      }
      if !eastOutSpeed.isEmpty {
        try output.writeRawVarint32(42)
        try output.writeRawVarint32(eastOutSpeedMemoizedSerializedSize)
        for oneValueeastOutSpeed in eastOutSpeed {
          try output.writeFloatNoTag(oneValueeastOutSpeed)
        }
      }
      if !durationSeconds.isEmpty {
        try output.writeRawVarint32(50)
        try output.writeRawVarint32(durationSecondsMemoizedSerializedSize)
        for oneValuedurationSeconds in durationSeconds {
          try output.writeFloatNoTag(oneValuedurationSeconds)
        }
      }
      if !waitSeconds.isEmpty {
        try output.writeRawVarint32(58)
        try output.writeRawVarint32(waitSecondsMemoizedSerializedSize)
        for oneValuewaitSeconds in waitSeconds {
          try output.writeFloatNoTag(oneValuewaitSeconds)
        }
      }
      if !transitionSeconds.isEmpty {
        try output.writeRawVarint32(66)
        try output.writeRawVarint32(transitionSecondsMemoizedSerializedSize)
        for oneValuetransitionSeconds in transitionSeconds {
          try output.writeFloatNoTag(oneValuetransitionSeconds)
        }
      }
      if !angleDegree.isEmpty {
        try output.writeRawVarint32(74)
        try output.writeRawVarint32(angleDegreeMemoizedSerializedSize)
        for oneValueangleDegree in angleDegree {
          try output.writeFloatNoTag(oneValueangleDegree)
        }
      }
      if !angleOffsetDegree.isEmpty {
        try output.writeRawVarint32(82)
        try output.writeRawVarint32(angleOffsetDegreeMemoizedSerializedSize)
        for oneValueangleOffsetDegree in angleOffsetDegree {
          try output.writeFloatNoTag(oneValueangleOffsetDegree)
        }
      }
      if !pitchDegree.isEmpty {
        try output.writeRawVarint32(90)
        try output.writeRawVarint32(pitchDegreeMemoizedSerializedSize)
        for oneValuepitchDegree in pitchDegree {
          try output.writeFloatNoTag(oneValuepitchDegree)
        }
      }
      if !pitchOffsetDegree.isEmpty {
        try output.writeRawVarint32(98)
        try output.writeRawVarint32(pitchOffsetDegreeMemoizedSerializedSize)
        for oneValuepitchOffsetDegree in pitchOffsetDegree {
          try output.writeFloatNoTag(oneValuepitchOffsetDegree)
        }
      }
      if !rollDegree.isEmpty {
        try output.writeRawVarint32(106)
        try output.writeRawVarint32(rollDegreeMemoizedSerializedSize)
        for oneValuerollDegree in rollDegree {
          try output.writeFloatNoTag(oneValuerollDegree)
        }
      }
      if !distanceMeters.isEmpty {
        try output.writeRawVarint32(114)
        try output.writeRawVarint32(distanceMetersMemoizedSerializedSize)
        for oneValuedistanceMeters in distanceMeters {
          try output.writeFloatNoTag(oneValuedistanceMeters)
        }
      }
      if !heightPercent.isEmpty {
        try output.writeRawVarint32(122)
        try output.writeRawVarint32(heightPercentMemoizedSerializedSize)
        for oneValueheightPercent in heightPercent {
          try output.writeFloatNoTag(oneValueheightPercent)
        }
      }
      if !vertCtrRatio.isEmpty {
        try output.writeRawVarint32(130)
        try output.writeRawVarint32(vertCtrRatioMemoizedSerializedSize)
        for oneValuevertCtrRatio in vertCtrRatio {
          try output.writeFloatNoTag(oneValuevertCtrRatio)
        }
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasNextCamera {
        serialize_size += nextCamera.computeStringSize(1)
      }
      var dataSizeinterpolation:Int32 = 0
      for oneValueOfinterpolation in interpolation {
          dataSizeinterpolation += oneValueOfinterpolation.rawValue.computeEnumSizeNoTag()
      }
      serialize_size += dataSizeinterpolation
      serialize_size += (1 * Int32(interpolation.count))
      var dataSizetargetType:Int32 = 0
      for oneValueOftargetType in targetType {
          dataSizetargetType += oneValueOftargetType.rawValue.computeEnumSizeNoTag()
      }
      serialize_size += dataSizetargetType
      serialize_size += (1 * Int32(targetType.count))
      var dataSizeEaseInSpeed:Int32 = 0
      dataSizeEaseInSpeed = 4 * Int32(easeInSpeed.count)
      serialize_size += dataSizeEaseInSpeed
      if !easeInSpeed.isEmpty {
        serialize_size += 1
        serialize_size += dataSizeEaseInSpeed.computeInt32SizeNoTag()
      }
      easeInSpeedMemoizedSerializedSize = dataSizeEaseInSpeed
      var dataSizeEastOutSpeed:Int32 = 0
      dataSizeEastOutSpeed = 4 * Int32(eastOutSpeed.count)
      serialize_size += dataSizeEastOutSpeed
      if !eastOutSpeed.isEmpty {
        serialize_size += 1
        serialize_size += dataSizeEastOutSpeed.computeInt32SizeNoTag()
      }
      eastOutSpeedMemoizedSerializedSize = dataSizeEastOutSpeed
      var dataSizeDurationSeconds:Int32 = 0
      dataSizeDurationSeconds = 4 * Int32(durationSeconds.count)
      serialize_size += dataSizeDurationSeconds
      if !durationSeconds.isEmpty {
        serialize_size += 1
        serialize_size += dataSizeDurationSeconds.computeInt32SizeNoTag()
      }
      durationSecondsMemoizedSerializedSize = dataSizeDurationSeconds
      var dataSizeWaitSeconds:Int32 = 0
      dataSizeWaitSeconds = 4 * Int32(waitSeconds.count)
      serialize_size += dataSizeWaitSeconds
      if !waitSeconds.isEmpty {
        serialize_size += 1
        serialize_size += dataSizeWaitSeconds.computeInt32SizeNoTag()
      }
      waitSecondsMemoizedSerializedSize = dataSizeWaitSeconds
      var dataSizeTransitionSeconds:Int32 = 0
      dataSizeTransitionSeconds = 4 * Int32(transitionSeconds.count)
      serialize_size += dataSizeTransitionSeconds
      if !transitionSeconds.isEmpty {
        serialize_size += 1
        serialize_size += dataSizeTransitionSeconds.computeInt32SizeNoTag()
      }
      transitionSecondsMemoizedSerializedSize = dataSizeTransitionSeconds
      var dataSizeAngleDegree:Int32 = 0
      dataSizeAngleDegree = 4 * Int32(angleDegree.count)
      serialize_size += dataSizeAngleDegree
      if !angleDegree.isEmpty {
        serialize_size += 1
        serialize_size += dataSizeAngleDegree.computeInt32SizeNoTag()
      }
      angleDegreeMemoizedSerializedSize = dataSizeAngleDegree
      var dataSizeAngleOffsetDegree:Int32 = 0
      dataSizeAngleOffsetDegree = 4 * Int32(angleOffsetDegree.count)
      serialize_size += dataSizeAngleOffsetDegree
      if !angleOffsetDegree.isEmpty {
        serialize_size += 1
        serialize_size += dataSizeAngleOffsetDegree.computeInt32SizeNoTag()
      }
      angleOffsetDegreeMemoizedSerializedSize = dataSizeAngleOffsetDegree
      var dataSizePitchDegree:Int32 = 0
      dataSizePitchDegree = 4 * Int32(pitchDegree.count)
      serialize_size += dataSizePitchDegree
      if !pitchDegree.isEmpty {
        serialize_size += 1
        serialize_size += dataSizePitchDegree.computeInt32SizeNoTag()
      }
      pitchDegreeMemoizedSerializedSize = dataSizePitchDegree
      var dataSizePitchOffsetDegree:Int32 = 0
      dataSizePitchOffsetDegree = 4 * Int32(pitchOffsetDegree.count)
      serialize_size += dataSizePitchOffsetDegree
      if !pitchOffsetDegree.isEmpty {
        serialize_size += 1
        serialize_size += dataSizePitchOffsetDegree.computeInt32SizeNoTag()
      }
      pitchOffsetDegreeMemoizedSerializedSize = dataSizePitchOffsetDegree
      var dataSizeRollDegree:Int32 = 0
      dataSizeRollDegree = 4 * Int32(rollDegree.count)
      serialize_size += dataSizeRollDegree
      if !rollDegree.isEmpty {
        serialize_size += 1
        serialize_size += dataSizeRollDegree.computeInt32SizeNoTag()
      }
      rollDegreeMemoizedSerializedSize = dataSizeRollDegree
      var dataSizeDistanceMeters:Int32 = 0
      dataSizeDistanceMeters = 4 * Int32(distanceMeters.count)
      serialize_size += dataSizeDistanceMeters
      if !distanceMeters.isEmpty {
        serialize_size += 1
        serialize_size += dataSizeDistanceMeters.computeInt32SizeNoTag()
      }
      distanceMetersMemoizedSerializedSize = dataSizeDistanceMeters
      var dataSizeHeightPercent:Int32 = 0
      dataSizeHeightPercent = 4 * Int32(heightPercent.count)
      serialize_size += dataSizeHeightPercent
      if !heightPercent.isEmpty {
        serialize_size += 1
        serialize_size += dataSizeHeightPercent.computeInt32SizeNoTag()
      }
      heightPercentMemoizedSerializedSize = dataSizeHeightPercent
      var dataSizeVertCtrRatio:Int32 = 0
      dataSizeVertCtrRatio = 4 * Int32(vertCtrRatio.count)
      serialize_size += dataSizeVertCtrRatio
      if !vertCtrRatio.isEmpty {
        serialize_size += 2
        serialize_size += dataSizeVertCtrRatio.computeInt32SizeNoTag()
      }
      vertCtrRatioMemoizedSerializedSize = dataSizeVertCtrRatio
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Settings.Master.CameraSettings> {
      var mergedArray = Array<Pogoprotos.Settings.Master.CameraSettings>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.Master.CameraSettings? {
      return try Pogoprotos.Settings.Master.CameraSettings.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Settings.Master.CameraSettings {
      return try Pogoprotos.Settings.Master.CameraSettings.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Settings.Master.CameraSettingsRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.CameraSettings {
      return try Pogoprotos.Settings.Master.CameraSettings.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.Master.CameraSettings {
      return try Pogoprotos.Settings.Master.CameraSettings.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.CameraSettings {
      return try Pogoprotos.Settings.Master.CameraSettings.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.Master.CameraSettings {
      return try Pogoprotos.Settings.Master.CameraSettings.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.CameraSettings {
      return try Pogoprotos.Settings.Master.CameraSettings.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Settings.Master.CameraSettings.Builder {
      return Pogoprotos.Settings.Master.CameraSettings.classBuilder() as! Pogoprotos.Settings.Master.CameraSettings.Builder
    }
    public func getBuilder() -> Pogoprotos.Settings.Master.CameraSettings.Builder {
      return classBuilder() as! Pogoprotos.Settings.Master.CameraSettings.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.Master.CameraSettings.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.Master.CameraSettings.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Settings.Master.CameraSettings.Builder {
      return try Pogoprotos.Settings.Master.CameraSettings.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Settings.Master.CameraSettings) throws -> Pogoprotos.Settings.Master.CameraSettings.Builder {
      return try Pogoprotos.Settings.Master.CameraSettings.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasNextCamera {
        jsonMap["nextCamera"] = nextCamera
      }
      if !interpolation.isEmpty {
        var jsonArrayInterpolation:Array<String> = []
          for oneValueInterpolation in interpolation {
            jsonArrayInterpolation += [oneValueInterpolation.toString()]
          }
        jsonMap["interpolation"] = jsonArrayInterpolation
      }
      if !targetType.isEmpty {
        var jsonArrayTargetType:Array<String> = []
          for oneValueTargetType in targetType {
            jsonArrayTargetType += [oneValueTargetType.toString()]
          }
        jsonMap["targetType"] = jsonArrayTargetType
      }
      if !easeInSpeed.isEmpty {
        var jsonArrayEaseInSpeed:Array<NSNumber> = []
          for oneValueEaseInSpeed in easeInSpeed {
            jsonArrayEaseInSpeed += [NSNumber(float:oneValueEaseInSpeed)]
          }
        jsonMap["easeInSpeed"] = jsonArrayEaseInSpeed
      }
      if !eastOutSpeed.isEmpty {
        var jsonArrayEastOutSpeed:Array<NSNumber> = []
          for oneValueEastOutSpeed in eastOutSpeed {
            jsonArrayEastOutSpeed += [NSNumber(float:oneValueEastOutSpeed)]
          }
        jsonMap["eastOutSpeed"] = jsonArrayEastOutSpeed
      }
      if !durationSeconds.isEmpty {
        var jsonArrayDurationSeconds:Array<NSNumber> = []
          for oneValueDurationSeconds in durationSeconds {
            jsonArrayDurationSeconds += [NSNumber(float:oneValueDurationSeconds)]
          }
        jsonMap["durationSeconds"] = jsonArrayDurationSeconds
      }
      if !waitSeconds.isEmpty {
        var jsonArrayWaitSeconds:Array<NSNumber> = []
          for oneValueWaitSeconds in waitSeconds {
            jsonArrayWaitSeconds += [NSNumber(float:oneValueWaitSeconds)]
          }
        jsonMap["waitSeconds"] = jsonArrayWaitSeconds
      }
      if !transitionSeconds.isEmpty {
        var jsonArrayTransitionSeconds:Array<NSNumber> = []
          for oneValueTransitionSeconds in transitionSeconds {
            jsonArrayTransitionSeconds += [NSNumber(float:oneValueTransitionSeconds)]
          }
        jsonMap["transitionSeconds"] = jsonArrayTransitionSeconds
      }
      if !angleDegree.isEmpty {
        var jsonArrayAngleDegree:Array<NSNumber> = []
          for oneValueAngleDegree in angleDegree {
            jsonArrayAngleDegree += [NSNumber(float:oneValueAngleDegree)]
          }
        jsonMap["angleDegree"] = jsonArrayAngleDegree
      }
      if !angleOffsetDegree.isEmpty {
        var jsonArrayAngleOffsetDegree:Array<NSNumber> = []
          for oneValueAngleOffsetDegree in angleOffsetDegree {
            jsonArrayAngleOffsetDegree += [NSNumber(float:oneValueAngleOffsetDegree)]
          }
        jsonMap["angleOffsetDegree"] = jsonArrayAngleOffsetDegree
      }
      if !pitchDegree.isEmpty {
        var jsonArrayPitchDegree:Array<NSNumber> = []
          for oneValuePitchDegree in pitchDegree {
            jsonArrayPitchDegree += [NSNumber(float:oneValuePitchDegree)]
          }
        jsonMap["pitchDegree"] = jsonArrayPitchDegree
      }
      if !pitchOffsetDegree.isEmpty {
        var jsonArrayPitchOffsetDegree:Array<NSNumber> = []
          for oneValuePitchOffsetDegree in pitchOffsetDegree {
            jsonArrayPitchOffsetDegree += [NSNumber(float:oneValuePitchOffsetDegree)]
          }
        jsonMap["pitchOffsetDegree"] = jsonArrayPitchOffsetDegree
      }
      if !rollDegree.isEmpty {
        var jsonArrayRollDegree:Array<NSNumber> = []
          for oneValueRollDegree in rollDegree {
            jsonArrayRollDegree += [NSNumber(float:oneValueRollDegree)]
          }
        jsonMap["rollDegree"] = jsonArrayRollDegree
      }
      if !distanceMeters.isEmpty {
        var jsonArrayDistanceMeters:Array<NSNumber> = []
          for oneValueDistanceMeters in distanceMeters {
            jsonArrayDistanceMeters += [NSNumber(float:oneValueDistanceMeters)]
          }
        jsonMap["distanceMeters"] = jsonArrayDistanceMeters
      }
      if !heightPercent.isEmpty {
        var jsonArrayHeightPercent:Array<NSNumber> = []
          for oneValueHeightPercent in heightPercent {
            jsonArrayHeightPercent += [NSNumber(float:oneValueHeightPercent)]
          }
        jsonMap["heightPercent"] = jsonArrayHeightPercent
      }
      if !vertCtrRatio.isEmpty {
        var jsonArrayVertCtrRatio:Array<NSNumber> = []
          for oneValueVertCtrRatio in vertCtrRatio {
            jsonArrayVertCtrRatio += [NSNumber(float:oneValueVertCtrRatio)]
          }
        jsonMap["vertCtrRatio"] = jsonArrayVertCtrRatio
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.Master.CameraSettings {
      return try Pogoprotos.Settings.Master.CameraSettings.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Settings.Master.CameraSettings {
      return try Pogoprotos.Settings.Master.CameraSettings.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasNextCamera {
        output += "\(indent) nextCamera: \(nextCamera) \n"
      }
      var interpolationElementIndex:Int = 0
      for oneValueOfinterpolation in interpolation {
          output += "\(indent) interpolation[\(interpolationElementIndex)]: \(oneValueOfinterpolation.description)\n"
          interpolationElementIndex += 1
      }
      var targetTypeElementIndex:Int = 0
      for oneValueOftargetType in targetType {
          output += "\(indent) targetType[\(targetTypeElementIndex)]: \(oneValueOftargetType.description)\n"
          targetTypeElementIndex += 1
      }
      var easeInSpeedElementIndex:Int = 0
      for oneValueEaseInSpeed in easeInSpeed  {
          output += "\(indent) easeInSpeed[\(easeInSpeedElementIndex)]: \(oneValueEaseInSpeed)\n"
          easeInSpeedElementIndex += 1
      }
      var eastOutSpeedElementIndex:Int = 0
      for oneValueEastOutSpeed in eastOutSpeed  {
          output += "\(indent) eastOutSpeed[\(eastOutSpeedElementIndex)]: \(oneValueEastOutSpeed)\n"
          eastOutSpeedElementIndex += 1
      }
      var durationSecondsElementIndex:Int = 0
      for oneValueDurationSeconds in durationSeconds  {
          output += "\(indent) durationSeconds[\(durationSecondsElementIndex)]: \(oneValueDurationSeconds)\n"
          durationSecondsElementIndex += 1
      }
      var waitSecondsElementIndex:Int = 0
      for oneValueWaitSeconds in waitSeconds  {
          output += "\(indent) waitSeconds[\(waitSecondsElementIndex)]: \(oneValueWaitSeconds)\n"
          waitSecondsElementIndex += 1
      }
      var transitionSecondsElementIndex:Int = 0
      for oneValueTransitionSeconds in transitionSeconds  {
          output += "\(indent) transitionSeconds[\(transitionSecondsElementIndex)]: \(oneValueTransitionSeconds)\n"
          transitionSecondsElementIndex += 1
      }
      var angleDegreeElementIndex:Int = 0
      for oneValueAngleDegree in angleDegree  {
          output += "\(indent) angleDegree[\(angleDegreeElementIndex)]: \(oneValueAngleDegree)\n"
          angleDegreeElementIndex += 1
      }
      var angleOffsetDegreeElementIndex:Int = 0
      for oneValueAngleOffsetDegree in angleOffsetDegree  {
          output += "\(indent) angleOffsetDegree[\(angleOffsetDegreeElementIndex)]: \(oneValueAngleOffsetDegree)\n"
          angleOffsetDegreeElementIndex += 1
      }
      var pitchDegreeElementIndex:Int = 0
      for oneValuePitchDegree in pitchDegree  {
          output += "\(indent) pitchDegree[\(pitchDegreeElementIndex)]: \(oneValuePitchDegree)\n"
          pitchDegreeElementIndex += 1
      }
      var pitchOffsetDegreeElementIndex:Int = 0
      for oneValuePitchOffsetDegree in pitchOffsetDegree  {
          output += "\(indent) pitchOffsetDegree[\(pitchOffsetDegreeElementIndex)]: \(oneValuePitchOffsetDegree)\n"
          pitchOffsetDegreeElementIndex += 1
      }
      var rollDegreeElementIndex:Int = 0
      for oneValueRollDegree in rollDegree  {
          output += "\(indent) rollDegree[\(rollDegreeElementIndex)]: \(oneValueRollDegree)\n"
          rollDegreeElementIndex += 1
      }
      var distanceMetersElementIndex:Int = 0
      for oneValueDistanceMeters in distanceMeters  {
          output += "\(indent) distanceMeters[\(distanceMetersElementIndex)]: \(oneValueDistanceMeters)\n"
          distanceMetersElementIndex += 1
      }
      var heightPercentElementIndex:Int = 0
      for oneValueHeightPercent in heightPercent  {
          output += "\(indent) heightPercent[\(heightPercentElementIndex)]: \(oneValueHeightPercent)\n"
          heightPercentElementIndex += 1
      }
      var vertCtrRatioElementIndex:Int = 0
      for oneValueVertCtrRatio in vertCtrRatio  {
          output += "\(indent) vertCtrRatio[\(vertCtrRatioElementIndex)]: \(oneValueVertCtrRatio)\n"
          vertCtrRatioElementIndex += 1
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasNextCamera {
               hashCode = (hashCode &* 31) &+ nextCamera.hashValue
            }
            for oneValueOfinterpolation in interpolation {
                hashCode = (hashCode &* 31) &+ Int(oneValueOfinterpolation.rawValue)
            }
            for oneValueOftargetType in targetType {
                hashCode = (hashCode &* 31) &+ Int(oneValueOftargetType.rawValue)
            }
            for oneValueEaseInSpeed in easeInSpeed {
                hashCode = (hashCode &* 31) &+ oneValueEaseInSpeed.hashValue
            }
            for oneValueEastOutSpeed in eastOutSpeed {
                hashCode = (hashCode &* 31) &+ oneValueEastOutSpeed.hashValue
            }
            for oneValueDurationSeconds in durationSeconds {
                hashCode = (hashCode &* 31) &+ oneValueDurationSeconds.hashValue
            }
            for oneValueWaitSeconds in waitSeconds {
                hashCode = (hashCode &* 31) &+ oneValueWaitSeconds.hashValue
            }
            for oneValueTransitionSeconds in transitionSeconds {
                hashCode = (hashCode &* 31) &+ oneValueTransitionSeconds.hashValue
            }
            for oneValueAngleDegree in angleDegree {
                hashCode = (hashCode &* 31) &+ oneValueAngleDegree.hashValue
            }
            for oneValueAngleOffsetDegree in angleOffsetDegree {
                hashCode = (hashCode &* 31) &+ oneValueAngleOffsetDegree.hashValue
            }
            for oneValuePitchDegree in pitchDegree {
                hashCode = (hashCode &* 31) &+ oneValuePitchDegree.hashValue
            }
            for oneValuePitchOffsetDegree in pitchOffsetDegree {
                hashCode = (hashCode &* 31) &+ oneValuePitchOffsetDegree.hashValue
            }
            for oneValueRollDegree in rollDegree {
                hashCode = (hashCode &* 31) &+ oneValueRollDegree.hashValue
            }
            for oneValueDistanceMeters in distanceMeters {
                hashCode = (hashCode &* 31) &+ oneValueDistanceMeters.hashValue
            }
            for oneValueHeightPercent in heightPercent {
                hashCode = (hashCode &* 31) &+ oneValueHeightPercent.hashValue
            }
            for oneValueVertCtrRatio in vertCtrRatio {
                hashCode = (hashCode &* 31) &+ oneValueVertCtrRatio.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Settings.Master.CameraSettings"
    }
    override public func className() -> String {
        return "Pogoprotos.Settings.Master.CameraSettings"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Settings.Master.CameraSettings.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Settings.Master.CameraSettings = Pogoprotos.Settings.Master.CameraSettings()
      public func getMessage() -> Pogoprotos.Settings.Master.CameraSettings {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasNextCamera:Bool {
           get {
                return builderResult.hasNextCamera
           }
      }
      public var nextCamera:String {
           get {
                return builderResult.nextCamera
           }
           set (value) {
               builderResult.hasNextCamera = true
               builderResult.nextCamera = value
           }
      }
      public func setNextCamera(value:String) -> Pogoprotos.Settings.Master.CameraSettings.Builder {
        self.nextCamera = value
        return self
      }
      public func clearNextCamera() -> Pogoprotos.Settings.Master.CameraSettings.Builder{
           builderResult.hasNextCamera = false
           builderResult.nextCamera = ""
           return self
      }
      public var interpolation:Array<Pogoprotos.Enums.CameraInterpolation> {
          get {
              return builderResult.interpolation
          }
          set (value) {
              builderResult.interpolation = value
          }
      }
      public func setInterpolation(value:Array<Pogoprotos.Enums.CameraInterpolation>) -> Pogoprotos.Settings.Master.CameraSettings.Builder {
        self.interpolation = value
        return self
      }
      public func clearInterpolation() -> Pogoprotos.Settings.Master.CameraSettings.Builder {
        builderResult.interpolation.removeAll(keepCapacity: false)
        return self
      }
      public var targetType:Array<Pogoprotos.Enums.CameraTarget> {
          get {
              return builderResult.targetType
          }
          set (value) {
              builderResult.targetType = value
          }
      }
      public func setTargetType(value:Array<Pogoprotos.Enums.CameraTarget>) -> Pogoprotos.Settings.Master.CameraSettings.Builder {
        self.targetType = value
        return self
      }
      public func clearTargetType() -> Pogoprotos.Settings.Master.CameraSettings.Builder {
        builderResult.targetType.removeAll(keepCapacity: false)
        return self
      }
      public var easeInSpeed:Array<Float> {
           get {
               return builderResult.easeInSpeed
           }
           set (array) {
               builderResult.easeInSpeed = array
           }
      }
      public func setEaseInSpeed(value:Array<Float>) -> Pogoprotos.Settings.Master.CameraSettings.Builder {
        self.easeInSpeed = value
        return self
      }
      public func clearEaseInSpeed() -> Pogoprotos.Settings.Master.CameraSettings.Builder {
         builderResult.easeInSpeed.removeAll(keepCapacity: false)
         return self
      }
      public var eastOutSpeed:Array<Float> {
           get {
               return builderResult.eastOutSpeed
           }
           set (array) {
               builderResult.eastOutSpeed = array
           }
      }
      public func setEastOutSpeed(value:Array<Float>) -> Pogoprotos.Settings.Master.CameraSettings.Builder {
        self.eastOutSpeed = value
        return self
      }
      public func clearEastOutSpeed() -> Pogoprotos.Settings.Master.CameraSettings.Builder {
         builderResult.eastOutSpeed.removeAll(keepCapacity: false)
         return self
      }
      public var durationSeconds:Array<Float> {
           get {
               return builderResult.durationSeconds
           }
           set (array) {
               builderResult.durationSeconds = array
           }
      }
      public func setDurationSeconds(value:Array<Float>) -> Pogoprotos.Settings.Master.CameraSettings.Builder {
        self.durationSeconds = value
        return self
      }
      public func clearDurationSeconds() -> Pogoprotos.Settings.Master.CameraSettings.Builder {
         builderResult.durationSeconds.removeAll(keepCapacity: false)
         return self
      }
      public var waitSeconds:Array<Float> {
           get {
               return builderResult.waitSeconds
           }
           set (array) {
               builderResult.waitSeconds = array
           }
      }
      public func setWaitSeconds(value:Array<Float>) -> Pogoprotos.Settings.Master.CameraSettings.Builder {
        self.waitSeconds = value
        return self
      }
      public func clearWaitSeconds() -> Pogoprotos.Settings.Master.CameraSettings.Builder {
         builderResult.waitSeconds.removeAll(keepCapacity: false)
         return self
      }
      public var transitionSeconds:Array<Float> {
           get {
               return builderResult.transitionSeconds
           }
           set (array) {
               builderResult.transitionSeconds = array
           }
      }
      public func setTransitionSeconds(value:Array<Float>) -> Pogoprotos.Settings.Master.CameraSettings.Builder {
        self.transitionSeconds = value
        return self
      }
      public func clearTransitionSeconds() -> Pogoprotos.Settings.Master.CameraSettings.Builder {
         builderResult.transitionSeconds.removeAll(keepCapacity: false)
         return self
      }
      public var angleDegree:Array<Float> {
           get {
               return builderResult.angleDegree
           }
           set (array) {
               builderResult.angleDegree = array
           }
      }
      public func setAngleDegree(value:Array<Float>) -> Pogoprotos.Settings.Master.CameraSettings.Builder {
        self.angleDegree = value
        return self
      }
      public func clearAngleDegree() -> Pogoprotos.Settings.Master.CameraSettings.Builder {
         builderResult.angleDegree.removeAll(keepCapacity: false)
         return self
      }
      public var angleOffsetDegree:Array<Float> {
           get {
               return builderResult.angleOffsetDegree
           }
           set (array) {
               builderResult.angleOffsetDegree = array
           }
      }
      public func setAngleOffsetDegree(value:Array<Float>) -> Pogoprotos.Settings.Master.CameraSettings.Builder {
        self.angleOffsetDegree = value
        return self
      }
      public func clearAngleOffsetDegree() -> Pogoprotos.Settings.Master.CameraSettings.Builder {
         builderResult.angleOffsetDegree.removeAll(keepCapacity: false)
         return self
      }
      public var pitchDegree:Array<Float> {
           get {
               return builderResult.pitchDegree
           }
           set (array) {
               builderResult.pitchDegree = array
           }
      }
      public func setPitchDegree(value:Array<Float>) -> Pogoprotos.Settings.Master.CameraSettings.Builder {
        self.pitchDegree = value
        return self
      }
      public func clearPitchDegree() -> Pogoprotos.Settings.Master.CameraSettings.Builder {
         builderResult.pitchDegree.removeAll(keepCapacity: false)
         return self
      }
      public var pitchOffsetDegree:Array<Float> {
           get {
               return builderResult.pitchOffsetDegree
           }
           set (array) {
               builderResult.pitchOffsetDegree = array
           }
      }
      public func setPitchOffsetDegree(value:Array<Float>) -> Pogoprotos.Settings.Master.CameraSettings.Builder {
        self.pitchOffsetDegree = value
        return self
      }
      public func clearPitchOffsetDegree() -> Pogoprotos.Settings.Master.CameraSettings.Builder {
         builderResult.pitchOffsetDegree.removeAll(keepCapacity: false)
         return self
      }
      public var rollDegree:Array<Float> {
           get {
               return builderResult.rollDegree
           }
           set (array) {
               builderResult.rollDegree = array
           }
      }
      public func setRollDegree(value:Array<Float>) -> Pogoprotos.Settings.Master.CameraSettings.Builder {
        self.rollDegree = value
        return self
      }
      public func clearRollDegree() -> Pogoprotos.Settings.Master.CameraSettings.Builder {
         builderResult.rollDegree.removeAll(keepCapacity: false)
         return self
      }
      public var distanceMeters:Array<Float> {
           get {
               return builderResult.distanceMeters
           }
           set (array) {
               builderResult.distanceMeters = array
           }
      }
      public func setDistanceMeters(value:Array<Float>) -> Pogoprotos.Settings.Master.CameraSettings.Builder {
        self.distanceMeters = value
        return self
      }
      public func clearDistanceMeters() -> Pogoprotos.Settings.Master.CameraSettings.Builder {
         builderResult.distanceMeters.removeAll(keepCapacity: false)
         return self
      }
      public var heightPercent:Array<Float> {
           get {
               return builderResult.heightPercent
           }
           set (array) {
               builderResult.heightPercent = array
           }
      }
      public func setHeightPercent(value:Array<Float>) -> Pogoprotos.Settings.Master.CameraSettings.Builder {
        self.heightPercent = value
        return self
      }
      public func clearHeightPercent() -> Pogoprotos.Settings.Master.CameraSettings.Builder {
         builderResult.heightPercent.removeAll(keepCapacity: false)
         return self
      }
      public var vertCtrRatio:Array<Float> {
           get {
               return builderResult.vertCtrRatio
           }
           set (array) {
               builderResult.vertCtrRatio = array
           }
      }
      public func setVertCtrRatio(value:Array<Float>) -> Pogoprotos.Settings.Master.CameraSettings.Builder {
        self.vertCtrRatio = value
        return self
      }
      public func clearVertCtrRatio() -> Pogoprotos.Settings.Master.CameraSettings.Builder {
         builderResult.vertCtrRatio.removeAll(keepCapacity: false)
         return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Settings.Master.CameraSettings.Builder {
        builderResult = Pogoprotos.Settings.Master.CameraSettings()
        return self
      }
      override public func clone() throws -> Pogoprotos.Settings.Master.CameraSettings.Builder {
        return try Pogoprotos.Settings.Master.CameraSettings.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Settings.Master.CameraSettings {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Settings.Master.CameraSettings {
        let returnMe:Pogoprotos.Settings.Master.CameraSettings = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Settings.Master.CameraSettings) throws -> Pogoprotos.Settings.Master.CameraSettings.Builder {
        if other == Pogoprotos.Settings.Master.CameraSettings() {
         return self
        }
        if other.hasNextCamera {
             nextCamera = other.nextCamera
        }
        if !other.interpolation.isEmpty {
           builderResult.interpolation += other.interpolation
        }
        if !other.targetType.isEmpty {
           builderResult.targetType += other.targetType
        }
        if !other.easeInSpeed.isEmpty {
            builderResult.easeInSpeed += other.easeInSpeed
        }
        if !other.eastOutSpeed.isEmpty {
            builderResult.eastOutSpeed += other.eastOutSpeed
        }
        if !other.durationSeconds.isEmpty {
            builderResult.durationSeconds += other.durationSeconds
        }
        if !other.waitSeconds.isEmpty {
            builderResult.waitSeconds += other.waitSeconds
        }
        if !other.transitionSeconds.isEmpty {
            builderResult.transitionSeconds += other.transitionSeconds
        }
        if !other.angleDegree.isEmpty {
            builderResult.angleDegree += other.angleDegree
        }
        if !other.angleOffsetDegree.isEmpty {
            builderResult.angleOffsetDegree += other.angleOffsetDegree
        }
        if !other.pitchDegree.isEmpty {
            builderResult.pitchDegree += other.pitchDegree
        }
        if !other.pitchOffsetDegree.isEmpty {
            builderResult.pitchOffsetDegree += other.pitchOffsetDegree
        }
        if !other.rollDegree.isEmpty {
            builderResult.rollDegree += other.rollDegree
        }
        if !other.distanceMeters.isEmpty {
            builderResult.distanceMeters += other.distanceMeters
        }
        if !other.heightPercent.isEmpty {
            builderResult.heightPercent += other.heightPercent
        }
        if !other.vertCtrRatio.isEmpty {
            builderResult.vertCtrRatio += other.vertCtrRatio
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.Master.CameraSettings.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.CameraSettings.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10:
            nextCamera = try input.readString()

          case 16:
            let valueIntinterpolation = try input.readEnum()
            if let enumsinterpolation = Pogoprotos.Enums.CameraInterpolation(rawValue:valueIntinterpolation) {
                 builderResult.interpolation += [enumsinterpolation]
            } else {
                 try unknownFieldsBuilder.mergeVarintField(2, value:Int64(valueIntinterpolation))
            }

          case 24:
            let valueInttargetType = try input.readEnum()
            if let enumstargetType = Pogoprotos.Enums.CameraTarget(rawValue:valueInttargetType) {
                 builderResult.targetType += [enumstargetType]
            } else {
                 try unknownFieldsBuilder.mergeVarintField(3, value:Int64(valueInttargetType))
            }

          case 34:
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.easeInSpeed += [try input.readFloat()]
            }
            input.popLimit(limit)

          case 42:
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.eastOutSpeed += [try input.readFloat()]
            }
            input.popLimit(limit)

          case 50:
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.durationSeconds += [try input.readFloat()]
            }
            input.popLimit(limit)

          case 58:
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.waitSeconds += [try input.readFloat()]
            }
            input.popLimit(limit)

          case 66:
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.transitionSeconds += [try input.readFloat()]
            }
            input.popLimit(limit)

          case 74:
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.angleDegree += [try input.readFloat()]
            }
            input.popLimit(limit)

          case 82:
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.angleOffsetDegree += [try input.readFloat()]
            }
            input.popLimit(limit)

          case 90:
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.pitchDegree += [try input.readFloat()]
            }
            input.popLimit(limit)

          case 98:
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.pitchOffsetDegree += [try input.readFloat()]
            }
            input.popLimit(limit)

          case 106:
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.rollDegree += [try input.readFloat()]
            }
            input.popLimit(limit)

          case 114:
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.distanceMeters += [try input.readFloat()]
            }
            input.popLimit(limit)

          case 122:
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.heightPercent += [try input.readFloat()]
            }
            input.popLimit(limit)

          case 130:
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.vertCtrRatio += [try input.readFloat()]
            }
            input.popLimit(limit)

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.Master.CameraSettings.Builder {
        let resultDecodedBuilder = Pogoprotos.Settings.Master.CameraSettings.Builder()
        if let jsonValueNextCamera = jsonMap["nextCamera"] as? String {
          resultDecodedBuilder.nextCamera = jsonValueNextCamera
        }
        if let jsonValueInterpolation = jsonMap["interpolation"] as? Array<String> {
          var jsonArrayInterpolation:Array<Pogoprotos.Enums.CameraInterpolation> = []
          for oneValueInterpolation in jsonValueInterpolation {
            let enumFromStringInterpolation = try Pogoprotos.Enums.CameraInterpolation.fromString(oneValueInterpolation)
            jsonArrayInterpolation += [enumFromStringInterpolation]
          }
          resultDecodedBuilder.interpolation = jsonArrayInterpolation
        }
        if let jsonValueTargetType = jsonMap["targetType"] as? Array<String> {
          var jsonArrayTargetType:Array<Pogoprotos.Enums.CameraTarget> = []
          for oneValueTargetType in jsonValueTargetType {
            let enumFromStringTargetType = try Pogoprotos.Enums.CameraTarget.fromString(oneValueTargetType)
            jsonArrayTargetType += [enumFromStringTargetType]
          }
          resultDecodedBuilder.targetType = jsonArrayTargetType
        }
        if let jsonValueEaseInSpeed = jsonMap["easeInSpeed"] as? Array<NSNumber> {
          var jsonArrayEaseInSpeed:Array<Float> = []
          for oneValueEaseInSpeed in jsonValueEaseInSpeed {
            jsonArrayEaseInSpeed += [oneValueEaseInSpeed.floatValue]
          }
          resultDecodedBuilder.easeInSpeed = jsonArrayEaseInSpeed
        }
        if let jsonValueEastOutSpeed = jsonMap["eastOutSpeed"] as? Array<NSNumber> {
          var jsonArrayEastOutSpeed:Array<Float> = []
          for oneValueEastOutSpeed in jsonValueEastOutSpeed {
            jsonArrayEastOutSpeed += [oneValueEastOutSpeed.floatValue]
          }
          resultDecodedBuilder.eastOutSpeed = jsonArrayEastOutSpeed
        }
        if let jsonValueDurationSeconds = jsonMap["durationSeconds"] as? Array<NSNumber> {
          var jsonArrayDurationSeconds:Array<Float> = []
          for oneValueDurationSeconds in jsonValueDurationSeconds {
            jsonArrayDurationSeconds += [oneValueDurationSeconds.floatValue]
          }
          resultDecodedBuilder.durationSeconds = jsonArrayDurationSeconds
        }
        if let jsonValueWaitSeconds = jsonMap["waitSeconds"] as? Array<NSNumber> {
          var jsonArrayWaitSeconds:Array<Float> = []
          for oneValueWaitSeconds in jsonValueWaitSeconds {
            jsonArrayWaitSeconds += [oneValueWaitSeconds.floatValue]
          }
          resultDecodedBuilder.waitSeconds = jsonArrayWaitSeconds
        }
        if let jsonValueTransitionSeconds = jsonMap["transitionSeconds"] as? Array<NSNumber> {
          var jsonArrayTransitionSeconds:Array<Float> = []
          for oneValueTransitionSeconds in jsonValueTransitionSeconds {
            jsonArrayTransitionSeconds += [oneValueTransitionSeconds.floatValue]
          }
          resultDecodedBuilder.transitionSeconds = jsonArrayTransitionSeconds
        }
        if let jsonValueAngleDegree = jsonMap["angleDegree"] as? Array<NSNumber> {
          var jsonArrayAngleDegree:Array<Float> = []
          for oneValueAngleDegree in jsonValueAngleDegree {
            jsonArrayAngleDegree += [oneValueAngleDegree.floatValue]
          }
          resultDecodedBuilder.angleDegree = jsonArrayAngleDegree
        }
        if let jsonValueAngleOffsetDegree = jsonMap["angleOffsetDegree"] as? Array<NSNumber> {
          var jsonArrayAngleOffsetDegree:Array<Float> = []
          for oneValueAngleOffsetDegree in jsonValueAngleOffsetDegree {
            jsonArrayAngleOffsetDegree += [oneValueAngleOffsetDegree.floatValue]
          }
          resultDecodedBuilder.angleOffsetDegree = jsonArrayAngleOffsetDegree
        }
        if let jsonValuePitchDegree = jsonMap["pitchDegree"] as? Array<NSNumber> {
          var jsonArrayPitchDegree:Array<Float> = []
          for oneValuePitchDegree in jsonValuePitchDegree {
            jsonArrayPitchDegree += [oneValuePitchDegree.floatValue]
          }
          resultDecodedBuilder.pitchDegree = jsonArrayPitchDegree
        }
        if let jsonValuePitchOffsetDegree = jsonMap["pitchOffsetDegree"] as? Array<NSNumber> {
          var jsonArrayPitchOffsetDegree:Array<Float> = []
          for oneValuePitchOffsetDegree in jsonValuePitchOffsetDegree {
            jsonArrayPitchOffsetDegree += [oneValuePitchOffsetDegree.floatValue]
          }
          resultDecodedBuilder.pitchOffsetDegree = jsonArrayPitchOffsetDegree
        }
        if let jsonValueRollDegree = jsonMap["rollDegree"] as? Array<NSNumber> {
          var jsonArrayRollDegree:Array<Float> = []
          for oneValueRollDegree in jsonValueRollDegree {
            jsonArrayRollDegree += [oneValueRollDegree.floatValue]
          }
          resultDecodedBuilder.rollDegree = jsonArrayRollDegree
        }
        if let jsonValueDistanceMeters = jsonMap["distanceMeters"] as? Array<NSNumber> {
          var jsonArrayDistanceMeters:Array<Float> = []
          for oneValueDistanceMeters in jsonValueDistanceMeters {
            jsonArrayDistanceMeters += [oneValueDistanceMeters.floatValue]
          }
          resultDecodedBuilder.distanceMeters = jsonArrayDistanceMeters
        }
        if let jsonValueHeightPercent = jsonMap["heightPercent"] as? Array<NSNumber> {
          var jsonArrayHeightPercent:Array<Float> = []
          for oneValueHeightPercent in jsonValueHeightPercent {
            jsonArrayHeightPercent += [oneValueHeightPercent.floatValue]
          }
          resultDecodedBuilder.heightPercent = jsonArrayHeightPercent
        }
        if let jsonValueVertCtrRatio = jsonMap["vertCtrRatio"] as? Array<NSNumber> {
          var jsonArrayVertCtrRatio:Array<Float> = []
          for oneValueVertCtrRatio in jsonValueVertCtrRatio {
            jsonArrayVertCtrRatio += [oneValueVertCtrRatio.floatValue]
          }
          resultDecodedBuilder.vertCtrRatio = jsonArrayVertCtrRatio
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Settings.Master.CameraSettings.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Settings.Master.CameraSettings.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
