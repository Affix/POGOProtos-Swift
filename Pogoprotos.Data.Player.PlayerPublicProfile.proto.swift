// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "PlayerPublicProfile.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Pogoprotos { public struct Data { public struct Player { }}}

public func == (lhs: Pogoprotos.Data.Player.PlayerPublicProfile, rhs: Pogoprotos.Data.Player.PlayerPublicProfile) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
  fieldCheck = fieldCheck && (lhs.hasLevel == rhs.hasLevel) && (!lhs.hasLevel || lhs.level == rhs.level)
  fieldCheck = fieldCheck && (lhs.hasAvatar == rhs.hasAvatar) && (!lhs.hasAvatar || lhs.avatar == rhs.avatar)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Pogoprotos.Data.Player {
  public struct PlayerPublicProfileRoot {
    public static var sharedInstance : PlayerPublicProfileRoot {
     struct Static {
         static let instance : PlayerPublicProfileRoot = PlayerPublicProfileRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Pogoprotos.Data.Player.PlayerAvatarRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class PlayerPublicProfile : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasName:Bool = false
    public private(set) var name:String = ""

    public private(set) var hasLevel:Bool = false
    public private(set) var level:Int32 = Int32(0)

    public private(set) var hasAvatar:Bool = false
    public private(set) var avatar:Pogoprotos.Data.Player.PlayerAvatar!
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasName {
        try output.writeString(1, value:name)
      }
      if hasLevel {
        try output.writeInt32(2, value:level)
      }
      if hasAvatar {
        try output.writeMessage(3, value:avatar)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasName {
        serialize_size += name.computeStringSize(1)
      }
      if hasLevel {
        serialize_size += level.computeInt32Size(2)
      }
      if hasAvatar {
          if let varSizeavatar = avatar?.computeMessageSize(3) {
              serialize_size += varSizeavatar
          }
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Data.Player.PlayerPublicProfile> {
      var mergedArray = Array<Pogoprotos.Data.Player.PlayerPublicProfile>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Data.Player.PlayerPublicProfile? {
      return try Pogoprotos.Data.Player.PlayerPublicProfile.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Data.Player.PlayerPublicProfile {
      return try Pogoprotos.Data.Player.PlayerPublicProfile.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Data.Player.PlayerPublicProfileRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.Player.PlayerPublicProfile {
      return try Pogoprotos.Data.Player.PlayerPublicProfile.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Data.Player.PlayerPublicProfile {
      return try Pogoprotos.Data.Player.PlayerPublicProfile.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.Player.PlayerPublicProfile {
      return try Pogoprotos.Data.Player.PlayerPublicProfile.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Data.Player.PlayerPublicProfile {
      return try Pogoprotos.Data.Player.PlayerPublicProfile.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.Player.PlayerPublicProfile {
      return try Pogoprotos.Data.Player.PlayerPublicProfile.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Data.Player.PlayerPublicProfile.Builder {
      return Pogoprotos.Data.Player.PlayerPublicProfile.classBuilder() as! Pogoprotos.Data.Player.PlayerPublicProfile.Builder
    }
    public func getBuilder() -> Pogoprotos.Data.Player.PlayerPublicProfile.Builder {
      return classBuilder() as! Pogoprotos.Data.Player.PlayerPublicProfile.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Data.Player.PlayerPublicProfile.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Data.Player.PlayerPublicProfile.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Data.Player.PlayerPublicProfile.Builder {
      return try Pogoprotos.Data.Player.PlayerPublicProfile.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Data.Player.PlayerPublicProfile) throws -> Pogoprotos.Data.Player.PlayerPublicProfile.Builder {
      return try Pogoprotos.Data.Player.PlayerPublicProfile.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasName {
        jsonMap["name"] = name
      }
      if hasLevel {
        jsonMap["level"] = NSNumber(int:level)
      }
      if hasAvatar {
        jsonMap["avatar"] = try avatar.encode()
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Data.Player.PlayerPublicProfile {
      return try Pogoprotos.Data.Player.PlayerPublicProfile.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Data.Player.PlayerPublicProfile {
      return try Pogoprotos.Data.Player.PlayerPublicProfile.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasName {
        output += "\(indent) name: \(name) \n"
      }
      if hasLevel {
        output += "\(indent) level: \(level) \n"
      }
      if hasAvatar {
        output += "\(indent) avatar {\n"
        if let outDescAvatar = avatar {
          output += try outDescAvatar.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasName {
               hashCode = (hashCode &* 31) &+ name.hashValue
            }
            if hasLevel {
               hashCode = (hashCode &* 31) &+ level.hashValue
            }
            if hasAvatar {
                if let hashValueavatar = avatar?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueavatar
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Data.Player.PlayerPublicProfile"
    }
    override public func className() -> String {
        return "Pogoprotos.Data.Player.PlayerPublicProfile"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Data.Player.PlayerPublicProfile.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Data.Player.PlayerPublicProfile = Pogoprotos.Data.Player.PlayerPublicProfile()
      public func getMessage() -> Pogoprotos.Data.Player.PlayerPublicProfile {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasName:Bool {
           get {
                return builderResult.hasName
           }
      }
      public var name:String {
           get {
                return builderResult.name
           }
           set (value) {
               builderResult.hasName = true
               builderResult.name = value
           }
      }
      public func setName(value:String) -> Pogoprotos.Data.Player.PlayerPublicProfile.Builder {
        self.name = value
        return self
      }
      public func clearName() -> Pogoprotos.Data.Player.PlayerPublicProfile.Builder{
           builderResult.hasName = false
           builderResult.name = ""
           return self
      }
      public var hasLevel:Bool {
           get {
                return builderResult.hasLevel
           }
      }
      public var level:Int32 {
           get {
                return builderResult.level
           }
           set (value) {
               builderResult.hasLevel = true
               builderResult.level = value
           }
      }
      public func setLevel(value:Int32) -> Pogoprotos.Data.Player.PlayerPublicProfile.Builder {
        self.level = value
        return self
      }
      public func clearLevel() -> Pogoprotos.Data.Player.PlayerPublicProfile.Builder{
           builderResult.hasLevel = false
           builderResult.level = Int32(0)
           return self
      }
      public var hasAvatar:Bool {
           get {
               return builderResult.hasAvatar
           }
      }
      public var avatar:Pogoprotos.Data.Player.PlayerAvatar! {
           get {
               if avatarBuilder_ != nil {
                  builderResult.avatar = avatarBuilder_.getMessage()
               }
               return builderResult.avatar
           }
           set (value) {
               builderResult.hasAvatar = true
               builderResult.avatar = value
           }
      }
      private var avatarBuilder_:Pogoprotos.Data.Player.PlayerAvatar.Builder! {
           didSet {
              builderResult.hasAvatar = true
           }
      }
      public func getAvatarBuilder() -> Pogoprotos.Data.Player.PlayerAvatar.Builder {
        if avatarBuilder_ == nil {
           avatarBuilder_ = Pogoprotos.Data.Player.PlayerAvatar.Builder()
           builderResult.avatar = avatarBuilder_.getMessage()
           if avatar != nil {
              try! avatarBuilder_.mergeFrom(avatar)
           }
        }
        return avatarBuilder_
      }
      public func setAvatar(value:Pogoprotos.Data.Player.PlayerAvatar!) -> Pogoprotos.Data.Player.PlayerPublicProfile.Builder {
        self.avatar = value
        return self
      }
      public func mergeAvatar(value:Pogoprotos.Data.Player.PlayerAvatar) throws -> Pogoprotos.Data.Player.PlayerPublicProfile.Builder {
        if builderResult.hasAvatar {
          builderResult.avatar = try Pogoprotos.Data.Player.PlayerAvatar.builderWithPrototype(builderResult.avatar).mergeFrom(value).buildPartial()
        } else {
          builderResult.avatar = value
        }
        builderResult.hasAvatar = true
        return self
      }
      public func clearAvatar() -> Pogoprotos.Data.Player.PlayerPublicProfile.Builder {
        avatarBuilder_ = nil
        builderResult.hasAvatar = false
        builderResult.avatar = nil
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Data.Player.PlayerPublicProfile.Builder {
        builderResult = Pogoprotos.Data.Player.PlayerPublicProfile()
        return self
      }
      override public func clone() throws -> Pogoprotos.Data.Player.PlayerPublicProfile.Builder {
        return try Pogoprotos.Data.Player.PlayerPublicProfile.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Data.Player.PlayerPublicProfile {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Data.Player.PlayerPublicProfile {
        let returnMe:Pogoprotos.Data.Player.PlayerPublicProfile = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Data.Player.PlayerPublicProfile) throws -> Pogoprotos.Data.Player.PlayerPublicProfile.Builder {
        if other == Pogoprotos.Data.Player.PlayerPublicProfile() {
         return self
        }
        if other.hasName {
             name = other.name
        }
        if other.hasLevel {
             level = other.level
        }
        if (other.hasAvatar) {
            try mergeAvatar(other.avatar)
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Data.Player.PlayerPublicProfile.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.Player.PlayerPublicProfile.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10:
            name = try input.readString()

          case 16:
            level = try input.readInt32()

          case 26:
            let subBuilder:Pogoprotos.Data.Player.PlayerAvatar.Builder = Pogoprotos.Data.Player.PlayerAvatar.Builder()
            if hasAvatar {
              try subBuilder.mergeFrom(avatar)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            avatar = subBuilder.buildPartial()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Data.Player.PlayerPublicProfile.Builder {
        let resultDecodedBuilder = Pogoprotos.Data.Player.PlayerPublicProfile.Builder()
        if let jsonValueName = jsonMap["name"] as? String {
          resultDecodedBuilder.name = jsonValueName
        }
        if let jsonValueLevel = jsonMap["level"] as? NSNumber {
          resultDecodedBuilder.level = jsonValueLevel.intValue
        }
        if let jsonValueAvatar = jsonMap["avatar"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.avatar = try Pogoprotos.Data.Player.PlayerAvatar.Builder.decodeToBuilder(jsonValueAvatar).build()

        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Data.Player.PlayerPublicProfile.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Data.Player.PlayerPublicProfile.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
