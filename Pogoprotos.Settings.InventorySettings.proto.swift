// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "InventorySettings.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Pogoprotos { public struct Settings { }}

public func == (lhs: Pogoprotos.Settings.InventorySettings, rhs: Pogoprotos.Settings.InventorySettings) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasMaxPokemon == rhs.hasMaxPokemon) && (!lhs.hasMaxPokemon || lhs.maxPokemon == rhs.maxPokemon)
  fieldCheck = fieldCheck && (lhs.hasMaxBagItems == rhs.hasMaxBagItems) && (!lhs.hasMaxBagItems || lhs.maxBagItems == rhs.maxBagItems)
  fieldCheck = fieldCheck && (lhs.hasBasePokemon == rhs.hasBasePokemon) && (!lhs.hasBasePokemon || lhs.basePokemon == rhs.basePokemon)
  fieldCheck = fieldCheck && (lhs.hasBaseBagItems == rhs.hasBaseBagItems) && (!lhs.hasBaseBagItems || lhs.baseBagItems == rhs.baseBagItems)
  fieldCheck = fieldCheck && (lhs.hasBaseEggs == rhs.hasBaseEggs) && (!lhs.hasBaseEggs || lhs.baseEggs == rhs.baseEggs)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Pogoprotos.Settings {
  public struct InventorySettingsRoot {
    public static var sharedInstance : InventorySettingsRoot {
     struct Static {
         static let instance : InventorySettingsRoot = InventorySettingsRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class InventorySettings : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasMaxPokemon:Bool = false
    public private(set) var maxPokemon:Int32 = Int32(0)

    public private(set) var hasMaxBagItems:Bool = false
    public private(set) var maxBagItems:Int32 = Int32(0)

    public private(set) var hasBasePokemon:Bool = false
    public private(set) var basePokemon:Int32 = Int32(0)

    public private(set) var hasBaseBagItems:Bool = false
    public private(set) var baseBagItems:Int32 = Int32(0)

    public private(set) var hasBaseEggs:Bool = false
    public private(set) var baseEggs:Int32 = Int32(0)

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasMaxPokemon {
        try output.writeInt32(1, value:maxPokemon)
      }
      if hasMaxBagItems {
        try output.writeInt32(2, value:maxBagItems)
      }
      if hasBasePokemon {
        try output.writeInt32(3, value:basePokemon)
      }
      if hasBaseBagItems {
        try output.writeInt32(4, value:baseBagItems)
      }
      if hasBaseEggs {
        try output.writeInt32(5, value:baseEggs)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasMaxPokemon {
        serialize_size += maxPokemon.computeInt32Size(1)
      }
      if hasMaxBagItems {
        serialize_size += maxBagItems.computeInt32Size(2)
      }
      if hasBasePokemon {
        serialize_size += basePokemon.computeInt32Size(3)
      }
      if hasBaseBagItems {
        serialize_size += baseBagItems.computeInt32Size(4)
      }
      if hasBaseEggs {
        serialize_size += baseEggs.computeInt32Size(5)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Settings.InventorySettings> {
      var mergedArray = Array<Pogoprotos.Settings.InventorySettings>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.InventorySettings? {
      return try Pogoprotos.Settings.InventorySettings.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Settings.InventorySettings {
      return try Pogoprotos.Settings.InventorySettings.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Settings.InventorySettingsRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.InventorySettings {
      return try Pogoprotos.Settings.InventorySettings.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.InventorySettings {
      return try Pogoprotos.Settings.InventorySettings.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.InventorySettings {
      return try Pogoprotos.Settings.InventorySettings.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.InventorySettings {
      return try Pogoprotos.Settings.InventorySettings.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.InventorySettings {
      return try Pogoprotos.Settings.InventorySettings.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Settings.InventorySettings.Builder {
      return Pogoprotos.Settings.InventorySettings.classBuilder() as! Pogoprotos.Settings.InventorySettings.Builder
    }
    public func getBuilder() -> Pogoprotos.Settings.InventorySettings.Builder {
      return classBuilder() as! Pogoprotos.Settings.InventorySettings.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.InventorySettings.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.InventorySettings.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Settings.InventorySettings.Builder {
      return try Pogoprotos.Settings.InventorySettings.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Settings.InventorySettings) throws -> Pogoprotos.Settings.InventorySettings.Builder {
      return try Pogoprotos.Settings.InventorySettings.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasMaxPokemon {
        jsonMap["maxPokemon"] = NSNumber(int:maxPokemon)
      }
      if hasMaxBagItems {
        jsonMap["maxBagItems"] = NSNumber(int:maxBagItems)
      }
      if hasBasePokemon {
        jsonMap["basePokemon"] = NSNumber(int:basePokemon)
      }
      if hasBaseBagItems {
        jsonMap["baseBagItems"] = NSNumber(int:baseBagItems)
      }
      if hasBaseEggs {
        jsonMap["baseEggs"] = NSNumber(int:baseEggs)
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.InventorySettings {
      return try Pogoprotos.Settings.InventorySettings.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Settings.InventorySettings {
      return try Pogoprotos.Settings.InventorySettings.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasMaxPokemon {
        output += "\(indent) maxPokemon: \(maxPokemon) \n"
      }
      if hasMaxBagItems {
        output += "\(indent) maxBagItems: \(maxBagItems) \n"
      }
      if hasBasePokemon {
        output += "\(indent) basePokemon: \(basePokemon) \n"
      }
      if hasBaseBagItems {
        output += "\(indent) baseBagItems: \(baseBagItems) \n"
      }
      if hasBaseEggs {
        output += "\(indent) baseEggs: \(baseEggs) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasMaxPokemon {
               hashCode = (hashCode &* 31) &+ maxPokemon.hashValue
            }
            if hasMaxBagItems {
               hashCode = (hashCode &* 31) &+ maxBagItems.hashValue
            }
            if hasBasePokemon {
               hashCode = (hashCode &* 31) &+ basePokemon.hashValue
            }
            if hasBaseBagItems {
               hashCode = (hashCode &* 31) &+ baseBagItems.hashValue
            }
            if hasBaseEggs {
               hashCode = (hashCode &* 31) &+ baseEggs.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Settings.InventorySettings"
    }
    override public func className() -> String {
        return "Pogoprotos.Settings.InventorySettings"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Settings.InventorySettings.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Settings.InventorySettings = Pogoprotos.Settings.InventorySettings()
      public func getMessage() -> Pogoprotos.Settings.InventorySettings {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasMaxPokemon:Bool {
           get {
                return builderResult.hasMaxPokemon
           }
      }
      public var maxPokemon:Int32 {
           get {
                return builderResult.maxPokemon
           }
           set (value) {
               builderResult.hasMaxPokemon = true
               builderResult.maxPokemon = value
           }
      }
      public func setMaxPokemon(value:Int32) -> Pogoprotos.Settings.InventorySettings.Builder {
        self.maxPokemon = value
        return self
      }
      public func clearMaxPokemon() -> Pogoprotos.Settings.InventorySettings.Builder{
           builderResult.hasMaxPokemon = false
           builderResult.maxPokemon = Int32(0)
           return self
      }
      public var hasMaxBagItems:Bool {
           get {
                return builderResult.hasMaxBagItems
           }
      }
      public var maxBagItems:Int32 {
           get {
                return builderResult.maxBagItems
           }
           set (value) {
               builderResult.hasMaxBagItems = true
               builderResult.maxBagItems = value
           }
      }
      public func setMaxBagItems(value:Int32) -> Pogoprotos.Settings.InventorySettings.Builder {
        self.maxBagItems = value
        return self
      }
      public func clearMaxBagItems() -> Pogoprotos.Settings.InventorySettings.Builder{
           builderResult.hasMaxBagItems = false
           builderResult.maxBagItems = Int32(0)
           return self
      }
      public var hasBasePokemon:Bool {
           get {
                return builderResult.hasBasePokemon
           }
      }
      public var basePokemon:Int32 {
           get {
                return builderResult.basePokemon
           }
           set (value) {
               builderResult.hasBasePokemon = true
               builderResult.basePokemon = value
           }
      }
      public func setBasePokemon(value:Int32) -> Pogoprotos.Settings.InventorySettings.Builder {
        self.basePokemon = value
        return self
      }
      public func clearBasePokemon() -> Pogoprotos.Settings.InventorySettings.Builder{
           builderResult.hasBasePokemon = false
           builderResult.basePokemon = Int32(0)
           return self
      }
      public var hasBaseBagItems:Bool {
           get {
                return builderResult.hasBaseBagItems
           }
      }
      public var baseBagItems:Int32 {
           get {
                return builderResult.baseBagItems
           }
           set (value) {
               builderResult.hasBaseBagItems = true
               builderResult.baseBagItems = value
           }
      }
      public func setBaseBagItems(value:Int32) -> Pogoprotos.Settings.InventorySettings.Builder {
        self.baseBagItems = value
        return self
      }
      public func clearBaseBagItems() -> Pogoprotos.Settings.InventorySettings.Builder{
           builderResult.hasBaseBagItems = false
           builderResult.baseBagItems = Int32(0)
           return self
      }
      public var hasBaseEggs:Bool {
           get {
                return builderResult.hasBaseEggs
           }
      }
      public var baseEggs:Int32 {
           get {
                return builderResult.baseEggs
           }
           set (value) {
               builderResult.hasBaseEggs = true
               builderResult.baseEggs = value
           }
      }
      public func setBaseEggs(value:Int32) -> Pogoprotos.Settings.InventorySettings.Builder {
        self.baseEggs = value
        return self
      }
      public func clearBaseEggs() -> Pogoprotos.Settings.InventorySettings.Builder{
           builderResult.hasBaseEggs = false
           builderResult.baseEggs = Int32(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Settings.InventorySettings.Builder {
        builderResult = Pogoprotos.Settings.InventorySettings()
        return self
      }
      override public func clone() throws -> Pogoprotos.Settings.InventorySettings.Builder {
        return try Pogoprotos.Settings.InventorySettings.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Settings.InventorySettings {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Settings.InventorySettings {
        let returnMe:Pogoprotos.Settings.InventorySettings = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Settings.InventorySettings) throws -> Pogoprotos.Settings.InventorySettings.Builder {
        if other == Pogoprotos.Settings.InventorySettings() {
         return self
        }
        if other.hasMaxPokemon {
             maxPokemon = other.maxPokemon
        }
        if other.hasMaxBagItems {
             maxBagItems = other.maxBagItems
        }
        if other.hasBasePokemon {
             basePokemon = other.basePokemon
        }
        if other.hasBaseBagItems {
             baseBagItems = other.baseBagItems
        }
        if other.hasBaseEggs {
             baseEggs = other.baseEggs
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.InventorySettings.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.InventorySettings.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            maxPokemon = try input.readInt32()

          case 16:
            maxBagItems = try input.readInt32()

          case 24:
            basePokemon = try input.readInt32()

          case 32:
            baseBagItems = try input.readInt32()

          case 40:
            baseEggs = try input.readInt32()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.InventorySettings.Builder {
        let resultDecodedBuilder = Pogoprotos.Settings.InventorySettings.Builder()
        if let jsonValueMaxPokemon = jsonMap["maxPokemon"] as? NSNumber {
          resultDecodedBuilder.maxPokemon = jsonValueMaxPokemon.intValue
        }
        if let jsonValueMaxBagItems = jsonMap["maxBagItems"] as? NSNumber {
          resultDecodedBuilder.maxBagItems = jsonValueMaxBagItems.intValue
        }
        if let jsonValueBasePokemon = jsonMap["basePokemon"] as? NSNumber {
          resultDecodedBuilder.basePokemon = jsonValueBasePokemon.intValue
        }
        if let jsonValueBaseBagItems = jsonMap["baseBagItems"] as? NSNumber {
          resultDecodedBuilder.baseBagItems = jsonValueBaseBagItems.intValue
        }
        if let jsonValueBaseEggs = jsonMap["baseEggs"] as? NSNumber {
          resultDecodedBuilder.baseEggs = jsonValueBaseEggs.intValue
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Settings.InventorySettings.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Settings.InventorySettings.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
