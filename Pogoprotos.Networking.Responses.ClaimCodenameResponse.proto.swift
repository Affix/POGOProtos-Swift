// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "ClaimCodenameResponse.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Pogoprotos { public struct Networking { public struct Responses { }}}

public func == (lhs: Pogoprotos.Networking.Responses.ClaimCodenameResponse, rhs: Pogoprotos.Networking.Responses.ClaimCodenameResponse) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasCodename == rhs.hasCodename) && (!lhs.hasCodename || lhs.codename == rhs.codename)
  fieldCheck = fieldCheck && (lhs.hasUserMessage == rhs.hasUserMessage) && (!lhs.hasUserMessage || lhs.userMessage == rhs.userMessage)
  fieldCheck = fieldCheck && (lhs.hasIsAssignable == rhs.hasIsAssignable) && (!lhs.hasIsAssignable || lhs.isAssignable == rhs.isAssignable)
  fieldCheck = fieldCheck && (lhs.hasStatus == rhs.hasStatus) && (!lhs.hasStatus || lhs.status == rhs.status)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Pogoprotos.Networking.Responses {
  public struct ClaimCodenameResponseRoot {
    public static var sharedInstance : ClaimCodenameResponseRoot {
     struct Static {
         static let instance : ClaimCodenameResponseRoot = ClaimCodenameResponseRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  // TODO: Might be incorrect, please test.
  final public class ClaimCodenameResponse : GeneratedMessage, GeneratedMessageProtocol {


      //Enum type declaration start 

      public enum Status:Int32, CustomDebugStringConvertible, CustomStringConvertible {
        case Unset = 0
        case Success = 1
        case CodenameNotAvailable = 2
        case CodenameNotValid = 3
        case CurrentOwner = 4
        case CodenameChangeNotAllowed = 5
        public func toString() -> String {
          switch self {
          case .Unset: return "UNSET"
          case .Success: return "SUCCESS"
          case .CodenameNotAvailable: return "CODENAME_NOT_AVAILABLE"
          case .CodenameNotValid: return "CODENAME_NOT_VALID"
          case .CurrentOwner: return "CURRENT_OWNER"
          case .CodenameChangeNotAllowed: return "CODENAME_CHANGE_NOT_ALLOWED"
          }
        }
        public static func fromString(str:String) throws -> Pogoprotos.Networking.Responses.ClaimCodenameResponse.Status {
          switch str {
          case "UNSET":  return .Unset
          case "SUCCESS":  return .Success
          case "CODENAME_NOT_AVAILABLE":  return .CodenameNotAvailable
          case "CODENAME_NOT_VALID":  return .CodenameNotValid
          case "CURRENT_OWNER":  return .CurrentOwner
          case "CODENAME_CHANGE_NOT_ALLOWED":  return .CodenameChangeNotAllowed
          default: throw ProtocolBuffersError.InvalidProtocolBuffer("Conversion String to Enum has failed.")
          }
        }
        public var debugDescription:String { return getDescription() }
        public var description:String { return getDescription() }
        private func getDescription() -> String { 
            switch self {
                case .Unset: return ".Unset"
                case .Success: return ".Success"
                case .CodenameNotAvailable: return ".CodenameNotAvailable"
                case .CodenameNotValid: return ".CodenameNotValid"
                case .CurrentOwner: return ".CurrentOwner"
                case .CodenameChangeNotAllowed: return ".CodenameChangeNotAllowed"
            }
        }
      }

      //Enum type declaration end 

    public private(set) var hasCodename:Bool = false
    public private(set) var codename:String = ""

    public private(set) var hasUserMessage:Bool = false
    public private(set) var userMessage:String = ""

    public private(set) var hasIsAssignable:Bool = false
    public private(set) var isAssignable:Bool = false

    public private(set) var status:Pogoprotos.Networking.Responses.ClaimCodenameResponse.Status = Pogoprotos.Networking.Responses.ClaimCodenameResponse.Status.Unset
    public private(set) var hasStatus:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasCodename {
        try output.writeString(1, value:codename)
      }
      if hasUserMessage {
        try output.writeString(2, value:userMessage)
      }
      if hasIsAssignable {
        try output.writeBool(3, value:isAssignable)
      }
      if hasStatus {
        try output.writeEnum(4, value:status.rawValue)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasCodename {
        serialize_size += codename.computeStringSize(1)
      }
      if hasUserMessage {
        serialize_size += userMessage.computeStringSize(2)
      }
      if hasIsAssignable {
        serialize_size += isAssignable.computeBoolSize(3)
      }
      if (hasStatus) {
        serialize_size += status.rawValue.computeEnumSize(4)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Networking.Responses.ClaimCodenameResponse> {
      var mergedArray = Array<Pogoprotos.Networking.Responses.ClaimCodenameResponse>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Responses.ClaimCodenameResponse? {
      return try Pogoprotos.Networking.Responses.ClaimCodenameResponse.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Networking.Responses.ClaimCodenameResponse {
      return try Pogoprotos.Networking.Responses.ClaimCodenameResponse.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Networking.Responses.ClaimCodenameResponseRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Responses.ClaimCodenameResponse {
      return try Pogoprotos.Networking.Responses.ClaimCodenameResponse.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Responses.ClaimCodenameResponse {
      return try Pogoprotos.Networking.Responses.ClaimCodenameResponse.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Responses.ClaimCodenameResponse {
      return try Pogoprotos.Networking.Responses.ClaimCodenameResponse.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Responses.ClaimCodenameResponse {
      return try Pogoprotos.Networking.Responses.ClaimCodenameResponse.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Responses.ClaimCodenameResponse {
      return try Pogoprotos.Networking.Responses.ClaimCodenameResponse.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Networking.Responses.ClaimCodenameResponse.Builder {
      return Pogoprotos.Networking.Responses.ClaimCodenameResponse.classBuilder() as! Pogoprotos.Networking.Responses.ClaimCodenameResponse.Builder
    }
    public func getBuilder() -> Pogoprotos.Networking.Responses.ClaimCodenameResponse.Builder {
      return classBuilder() as! Pogoprotos.Networking.Responses.ClaimCodenameResponse.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Networking.Responses.ClaimCodenameResponse.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Networking.Responses.ClaimCodenameResponse.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Networking.Responses.ClaimCodenameResponse.Builder {
      return try Pogoprotos.Networking.Responses.ClaimCodenameResponse.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Networking.Responses.ClaimCodenameResponse) throws -> Pogoprotos.Networking.Responses.ClaimCodenameResponse.Builder {
      return try Pogoprotos.Networking.Responses.ClaimCodenameResponse.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasCodename {
        jsonMap["codename"] = codename
      }
      if hasUserMessage {
        jsonMap["userMessage"] = userMessage
      }
      if hasIsAssignable {
        jsonMap["isAssignable"] = isAssignable
      }
      if hasStatus {
        jsonMap["status"] = status.toString()
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Responses.ClaimCodenameResponse {
      return try Pogoprotos.Networking.Responses.ClaimCodenameResponse.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Networking.Responses.ClaimCodenameResponse {
      return try Pogoprotos.Networking.Responses.ClaimCodenameResponse.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasCodename {
        output += "\(indent) codename: \(codename) \n"
      }
      if hasUserMessage {
        output += "\(indent) userMessage: \(userMessage) \n"
      }
      if hasIsAssignable {
        output += "\(indent) isAssignable: \(isAssignable) \n"
      }
      if (hasStatus) {
        output += "\(indent) status: \(status.description)\n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasCodename {
               hashCode = (hashCode &* 31) &+ codename.hashValue
            }
            if hasUserMessage {
               hashCode = (hashCode &* 31) &+ userMessage.hashValue
            }
            if hasIsAssignable {
               hashCode = (hashCode &* 31) &+ isAssignable.hashValue
            }
            if hasStatus {
               hashCode = (hashCode &* 31) &+ Int(status.rawValue)
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Networking.Responses.ClaimCodenameResponse"
    }
    override public func className() -> String {
        return "Pogoprotos.Networking.Responses.ClaimCodenameResponse"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Networking.Responses.ClaimCodenameResponse.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Networking.Responses.ClaimCodenameResponse = Pogoprotos.Networking.Responses.ClaimCodenameResponse()
      public func getMessage() -> Pogoprotos.Networking.Responses.ClaimCodenameResponse {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasCodename:Bool {
           get {
                return builderResult.hasCodename
           }
      }
      public var codename:String {
           get {
                return builderResult.codename
           }
           set (value) {
               builderResult.hasCodename = true
               builderResult.codename = value
           }
      }
      public func setCodename(value:String) -> Pogoprotos.Networking.Responses.ClaimCodenameResponse.Builder {
        self.codename = value
        return self
      }
      public func clearCodename() -> Pogoprotos.Networking.Responses.ClaimCodenameResponse.Builder{
           builderResult.hasCodename = false
           builderResult.codename = ""
           return self
      }
      public var hasUserMessage:Bool {
           get {
                return builderResult.hasUserMessage
           }
      }
      public var userMessage:String {
           get {
                return builderResult.userMessage
           }
           set (value) {
               builderResult.hasUserMessage = true
               builderResult.userMessage = value
           }
      }
      public func setUserMessage(value:String) -> Pogoprotos.Networking.Responses.ClaimCodenameResponse.Builder {
        self.userMessage = value
        return self
      }
      public func clearUserMessage() -> Pogoprotos.Networking.Responses.ClaimCodenameResponse.Builder{
           builderResult.hasUserMessage = false
           builderResult.userMessage = ""
           return self
      }
      public var hasIsAssignable:Bool {
           get {
                return builderResult.hasIsAssignable
           }
      }
      public var isAssignable:Bool {
           get {
                return builderResult.isAssignable
           }
           set (value) {
               builderResult.hasIsAssignable = true
               builderResult.isAssignable = value
           }
      }
      public func setIsAssignable(value:Bool) -> Pogoprotos.Networking.Responses.ClaimCodenameResponse.Builder {
        self.isAssignable = value
        return self
      }
      public func clearIsAssignable() -> Pogoprotos.Networking.Responses.ClaimCodenameResponse.Builder{
           builderResult.hasIsAssignable = false
           builderResult.isAssignable = false
           return self
      }
        public var hasStatus:Bool{
            get {
                return builderResult.hasStatus
            }
        }
        public var status:Pogoprotos.Networking.Responses.ClaimCodenameResponse.Status {
            get {
                return builderResult.status
            }
            set (value) {
                builderResult.hasStatus = true
                builderResult.status = value
            }
        }
        public func setStatus(value:Pogoprotos.Networking.Responses.ClaimCodenameResponse.Status) -> Pogoprotos.Networking.Responses.ClaimCodenameResponse.Builder {
          self.status = value
          return self
        }
        public func clearStatus() -> Pogoprotos.Networking.Responses.ClaimCodenameResponse.Builder {
           builderResult.hasStatus = false
           builderResult.status = .Unset
           return self
        }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Networking.Responses.ClaimCodenameResponse.Builder {
        builderResult = Pogoprotos.Networking.Responses.ClaimCodenameResponse()
        return self
      }
      override public func clone() throws -> Pogoprotos.Networking.Responses.ClaimCodenameResponse.Builder {
        return try Pogoprotos.Networking.Responses.ClaimCodenameResponse.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Networking.Responses.ClaimCodenameResponse {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Networking.Responses.ClaimCodenameResponse {
        let returnMe:Pogoprotos.Networking.Responses.ClaimCodenameResponse = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Networking.Responses.ClaimCodenameResponse) throws -> Pogoprotos.Networking.Responses.ClaimCodenameResponse.Builder {
        if other == Pogoprotos.Networking.Responses.ClaimCodenameResponse() {
         return self
        }
        if other.hasCodename {
             codename = other.codename
        }
        if other.hasUserMessage {
             userMessage = other.userMessage
        }
        if other.hasIsAssignable {
             isAssignable = other.isAssignable
        }
        if other.hasStatus {
             status = other.status
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Responses.ClaimCodenameResponse.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Responses.ClaimCodenameResponse.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10:
            codename = try input.readString()

          case 18:
            userMessage = try input.readString()

          case 24:
            isAssignable = try input.readBool()

          case 32:
            let valueIntstatus = try input.readEnum()
            if let enumsstatus = Pogoprotos.Networking.Responses.ClaimCodenameResponse.Status(rawValue:valueIntstatus){
                 status = enumsstatus
            } else {
                 try unknownFieldsBuilder.mergeVarintField(4, value:Int64(valueIntstatus))
            }

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Responses.ClaimCodenameResponse.Builder {
        let resultDecodedBuilder = Pogoprotos.Networking.Responses.ClaimCodenameResponse.Builder()
        if let jsonValueCodename = jsonMap["codename"] as? String {
          resultDecodedBuilder.codename = jsonValueCodename
        }
        if let jsonValueUserMessage = jsonMap["userMessage"] as? String {
          resultDecodedBuilder.userMessage = jsonValueUserMessage
        }
        if let jsonValueIsAssignable = jsonMap["isAssignable"] as? Bool {
          resultDecodedBuilder.isAssignable = jsonValueIsAssignable
        }
        if let jsonValueStatus = jsonMap["status"] as? String {
          resultDecodedBuilder.status = try Pogoprotos.Networking.Responses.ClaimCodenameResponse.Status.fromString(jsonValueStatus)
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Networking.Responses.ClaimCodenameResponse.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Networking.Responses.ClaimCodenameResponse.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
