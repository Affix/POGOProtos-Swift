// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "TypeEffectiveSettings.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Pogoprotos { public struct Settings { public struct Master { }}}

public func == (lhs: Pogoprotos.Settings.Master.TypeEffectiveSettings, rhs: Pogoprotos.Settings.Master.TypeEffectiveSettings) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.attackScalar == rhs.attackScalar)
  fieldCheck = fieldCheck && (lhs.hasAttackType == rhs.hasAttackType) && (!lhs.hasAttackType || lhs.attackType == rhs.attackType)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Pogoprotos.Settings.Master {
  public struct TypeEffectiveSettingsRoot {
    public static var sharedInstance : TypeEffectiveSettingsRoot {
     struct Static {
         static let instance : TypeEffectiveSettingsRoot = TypeEffectiveSettingsRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Pogoprotos.Enums.PokemonTypeRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class TypeEffectiveSettings : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var attackScalar:Array<Float> = Array<Float>()
    private var attackScalarMemoizedSerializedSize:Int32 = -1
    public private(set) var attackType:Pogoprotos.Enums.PokemonType = Pogoprotos.Enums.PokemonType.PokemonTypeNone
    public private(set) var hasAttackType:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if !attackScalar.isEmpty {
        try output.writeRawVarint32(10)
        try output.writeRawVarint32(attackScalarMemoizedSerializedSize)
        for oneValueattackScalar in attackScalar {
          try output.writeFloatNoTag(oneValueattackScalar)
        }
      }
      if hasAttackType {
        try output.writeEnum(2, value:attackType.rawValue)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      var dataSizeAttackScalar:Int32 = 0
      dataSizeAttackScalar = 4 * Int32(attackScalar.count)
      serialize_size += dataSizeAttackScalar
      if !attackScalar.isEmpty {
        serialize_size += 1
        serialize_size += dataSizeAttackScalar.computeInt32SizeNoTag()
      }
      attackScalarMemoizedSerializedSize = dataSizeAttackScalar
      if (hasAttackType) {
        serialize_size += attackType.rawValue.computeEnumSize(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Settings.Master.TypeEffectiveSettings> {
      var mergedArray = Array<Pogoprotos.Settings.Master.TypeEffectiveSettings>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.Master.TypeEffectiveSettings? {
      return try Pogoprotos.Settings.Master.TypeEffectiveSettings.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Settings.Master.TypeEffectiveSettings {
      return try Pogoprotos.Settings.Master.TypeEffectiveSettings.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Settings.Master.TypeEffectiveSettingsRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.TypeEffectiveSettings {
      return try Pogoprotos.Settings.Master.TypeEffectiveSettings.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.Master.TypeEffectiveSettings {
      return try Pogoprotos.Settings.Master.TypeEffectiveSettings.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.TypeEffectiveSettings {
      return try Pogoprotos.Settings.Master.TypeEffectiveSettings.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.Master.TypeEffectiveSettings {
      return try Pogoprotos.Settings.Master.TypeEffectiveSettings.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.TypeEffectiveSettings {
      return try Pogoprotos.Settings.Master.TypeEffectiveSettings.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Settings.Master.TypeEffectiveSettings.Builder {
      return Pogoprotos.Settings.Master.TypeEffectiveSettings.classBuilder() as! Pogoprotos.Settings.Master.TypeEffectiveSettings.Builder
    }
    public func getBuilder() -> Pogoprotos.Settings.Master.TypeEffectiveSettings.Builder {
      return classBuilder() as! Pogoprotos.Settings.Master.TypeEffectiveSettings.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.Master.TypeEffectiveSettings.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.Master.TypeEffectiveSettings.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Settings.Master.TypeEffectiveSettings.Builder {
      return try Pogoprotos.Settings.Master.TypeEffectiveSettings.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Settings.Master.TypeEffectiveSettings) throws -> Pogoprotos.Settings.Master.TypeEffectiveSettings.Builder {
      return try Pogoprotos.Settings.Master.TypeEffectiveSettings.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if !attackScalar.isEmpty {
        var jsonArrayAttackScalar:Array<NSNumber> = []
          for oneValueAttackScalar in attackScalar {
            jsonArrayAttackScalar += [NSNumber(float:oneValueAttackScalar)]
          }
        jsonMap["attackScalar"] = jsonArrayAttackScalar
      }
      if hasAttackType {
        jsonMap["attackType"] = attackType.toString()
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.Master.TypeEffectiveSettings {
      return try Pogoprotos.Settings.Master.TypeEffectiveSettings.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Settings.Master.TypeEffectiveSettings {
      return try Pogoprotos.Settings.Master.TypeEffectiveSettings.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      var attackScalarElementIndex:Int = 0
      for oneValueAttackScalar in attackScalar  {
          output += "\(indent) attackScalar[\(attackScalarElementIndex)]: \(oneValueAttackScalar)\n"
          attackScalarElementIndex += 1
      }
      if (hasAttackType) {
        output += "\(indent) attackType: \(attackType.description)\n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            for oneValueAttackScalar in attackScalar {
                hashCode = (hashCode &* 31) &+ oneValueAttackScalar.hashValue
            }
            if hasAttackType {
               hashCode = (hashCode &* 31) &+ Int(attackType.rawValue)
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Settings.Master.TypeEffectiveSettings"
    }
    override public func className() -> String {
        return "Pogoprotos.Settings.Master.TypeEffectiveSettings"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Settings.Master.TypeEffectiveSettings.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Settings.Master.TypeEffectiveSettings = Pogoprotos.Settings.Master.TypeEffectiveSettings()
      public func getMessage() -> Pogoprotos.Settings.Master.TypeEffectiveSettings {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var attackScalar:Array<Float> {
           get {
               return builderResult.attackScalar
           }
           set (array) {
               builderResult.attackScalar = array
           }
      }
      public func setAttackScalar(value:Array<Float>) -> Pogoprotos.Settings.Master.TypeEffectiveSettings.Builder {
        self.attackScalar = value
        return self
      }
      public func clearAttackScalar() -> Pogoprotos.Settings.Master.TypeEffectiveSettings.Builder {
         builderResult.attackScalar.removeAll(keepCapacity: false)
         return self
      }
        public var hasAttackType:Bool{
            get {
                return builderResult.hasAttackType
            }
        }
        public var attackType:Pogoprotos.Enums.PokemonType {
            get {
                return builderResult.attackType
            }
            set (value) {
                builderResult.hasAttackType = true
                builderResult.attackType = value
            }
        }
        public func setAttackType(value:Pogoprotos.Enums.PokemonType) -> Pogoprotos.Settings.Master.TypeEffectiveSettings.Builder {
          self.attackType = value
          return self
        }
        public func clearAttackType() -> Pogoprotos.Settings.Master.TypeEffectiveSettings.Builder {
           builderResult.hasAttackType = false
           builderResult.attackType = .PokemonTypeNone
           return self
        }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Settings.Master.TypeEffectiveSettings.Builder {
        builderResult = Pogoprotos.Settings.Master.TypeEffectiveSettings()
        return self
      }
      override public func clone() throws -> Pogoprotos.Settings.Master.TypeEffectiveSettings.Builder {
        return try Pogoprotos.Settings.Master.TypeEffectiveSettings.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Settings.Master.TypeEffectiveSettings {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Settings.Master.TypeEffectiveSettings {
        let returnMe:Pogoprotos.Settings.Master.TypeEffectiveSettings = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Settings.Master.TypeEffectiveSettings) throws -> Pogoprotos.Settings.Master.TypeEffectiveSettings.Builder {
        if other == Pogoprotos.Settings.Master.TypeEffectiveSettings() {
         return self
        }
        if !other.attackScalar.isEmpty {
            builderResult.attackScalar += other.attackScalar
        }
        if other.hasAttackType {
             attackType = other.attackType
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.Master.TypeEffectiveSettings.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.TypeEffectiveSettings.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10:
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.attackScalar += [try input.readFloat()]
            }
            input.popLimit(limit)

          case 16:
            let valueIntattackType = try input.readEnum()
            if let enumsattackType = Pogoprotos.Enums.PokemonType(rawValue:valueIntattackType){
                 attackType = enumsattackType
            } else {
                 try unknownFieldsBuilder.mergeVarintField(2, value:Int64(valueIntattackType))
            }

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.Master.TypeEffectiveSettings.Builder {
        let resultDecodedBuilder = Pogoprotos.Settings.Master.TypeEffectiveSettings.Builder()
        if let jsonValueAttackScalar = jsonMap["attackScalar"] as? Array<NSNumber> {
          var jsonArrayAttackScalar:Array<Float> = []
          for oneValueAttackScalar in jsonValueAttackScalar {
            jsonArrayAttackScalar += [oneValueAttackScalar.floatValue]
          }
          resultDecodedBuilder.attackScalar = jsonArrayAttackScalar
        }
        if let jsonValueAttackType = jsonMap["attackType"] as? String {
          resultDecodedBuilder.attackType = try Pogoprotos.Enums.PokemonType.fromString(jsonValueAttackType)
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Settings.Master.TypeEffectiveSettings.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Settings.Master.TypeEffectiveSettings.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
