// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "Platform.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Pogoprotos { public struct Enums { }}

public extension Pogoprotos.Enums {
  public struct PlatformRoot {
    public static var sharedInstance : PlatformRoot {
     struct Static {
         static let instance : PlatformRoot = PlatformRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }



  //Enum type declaration start 

  public enum Platform:Int32, CustomDebugStringConvertible, CustomStringConvertible {
    case Unset = 0
    case Ios = 1
    case Android = 2
    case Osx = 3
    case Windows = 4
    public func toString() -> String {
      switch self {
      case .Unset: return "UNSET"
      case .Ios: return "IOS"
      case .Android: return "ANDROID"
      case .Osx: return "OSX"
      case .Windows: return "WINDOWS"
      }
    }
    public static func fromString(str:String) throws -> Pogoprotos.Enums.Platform {
      switch str {
      case "UNSET":  return .Unset
      case "IOS":  return .Ios
      case "ANDROID":  return .Android
      case "OSX":  return .Osx
      case "WINDOWS":  return .Windows
      default: throw ProtocolBuffersError.InvalidProtocolBuffer("Conversion String to Enum has failed.")
      }
    }
    public var debugDescription:String { return getDescription() }
    public var description:String { return getDescription() }
    private func getDescription() -> String { 
        switch self {
            case .Unset: return ".Unset"
            case .Ios: return ".Ios"
            case .Android: return ".Android"
            case .Osx: return ".Osx"
            case .Windows: return ".Windows"
        }
    }
  }

  //Enum type declaration end 

}

// @@protoc_insertion_point(global_scope)
