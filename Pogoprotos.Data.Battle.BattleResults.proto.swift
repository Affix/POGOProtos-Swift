// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "BattleResults.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Pogoprotos { public struct Data { public struct Battle { }}}

public func == (lhs: Pogoprotos.Data.Battle.BattleResults, rhs: Pogoprotos.Data.Battle.BattleResults) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasGymState == rhs.hasGymState) && (!lhs.hasGymState || lhs.gymState == rhs.gymState)
  fieldCheck = fieldCheck && (lhs.attackers == rhs.attackers)
  fieldCheck = fieldCheck && (lhs.playerExperienceAwarded == rhs.playerExperienceAwarded)
  fieldCheck = fieldCheck && (lhs.hasNextDefenderPokemonId == rhs.hasNextDefenderPokemonId) && (!lhs.hasNextDefenderPokemonId || lhs.nextDefenderPokemonId == rhs.nextDefenderPokemonId)
  fieldCheck = fieldCheck && (lhs.hasGymPointsDelta == rhs.hasGymPointsDelta) && (!lhs.hasGymPointsDelta || lhs.gymPointsDelta == rhs.gymPointsDelta)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Pogoprotos.Data.Battle {
  public struct BattleResultsRoot {
    public static var sharedInstance : BattleResultsRoot {
     struct Static {
         static let instance : BattleResultsRoot = BattleResultsRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Pogoprotos.Data.Gym.GymStateRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Data.Battle.BattleParticipantRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class BattleResults : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasGymState:Bool = false
    public private(set) var gymState:Pogoprotos.Data.Gym.GymState!
    public private(set) var attackers:Array<Pogoprotos.Data.Battle.BattleParticipant>  = Array<Pogoprotos.Data.Battle.BattleParticipant>()
    public private(set) var playerExperienceAwarded:Array<Int32> = Array<Int32>()
    private var playerExperienceAwardedMemoizedSerializedSize:Int32 = -1
    public private(set) var hasNextDefenderPokemonId:Bool = false
    public private(set) var nextDefenderPokemonId:Int64 = Int64(0)

    public private(set) var hasGymPointsDelta:Bool = false
    public private(set) var gymPointsDelta:Int32 = Int32(0)

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasGymState {
        try output.writeMessage(1, value:gymState)
      }
      for oneElementAttackers in attackers {
          try output.writeMessage(2, value:oneElementAttackers)
      }
      if !playerExperienceAwarded.isEmpty {
        try output.writeRawVarint32(26)
        try output.writeRawVarint32(playerExperienceAwardedMemoizedSerializedSize)
        for oneValueplayerExperienceAwarded in playerExperienceAwarded {
          try output.writeInt32NoTag(oneValueplayerExperienceAwarded)
        }
      }
      if hasNextDefenderPokemonId {
        try output.writeInt64(4, value:nextDefenderPokemonId)
      }
      if hasGymPointsDelta {
        try output.writeInt32(5, value:gymPointsDelta)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasGymState {
          if let varSizegymState = gymState?.computeMessageSize(1) {
              serialize_size += varSizegymState
          }
      }
      for oneElementAttackers in attackers {
          serialize_size += oneElementAttackers.computeMessageSize(2)
      }
      var dataSizePlayerExperienceAwarded:Int32 = 0
      for oneValueplayerExperienceAwarded in playerExperienceAwarded {
          dataSizePlayerExperienceAwarded += oneValueplayerExperienceAwarded.computeInt32SizeNoTag()
      }
      serialize_size += dataSizePlayerExperienceAwarded
      if !playerExperienceAwarded.isEmpty {
        serialize_size += 1
        serialize_size += dataSizePlayerExperienceAwarded.computeInt32SizeNoTag()
      }
      playerExperienceAwardedMemoizedSerializedSize = dataSizePlayerExperienceAwarded
      if hasNextDefenderPokemonId {
        serialize_size += nextDefenderPokemonId.computeInt64Size(4)
      }
      if hasGymPointsDelta {
        serialize_size += gymPointsDelta.computeInt32Size(5)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Data.Battle.BattleResults> {
      var mergedArray = Array<Pogoprotos.Data.Battle.BattleResults>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Data.Battle.BattleResults? {
      return try Pogoprotos.Data.Battle.BattleResults.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Data.Battle.BattleResults {
      return try Pogoprotos.Data.Battle.BattleResults.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Data.Battle.BattleResultsRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.Battle.BattleResults {
      return try Pogoprotos.Data.Battle.BattleResults.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Data.Battle.BattleResults {
      return try Pogoprotos.Data.Battle.BattleResults.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.Battle.BattleResults {
      return try Pogoprotos.Data.Battle.BattleResults.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Data.Battle.BattleResults {
      return try Pogoprotos.Data.Battle.BattleResults.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.Battle.BattleResults {
      return try Pogoprotos.Data.Battle.BattleResults.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Data.Battle.BattleResults.Builder {
      return Pogoprotos.Data.Battle.BattleResults.classBuilder() as! Pogoprotos.Data.Battle.BattleResults.Builder
    }
    public func getBuilder() -> Pogoprotos.Data.Battle.BattleResults.Builder {
      return classBuilder() as! Pogoprotos.Data.Battle.BattleResults.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Data.Battle.BattleResults.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Data.Battle.BattleResults.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Data.Battle.BattleResults.Builder {
      return try Pogoprotos.Data.Battle.BattleResults.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Data.Battle.BattleResults) throws -> Pogoprotos.Data.Battle.BattleResults.Builder {
      return try Pogoprotos.Data.Battle.BattleResults.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasGymState {
        jsonMap["gymState"] = try gymState.encode()
      }
      if !attackers.isEmpty {
        var jsonArrayAttackers:Array<Dictionary<String,AnyObject>> = []
          for oneValueAttackers in attackers {
            let ecodedMessageAttackers = try oneValueAttackers.encode()
            jsonArrayAttackers += [ecodedMessageAttackers]
          }
        jsonMap["attackers"] = jsonArrayAttackers
      }
      if !playerExperienceAwarded.isEmpty {
        var jsonArrayPlayerExperienceAwarded:Array<NSNumber> = []
          for oneValuePlayerExperienceAwarded in playerExperienceAwarded {
            jsonArrayPlayerExperienceAwarded += [NSNumber(int:oneValuePlayerExperienceAwarded)]
          }
        jsonMap["playerExperienceAwarded"] = jsonArrayPlayerExperienceAwarded
      }
      if hasNextDefenderPokemonId {
        jsonMap["nextDefenderPokemonId"] = "\(nextDefenderPokemonId)"
      }
      if hasGymPointsDelta {
        jsonMap["gymPointsDelta"] = NSNumber(int:gymPointsDelta)
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Data.Battle.BattleResults {
      return try Pogoprotos.Data.Battle.BattleResults.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Data.Battle.BattleResults {
      return try Pogoprotos.Data.Battle.BattleResults.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasGymState {
        output += "\(indent) gymState {\n"
        if let outDescGymState = gymState {
          output += try outDescGymState.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      var attackersElementIndex:Int = 0
      for oneElementAttackers in attackers {
          output += "\(indent) attackers[\(attackersElementIndex)] {\n"
          output += try oneElementAttackers.getDescription("\(indent)  ")
          output += "\(indent)}\n"
          attackersElementIndex += 1
      }
      var playerExperienceAwardedElementIndex:Int = 0
      for oneValuePlayerExperienceAwarded in playerExperienceAwarded  {
          output += "\(indent) playerExperienceAwarded[\(playerExperienceAwardedElementIndex)]: \(oneValuePlayerExperienceAwarded)\n"
          playerExperienceAwardedElementIndex += 1
      }
      if hasNextDefenderPokemonId {
        output += "\(indent) nextDefenderPokemonId: \(nextDefenderPokemonId) \n"
      }
      if hasGymPointsDelta {
        output += "\(indent) gymPointsDelta: \(gymPointsDelta) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasGymState {
                if let hashValuegymState = gymState?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuegymState
                }
            }
            for oneElementAttackers in attackers {
                hashCode = (hashCode &* 31) &+ oneElementAttackers.hashValue
            }
            for oneValuePlayerExperienceAwarded in playerExperienceAwarded {
                hashCode = (hashCode &* 31) &+ oneValuePlayerExperienceAwarded.hashValue
            }
            if hasNextDefenderPokemonId {
               hashCode = (hashCode &* 31) &+ nextDefenderPokemonId.hashValue
            }
            if hasGymPointsDelta {
               hashCode = (hashCode &* 31) &+ gymPointsDelta.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Data.Battle.BattleResults"
    }
    override public func className() -> String {
        return "Pogoprotos.Data.Battle.BattleResults"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Data.Battle.BattleResults.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Data.Battle.BattleResults = Pogoprotos.Data.Battle.BattleResults()
      public func getMessage() -> Pogoprotos.Data.Battle.BattleResults {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasGymState:Bool {
           get {
               return builderResult.hasGymState
           }
      }
      public var gymState:Pogoprotos.Data.Gym.GymState! {
           get {
               if gymStateBuilder_ != nil {
                  builderResult.gymState = gymStateBuilder_.getMessage()
               }
               return builderResult.gymState
           }
           set (value) {
               builderResult.hasGymState = true
               builderResult.gymState = value
           }
      }
      private var gymStateBuilder_:Pogoprotos.Data.Gym.GymState.Builder! {
           didSet {
              builderResult.hasGymState = true
           }
      }
      public func getGymStateBuilder() -> Pogoprotos.Data.Gym.GymState.Builder {
        if gymStateBuilder_ == nil {
           gymStateBuilder_ = Pogoprotos.Data.Gym.GymState.Builder()
           builderResult.gymState = gymStateBuilder_.getMessage()
           if gymState != nil {
              try! gymStateBuilder_.mergeFrom(gymState)
           }
        }
        return gymStateBuilder_
      }
      public func setGymState(value:Pogoprotos.Data.Gym.GymState!) -> Pogoprotos.Data.Battle.BattleResults.Builder {
        self.gymState = value
        return self
      }
      public func mergeGymState(value:Pogoprotos.Data.Gym.GymState) throws -> Pogoprotos.Data.Battle.BattleResults.Builder {
        if builderResult.hasGymState {
          builderResult.gymState = try Pogoprotos.Data.Gym.GymState.builderWithPrototype(builderResult.gymState).mergeFrom(value).buildPartial()
        } else {
          builderResult.gymState = value
        }
        builderResult.hasGymState = true
        return self
      }
      public func clearGymState() -> Pogoprotos.Data.Battle.BattleResults.Builder {
        gymStateBuilder_ = nil
        builderResult.hasGymState = false
        builderResult.gymState = nil
        return self
      }
      public var attackers:Array<Pogoprotos.Data.Battle.BattleParticipant> {
           get {
               return builderResult.attackers
           }
           set (value) {
               builderResult.attackers = value
           }
      }
      public func setAttackers(value:Array<Pogoprotos.Data.Battle.BattleParticipant>) -> Pogoprotos.Data.Battle.BattleResults.Builder {
        self.attackers = value
        return self
      }
      public func clearAttackers() -> Pogoprotos.Data.Battle.BattleResults.Builder {
        builderResult.attackers.removeAll(keepCapacity: false)
        return self
      }
      public var playerExperienceAwarded:Array<Int32> {
           get {
               return builderResult.playerExperienceAwarded
           }
           set (array) {
               builderResult.playerExperienceAwarded = array
           }
      }
      public func setPlayerExperienceAwarded(value:Array<Int32>) -> Pogoprotos.Data.Battle.BattleResults.Builder {
        self.playerExperienceAwarded = value
        return self
      }
      public func clearPlayerExperienceAwarded() -> Pogoprotos.Data.Battle.BattleResults.Builder {
         builderResult.playerExperienceAwarded.removeAll(keepCapacity: false)
         return self
      }
      public var hasNextDefenderPokemonId:Bool {
           get {
                return builderResult.hasNextDefenderPokemonId
           }
      }
      public var nextDefenderPokemonId:Int64 {
           get {
                return builderResult.nextDefenderPokemonId
           }
           set (value) {
               builderResult.hasNextDefenderPokemonId = true
               builderResult.nextDefenderPokemonId = value
           }
      }
      public func setNextDefenderPokemonId(value:Int64) -> Pogoprotos.Data.Battle.BattleResults.Builder {
        self.nextDefenderPokemonId = value
        return self
      }
      public func clearNextDefenderPokemonId() -> Pogoprotos.Data.Battle.BattleResults.Builder{
           builderResult.hasNextDefenderPokemonId = false
           builderResult.nextDefenderPokemonId = Int64(0)
           return self
      }
      public var hasGymPointsDelta:Bool {
           get {
                return builderResult.hasGymPointsDelta
           }
      }
      public var gymPointsDelta:Int32 {
           get {
                return builderResult.gymPointsDelta
           }
           set (value) {
               builderResult.hasGymPointsDelta = true
               builderResult.gymPointsDelta = value
           }
      }
      public func setGymPointsDelta(value:Int32) -> Pogoprotos.Data.Battle.BattleResults.Builder {
        self.gymPointsDelta = value
        return self
      }
      public func clearGymPointsDelta() -> Pogoprotos.Data.Battle.BattleResults.Builder{
           builderResult.hasGymPointsDelta = false
           builderResult.gymPointsDelta = Int32(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Data.Battle.BattleResults.Builder {
        builderResult = Pogoprotos.Data.Battle.BattleResults()
        return self
      }
      override public func clone() throws -> Pogoprotos.Data.Battle.BattleResults.Builder {
        return try Pogoprotos.Data.Battle.BattleResults.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Data.Battle.BattleResults {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Data.Battle.BattleResults {
        let returnMe:Pogoprotos.Data.Battle.BattleResults = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Data.Battle.BattleResults) throws -> Pogoprotos.Data.Battle.BattleResults.Builder {
        if other == Pogoprotos.Data.Battle.BattleResults() {
         return self
        }
        if (other.hasGymState) {
            try mergeGymState(other.gymState)
        }
        if !other.attackers.isEmpty  {
           builderResult.attackers += other.attackers
        }
        if !other.playerExperienceAwarded.isEmpty {
            builderResult.playerExperienceAwarded += other.playerExperienceAwarded
        }
        if other.hasNextDefenderPokemonId {
             nextDefenderPokemonId = other.nextDefenderPokemonId
        }
        if other.hasGymPointsDelta {
             gymPointsDelta = other.gymPointsDelta
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Data.Battle.BattleResults.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.Battle.BattleResults.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10:
            let subBuilder:Pogoprotos.Data.Gym.GymState.Builder = Pogoprotos.Data.Gym.GymState.Builder()
            if hasGymState {
              try subBuilder.mergeFrom(gymState)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            gymState = subBuilder.buildPartial()

          case 18:
            let subBuilder = Pogoprotos.Data.Battle.BattleParticipant.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            attackers += [subBuilder.buildPartial()]

          case 26:
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.playerExperienceAwarded += [try input.readInt32()]
            }
            input.popLimit(limit)

          case 32:
            nextDefenderPokemonId = try input.readInt64()

          case 40:
            gymPointsDelta = try input.readInt32()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Data.Battle.BattleResults.Builder {
        let resultDecodedBuilder = Pogoprotos.Data.Battle.BattleResults.Builder()
        if let jsonValueGymState = jsonMap["gymState"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.gymState = try Pogoprotos.Data.Gym.GymState.Builder.decodeToBuilder(jsonValueGymState).build()

        }
        if let jsonValueAttackers = jsonMap["attackers"] as? Array<Dictionary<String,AnyObject>> {
          var jsonArrayAttackers:Array<Pogoprotos.Data.Battle.BattleParticipant> = []
          for oneValueAttackers in jsonValueAttackers {
            let messageFromStringAttackers = try Pogoprotos.Data.Battle.BattleParticipant.Builder.decodeToBuilder(oneValueAttackers).build()

            jsonArrayAttackers += [messageFromStringAttackers]
          }
          resultDecodedBuilder.attackers = jsonArrayAttackers
        }
        if let jsonValuePlayerExperienceAwarded = jsonMap["playerExperienceAwarded"] as? Array<NSNumber> {
          var jsonArrayPlayerExperienceAwarded:Array<Int32> = []
          for oneValuePlayerExperienceAwarded in jsonValuePlayerExperienceAwarded {
            jsonArrayPlayerExperienceAwarded += [oneValuePlayerExperienceAwarded.intValue]
          }
          resultDecodedBuilder.playerExperienceAwarded = jsonArrayPlayerExperienceAwarded
        }
        if let jsonValueNextDefenderPokemonId = jsonMap["nextDefenderPokemonId"] as? String {
          resultDecodedBuilder.nextDefenderPokemonId = Int64(jsonValueNextDefenderPokemonId)!
        }
        if let jsonValueGymPointsDelta = jsonMap["gymPointsDelta"] as? NSNumber {
          resultDecodedBuilder.gymPointsDelta = jsonValueGymPointsDelta.intValue
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Data.Battle.BattleResults.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Data.Battle.BattleResults.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
