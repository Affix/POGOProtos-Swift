// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "PokeballAttributes.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Pogoprotos { public struct Settings { public struct Master { public struct Item { }}}}

public func == (lhs: Pogoprotos.Settings.Master.Item.PokeballAttributes, rhs: Pogoprotos.Settings.Master.Item.PokeballAttributes) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasItemEffect == rhs.hasItemEffect) && (!lhs.hasItemEffect || lhs.itemEffect == rhs.itemEffect)
  fieldCheck = fieldCheck && (lhs.hasCaptureMulti == rhs.hasCaptureMulti) && (!lhs.hasCaptureMulti || lhs.captureMulti == rhs.captureMulti)
  fieldCheck = fieldCheck && (lhs.hasCaptureMultiEffect == rhs.hasCaptureMultiEffect) && (!lhs.hasCaptureMultiEffect || lhs.captureMultiEffect == rhs.captureMultiEffect)
  fieldCheck = fieldCheck && (lhs.hasItemEffectMod == rhs.hasItemEffectMod) && (!lhs.hasItemEffectMod || lhs.itemEffectMod == rhs.itemEffectMod)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Pogoprotos.Settings.Master.Item {
  public struct PokeballAttributesRoot {
    public static var sharedInstance : PokeballAttributesRoot {
     struct Static {
         static let instance : PokeballAttributesRoot = PokeballAttributesRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Pogoprotos.Enums.ItemEffectRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class PokeballAttributes : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var itemEffect:Pogoprotos.Enums.ItemEffect = Pogoprotos.Enums.ItemEffect.ItemEffectNone
    public private(set) var hasItemEffect:Bool = false
    public private(set) var hasCaptureMulti:Bool = false
    public private(set) var captureMulti:Float = Float(0)

    public private(set) var hasCaptureMultiEffect:Bool = false
    public private(set) var captureMultiEffect:Float = Float(0)

    public private(set) var hasItemEffectMod:Bool = false
    public private(set) var itemEffectMod:Float = Float(0)

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasItemEffect {
        try output.writeEnum(1, value:itemEffect.rawValue)
      }
      if hasCaptureMulti {
        try output.writeFloat(2, value:captureMulti)
      }
      if hasCaptureMultiEffect {
        try output.writeFloat(3, value:captureMultiEffect)
      }
      if hasItemEffectMod {
        try output.writeFloat(4, value:itemEffectMod)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if (hasItemEffect) {
        serialize_size += itemEffect.rawValue.computeEnumSize(1)
      }
      if hasCaptureMulti {
        serialize_size += captureMulti.computeFloatSize(2)
      }
      if hasCaptureMultiEffect {
        serialize_size += captureMultiEffect.computeFloatSize(3)
      }
      if hasItemEffectMod {
        serialize_size += itemEffectMod.computeFloatSize(4)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Settings.Master.Item.PokeballAttributes> {
      var mergedArray = Array<Pogoprotos.Settings.Master.Item.PokeballAttributes>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.Master.Item.PokeballAttributes? {
      return try Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Settings.Master.Item.PokeballAttributes {
      return try Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Settings.Master.Item.PokeballAttributesRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Item.PokeballAttributes {
      return try Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.Master.Item.PokeballAttributes {
      return try Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Item.PokeballAttributes {
      return try Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.Master.Item.PokeballAttributes {
      return try Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Item.PokeballAttributes {
      return try Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder {
      return Pogoprotos.Settings.Master.Item.PokeballAttributes.classBuilder() as! Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder
    }
    public func getBuilder() -> Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder {
      return classBuilder() as! Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder {
      return try Pogoprotos.Settings.Master.Item.PokeballAttributes.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Settings.Master.Item.PokeballAttributes) throws -> Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder {
      return try Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasItemEffect {
        jsonMap["itemEffect"] = itemEffect.toString()
      }
      if hasCaptureMulti {
        jsonMap["captureMulti"] = NSNumber(float:captureMulti)
      }
      if hasCaptureMultiEffect {
        jsonMap["captureMultiEffect"] = NSNumber(float:captureMultiEffect)
      }
      if hasItemEffectMod {
        jsonMap["itemEffectMod"] = NSNumber(float:itemEffectMod)
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.Master.Item.PokeballAttributes {
      return try Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Settings.Master.Item.PokeballAttributes {
      return try Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if (hasItemEffect) {
        output += "\(indent) itemEffect: \(itemEffect.description)\n"
      }
      if hasCaptureMulti {
        output += "\(indent) captureMulti: \(captureMulti) \n"
      }
      if hasCaptureMultiEffect {
        output += "\(indent) captureMultiEffect: \(captureMultiEffect) \n"
      }
      if hasItemEffectMod {
        output += "\(indent) itemEffectMod: \(itemEffectMod) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasItemEffect {
               hashCode = (hashCode &* 31) &+ Int(itemEffect.rawValue)
            }
            if hasCaptureMulti {
               hashCode = (hashCode &* 31) &+ captureMulti.hashValue
            }
            if hasCaptureMultiEffect {
               hashCode = (hashCode &* 31) &+ captureMultiEffect.hashValue
            }
            if hasItemEffectMod {
               hashCode = (hashCode &* 31) &+ itemEffectMod.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Settings.Master.Item.PokeballAttributes"
    }
    override public func className() -> String {
        return "Pogoprotos.Settings.Master.Item.PokeballAttributes"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Settings.Master.Item.PokeballAttributes.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Settings.Master.Item.PokeballAttributes = Pogoprotos.Settings.Master.Item.PokeballAttributes()
      public func getMessage() -> Pogoprotos.Settings.Master.Item.PokeballAttributes {
          return builderResult
      }

      required override public init () {
         super.init()
      }
        public var hasItemEffect:Bool{
            get {
                return builderResult.hasItemEffect
            }
        }
        public var itemEffect:Pogoprotos.Enums.ItemEffect {
            get {
                return builderResult.itemEffect
            }
            set (value) {
                builderResult.hasItemEffect = true
                builderResult.itemEffect = value
            }
        }
        public func setItemEffect(value:Pogoprotos.Enums.ItemEffect) -> Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder {
          self.itemEffect = value
          return self
        }
        public func clearItemEffect() -> Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder {
           builderResult.hasItemEffect = false
           builderResult.itemEffect = .ItemEffectNone
           return self
        }
      public var hasCaptureMulti:Bool {
           get {
                return builderResult.hasCaptureMulti
           }
      }
      public var captureMulti:Float {
           get {
                return builderResult.captureMulti
           }
           set (value) {
               builderResult.hasCaptureMulti = true
               builderResult.captureMulti = value
           }
      }
      public func setCaptureMulti(value:Float) -> Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder {
        self.captureMulti = value
        return self
      }
      public func clearCaptureMulti() -> Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder{
           builderResult.hasCaptureMulti = false
           builderResult.captureMulti = Float(0)
           return self
      }
      public var hasCaptureMultiEffect:Bool {
           get {
                return builderResult.hasCaptureMultiEffect
           }
      }
      public var captureMultiEffect:Float {
           get {
                return builderResult.captureMultiEffect
           }
           set (value) {
               builderResult.hasCaptureMultiEffect = true
               builderResult.captureMultiEffect = value
           }
      }
      public func setCaptureMultiEffect(value:Float) -> Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder {
        self.captureMultiEffect = value
        return self
      }
      public func clearCaptureMultiEffect() -> Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder{
           builderResult.hasCaptureMultiEffect = false
           builderResult.captureMultiEffect = Float(0)
           return self
      }
      public var hasItemEffectMod:Bool {
           get {
                return builderResult.hasItemEffectMod
           }
      }
      public var itemEffectMod:Float {
           get {
                return builderResult.itemEffectMod
           }
           set (value) {
               builderResult.hasItemEffectMod = true
               builderResult.itemEffectMod = value
           }
      }
      public func setItemEffectMod(value:Float) -> Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder {
        self.itemEffectMod = value
        return self
      }
      public func clearItemEffectMod() -> Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder{
           builderResult.hasItemEffectMod = false
           builderResult.itemEffectMod = Float(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder {
        builderResult = Pogoprotos.Settings.Master.Item.PokeballAttributes()
        return self
      }
      override public func clone() throws -> Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder {
        return try Pogoprotos.Settings.Master.Item.PokeballAttributes.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Settings.Master.Item.PokeballAttributes {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Settings.Master.Item.PokeballAttributes {
        let returnMe:Pogoprotos.Settings.Master.Item.PokeballAttributes = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Settings.Master.Item.PokeballAttributes) throws -> Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder {
        if other == Pogoprotos.Settings.Master.Item.PokeballAttributes() {
         return self
        }
        if other.hasItemEffect {
             itemEffect = other.itemEffect
        }
        if other.hasCaptureMulti {
             captureMulti = other.captureMulti
        }
        if other.hasCaptureMultiEffect {
             captureMultiEffect = other.captureMultiEffect
        }
        if other.hasItemEffectMod {
             itemEffectMod = other.itemEffectMod
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            let valueIntitemEffect = try input.readEnum()
            if let enumsitemEffect = Pogoprotos.Enums.ItemEffect(rawValue:valueIntitemEffect){
                 itemEffect = enumsitemEffect
            } else {
                 try unknownFieldsBuilder.mergeVarintField(1, value:Int64(valueIntitemEffect))
            }

          case 21:
            captureMulti = try input.readFloat()

          case 29:
            captureMultiEffect = try input.readFloat()

          case 37:
            itemEffectMod = try input.readFloat()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder {
        let resultDecodedBuilder = Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder()
        if let jsonValueItemEffect = jsonMap["itemEffect"] as? String {
          resultDecodedBuilder.itemEffect = try Pogoprotos.Enums.ItemEffect.fromString(jsonValueItemEffect)
        }
        if let jsonValueCaptureMulti = jsonMap["captureMulti"] as? NSNumber {
          resultDecodedBuilder.captureMulti = jsonValueCaptureMulti.floatValue
        }
        if let jsonValueCaptureMultiEffect = jsonMap["captureMultiEffect"] as? NSNumber {
          resultDecodedBuilder.captureMultiEffect = jsonValueCaptureMultiEffect.floatValue
        }
        if let jsonValueItemEffectMod = jsonMap["itemEffectMod"] as? NSNumber {
          resultDecodedBuilder.itemEffectMod = jsonValueItemEffectMod.floatValue
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
