// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "MapSettings.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Pogoprotos { public struct Settings { }}

public func == (lhs: Pogoprotos.Settings.MapSettings, rhs: Pogoprotos.Settings.MapSettings) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasPokemonVisibleRange == rhs.hasPokemonVisibleRange) && (!lhs.hasPokemonVisibleRange || lhs.pokemonVisibleRange == rhs.pokemonVisibleRange)
  fieldCheck = fieldCheck && (lhs.hasPokeNavRangeMeters == rhs.hasPokeNavRangeMeters) && (!lhs.hasPokeNavRangeMeters || lhs.pokeNavRangeMeters == rhs.pokeNavRangeMeters)
  fieldCheck = fieldCheck && (lhs.hasEncounterRangeMeters == rhs.hasEncounterRangeMeters) && (!lhs.hasEncounterRangeMeters || lhs.encounterRangeMeters == rhs.encounterRangeMeters)
  fieldCheck = fieldCheck && (lhs.hasGetMapObjectsMinRefreshSeconds == rhs.hasGetMapObjectsMinRefreshSeconds) && (!lhs.hasGetMapObjectsMinRefreshSeconds || lhs.getMapObjectsMinRefreshSeconds == rhs.getMapObjectsMinRefreshSeconds)
  fieldCheck = fieldCheck && (lhs.hasGetMapObjectsMaxRefreshSeconds == rhs.hasGetMapObjectsMaxRefreshSeconds) && (!lhs.hasGetMapObjectsMaxRefreshSeconds || lhs.getMapObjectsMaxRefreshSeconds == rhs.getMapObjectsMaxRefreshSeconds)
  fieldCheck = fieldCheck && (lhs.hasGetMapObjectsMinDistanceMeters == rhs.hasGetMapObjectsMinDistanceMeters) && (!lhs.hasGetMapObjectsMinDistanceMeters || lhs.getMapObjectsMinDistanceMeters == rhs.getMapObjectsMinDistanceMeters)
  fieldCheck = fieldCheck && (lhs.hasGoogleMapsApiKey == rhs.hasGoogleMapsApiKey) && (!lhs.hasGoogleMapsApiKey || lhs.googleMapsApiKey == rhs.googleMapsApiKey)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Pogoprotos.Settings {
  public struct MapSettingsRoot {
    public static var sharedInstance : MapSettingsRoot {
     struct Static {
         static let instance : MapSettingsRoot = MapSettingsRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class MapSettings : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasPokemonVisibleRange:Bool = false
    public private(set) var pokemonVisibleRange:Double = Double(0)

    public private(set) var hasPokeNavRangeMeters:Bool = false
    public private(set) var pokeNavRangeMeters:Double = Double(0)

    public private(set) var hasEncounterRangeMeters:Bool = false
    public private(set) var encounterRangeMeters:Double = Double(0)

    public private(set) var hasGetMapObjectsMinRefreshSeconds:Bool = false
    public private(set) var getMapObjectsMinRefreshSeconds:Float = Float(0)

    public private(set) var hasGetMapObjectsMaxRefreshSeconds:Bool = false
    public private(set) var getMapObjectsMaxRefreshSeconds:Float = Float(0)

    public private(set) var hasGetMapObjectsMinDistanceMeters:Bool = false
    public private(set) var getMapObjectsMinDistanceMeters:Float = Float(0)

    public private(set) var hasGoogleMapsApiKey:Bool = false
    public private(set) var googleMapsApiKey:String = ""

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasPokemonVisibleRange {
        try output.writeDouble(1, value:pokemonVisibleRange)
      }
      if hasPokeNavRangeMeters {
        try output.writeDouble(2, value:pokeNavRangeMeters)
      }
      if hasEncounterRangeMeters {
        try output.writeDouble(3, value:encounterRangeMeters)
      }
      if hasGetMapObjectsMinRefreshSeconds {
        try output.writeFloat(4, value:getMapObjectsMinRefreshSeconds)
      }
      if hasGetMapObjectsMaxRefreshSeconds {
        try output.writeFloat(5, value:getMapObjectsMaxRefreshSeconds)
      }
      if hasGetMapObjectsMinDistanceMeters {
        try output.writeFloat(6, value:getMapObjectsMinDistanceMeters)
      }
      if hasGoogleMapsApiKey {
        try output.writeString(7, value:googleMapsApiKey)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasPokemonVisibleRange {
        serialize_size += pokemonVisibleRange.computeDoubleSize(1)
      }
      if hasPokeNavRangeMeters {
        serialize_size += pokeNavRangeMeters.computeDoubleSize(2)
      }
      if hasEncounterRangeMeters {
        serialize_size += encounterRangeMeters.computeDoubleSize(3)
      }
      if hasGetMapObjectsMinRefreshSeconds {
        serialize_size += getMapObjectsMinRefreshSeconds.computeFloatSize(4)
      }
      if hasGetMapObjectsMaxRefreshSeconds {
        serialize_size += getMapObjectsMaxRefreshSeconds.computeFloatSize(5)
      }
      if hasGetMapObjectsMinDistanceMeters {
        serialize_size += getMapObjectsMinDistanceMeters.computeFloatSize(6)
      }
      if hasGoogleMapsApiKey {
        serialize_size += googleMapsApiKey.computeStringSize(7)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Settings.MapSettings> {
      var mergedArray = Array<Pogoprotos.Settings.MapSettings>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.MapSettings? {
      return try Pogoprotos.Settings.MapSettings.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Settings.MapSettings {
      return try Pogoprotos.Settings.MapSettings.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Settings.MapSettingsRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.MapSettings {
      return try Pogoprotos.Settings.MapSettings.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.MapSettings {
      return try Pogoprotos.Settings.MapSettings.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.MapSettings {
      return try Pogoprotos.Settings.MapSettings.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.MapSettings {
      return try Pogoprotos.Settings.MapSettings.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.MapSettings {
      return try Pogoprotos.Settings.MapSettings.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Settings.MapSettings.Builder {
      return Pogoprotos.Settings.MapSettings.classBuilder() as! Pogoprotos.Settings.MapSettings.Builder
    }
    public func getBuilder() -> Pogoprotos.Settings.MapSettings.Builder {
      return classBuilder() as! Pogoprotos.Settings.MapSettings.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.MapSettings.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.MapSettings.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Settings.MapSettings.Builder {
      return try Pogoprotos.Settings.MapSettings.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Settings.MapSettings) throws -> Pogoprotos.Settings.MapSettings.Builder {
      return try Pogoprotos.Settings.MapSettings.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasPokemonVisibleRange {
        jsonMap["pokemonVisibleRange"] = NSNumber(double:pokemonVisibleRange)
      }
      if hasPokeNavRangeMeters {
        jsonMap["pokeNavRangeMeters"] = NSNumber(double:pokeNavRangeMeters)
      }
      if hasEncounterRangeMeters {
        jsonMap["encounterRangeMeters"] = NSNumber(double:encounterRangeMeters)
      }
      if hasGetMapObjectsMinRefreshSeconds {
        jsonMap["getMapObjectsMinRefreshSeconds"] = NSNumber(float:getMapObjectsMinRefreshSeconds)
      }
      if hasGetMapObjectsMaxRefreshSeconds {
        jsonMap["getMapObjectsMaxRefreshSeconds"] = NSNumber(float:getMapObjectsMaxRefreshSeconds)
      }
      if hasGetMapObjectsMinDistanceMeters {
        jsonMap["getMapObjectsMinDistanceMeters"] = NSNumber(float:getMapObjectsMinDistanceMeters)
      }
      if hasGoogleMapsApiKey {
        jsonMap["googleMapsApiKey"] = googleMapsApiKey
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.MapSettings {
      return try Pogoprotos.Settings.MapSettings.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Settings.MapSettings {
      return try Pogoprotos.Settings.MapSettings.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasPokemonVisibleRange {
        output += "\(indent) pokemonVisibleRange: \(pokemonVisibleRange) \n"
      }
      if hasPokeNavRangeMeters {
        output += "\(indent) pokeNavRangeMeters: \(pokeNavRangeMeters) \n"
      }
      if hasEncounterRangeMeters {
        output += "\(indent) encounterRangeMeters: \(encounterRangeMeters) \n"
      }
      if hasGetMapObjectsMinRefreshSeconds {
        output += "\(indent) getMapObjectsMinRefreshSeconds: \(getMapObjectsMinRefreshSeconds) \n"
      }
      if hasGetMapObjectsMaxRefreshSeconds {
        output += "\(indent) getMapObjectsMaxRefreshSeconds: \(getMapObjectsMaxRefreshSeconds) \n"
      }
      if hasGetMapObjectsMinDistanceMeters {
        output += "\(indent) getMapObjectsMinDistanceMeters: \(getMapObjectsMinDistanceMeters) \n"
      }
      if hasGoogleMapsApiKey {
        output += "\(indent) googleMapsApiKey: \(googleMapsApiKey) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasPokemonVisibleRange {
               hashCode = (hashCode &* 31) &+ pokemonVisibleRange.hashValue
            }
            if hasPokeNavRangeMeters {
               hashCode = (hashCode &* 31) &+ pokeNavRangeMeters.hashValue
            }
            if hasEncounterRangeMeters {
               hashCode = (hashCode &* 31) &+ encounterRangeMeters.hashValue
            }
            if hasGetMapObjectsMinRefreshSeconds {
               hashCode = (hashCode &* 31) &+ getMapObjectsMinRefreshSeconds.hashValue
            }
            if hasGetMapObjectsMaxRefreshSeconds {
               hashCode = (hashCode &* 31) &+ getMapObjectsMaxRefreshSeconds.hashValue
            }
            if hasGetMapObjectsMinDistanceMeters {
               hashCode = (hashCode &* 31) &+ getMapObjectsMinDistanceMeters.hashValue
            }
            if hasGoogleMapsApiKey {
               hashCode = (hashCode &* 31) &+ googleMapsApiKey.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Settings.MapSettings"
    }
    override public func className() -> String {
        return "Pogoprotos.Settings.MapSettings"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Settings.MapSettings.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Settings.MapSettings = Pogoprotos.Settings.MapSettings()
      public func getMessage() -> Pogoprotos.Settings.MapSettings {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasPokemonVisibleRange:Bool {
           get {
                return builderResult.hasPokemonVisibleRange
           }
      }
      public var pokemonVisibleRange:Double {
           get {
                return builderResult.pokemonVisibleRange
           }
           set (value) {
               builderResult.hasPokemonVisibleRange = true
               builderResult.pokemonVisibleRange = value
           }
      }
      public func setPokemonVisibleRange(value:Double) -> Pogoprotos.Settings.MapSettings.Builder {
        self.pokemonVisibleRange = value
        return self
      }
      public func clearPokemonVisibleRange() -> Pogoprotos.Settings.MapSettings.Builder{
           builderResult.hasPokemonVisibleRange = false
           builderResult.pokemonVisibleRange = Double(0)
           return self
      }
      public var hasPokeNavRangeMeters:Bool {
           get {
                return builderResult.hasPokeNavRangeMeters
           }
      }
      public var pokeNavRangeMeters:Double {
           get {
                return builderResult.pokeNavRangeMeters
           }
           set (value) {
               builderResult.hasPokeNavRangeMeters = true
               builderResult.pokeNavRangeMeters = value
           }
      }
      public func setPokeNavRangeMeters(value:Double) -> Pogoprotos.Settings.MapSettings.Builder {
        self.pokeNavRangeMeters = value
        return self
      }
      public func clearPokeNavRangeMeters() -> Pogoprotos.Settings.MapSettings.Builder{
           builderResult.hasPokeNavRangeMeters = false
           builderResult.pokeNavRangeMeters = Double(0)
           return self
      }
      public var hasEncounterRangeMeters:Bool {
           get {
                return builderResult.hasEncounterRangeMeters
           }
      }
      public var encounterRangeMeters:Double {
           get {
                return builderResult.encounterRangeMeters
           }
           set (value) {
               builderResult.hasEncounterRangeMeters = true
               builderResult.encounterRangeMeters = value
           }
      }
      public func setEncounterRangeMeters(value:Double) -> Pogoprotos.Settings.MapSettings.Builder {
        self.encounterRangeMeters = value
        return self
      }
      public func clearEncounterRangeMeters() -> Pogoprotos.Settings.MapSettings.Builder{
           builderResult.hasEncounterRangeMeters = false
           builderResult.encounterRangeMeters = Double(0)
           return self
      }
      public var hasGetMapObjectsMinRefreshSeconds:Bool {
           get {
                return builderResult.hasGetMapObjectsMinRefreshSeconds
           }
      }
      public var getMapObjectsMinRefreshSeconds:Float {
           get {
                return builderResult.getMapObjectsMinRefreshSeconds
           }
           set (value) {
               builderResult.hasGetMapObjectsMinRefreshSeconds = true
               builderResult.getMapObjectsMinRefreshSeconds = value
           }
      }
      public func setGetMapObjectsMinRefreshSeconds(value:Float) -> Pogoprotos.Settings.MapSettings.Builder {
        self.getMapObjectsMinRefreshSeconds = value
        return self
      }
      public func clearGetMapObjectsMinRefreshSeconds() -> Pogoprotos.Settings.MapSettings.Builder{
           builderResult.hasGetMapObjectsMinRefreshSeconds = false
           builderResult.getMapObjectsMinRefreshSeconds = Float(0)
           return self
      }
      public var hasGetMapObjectsMaxRefreshSeconds:Bool {
           get {
                return builderResult.hasGetMapObjectsMaxRefreshSeconds
           }
      }
      public var getMapObjectsMaxRefreshSeconds:Float {
           get {
                return builderResult.getMapObjectsMaxRefreshSeconds
           }
           set (value) {
               builderResult.hasGetMapObjectsMaxRefreshSeconds = true
               builderResult.getMapObjectsMaxRefreshSeconds = value
           }
      }
      public func setGetMapObjectsMaxRefreshSeconds(value:Float) -> Pogoprotos.Settings.MapSettings.Builder {
        self.getMapObjectsMaxRefreshSeconds = value
        return self
      }
      public func clearGetMapObjectsMaxRefreshSeconds() -> Pogoprotos.Settings.MapSettings.Builder{
           builderResult.hasGetMapObjectsMaxRefreshSeconds = false
           builderResult.getMapObjectsMaxRefreshSeconds = Float(0)
           return self
      }
      public var hasGetMapObjectsMinDistanceMeters:Bool {
           get {
                return builderResult.hasGetMapObjectsMinDistanceMeters
           }
      }
      public var getMapObjectsMinDistanceMeters:Float {
           get {
                return builderResult.getMapObjectsMinDistanceMeters
           }
           set (value) {
               builderResult.hasGetMapObjectsMinDistanceMeters = true
               builderResult.getMapObjectsMinDistanceMeters = value
           }
      }
      public func setGetMapObjectsMinDistanceMeters(value:Float) -> Pogoprotos.Settings.MapSettings.Builder {
        self.getMapObjectsMinDistanceMeters = value
        return self
      }
      public func clearGetMapObjectsMinDistanceMeters() -> Pogoprotos.Settings.MapSettings.Builder{
           builderResult.hasGetMapObjectsMinDistanceMeters = false
           builderResult.getMapObjectsMinDistanceMeters = Float(0)
           return self
      }
      public var hasGoogleMapsApiKey:Bool {
           get {
                return builderResult.hasGoogleMapsApiKey
           }
      }
      public var googleMapsApiKey:String {
           get {
                return builderResult.googleMapsApiKey
           }
           set (value) {
               builderResult.hasGoogleMapsApiKey = true
               builderResult.googleMapsApiKey = value
           }
      }
      public func setGoogleMapsApiKey(value:String) -> Pogoprotos.Settings.MapSettings.Builder {
        self.googleMapsApiKey = value
        return self
      }
      public func clearGoogleMapsApiKey() -> Pogoprotos.Settings.MapSettings.Builder{
           builderResult.hasGoogleMapsApiKey = false
           builderResult.googleMapsApiKey = ""
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Settings.MapSettings.Builder {
        builderResult = Pogoprotos.Settings.MapSettings()
        return self
      }
      override public func clone() throws -> Pogoprotos.Settings.MapSettings.Builder {
        return try Pogoprotos.Settings.MapSettings.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Settings.MapSettings {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Settings.MapSettings {
        let returnMe:Pogoprotos.Settings.MapSettings = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Settings.MapSettings) throws -> Pogoprotos.Settings.MapSettings.Builder {
        if other == Pogoprotos.Settings.MapSettings() {
         return self
        }
        if other.hasPokemonVisibleRange {
             pokemonVisibleRange = other.pokemonVisibleRange
        }
        if other.hasPokeNavRangeMeters {
             pokeNavRangeMeters = other.pokeNavRangeMeters
        }
        if other.hasEncounterRangeMeters {
             encounterRangeMeters = other.encounterRangeMeters
        }
        if other.hasGetMapObjectsMinRefreshSeconds {
             getMapObjectsMinRefreshSeconds = other.getMapObjectsMinRefreshSeconds
        }
        if other.hasGetMapObjectsMaxRefreshSeconds {
             getMapObjectsMaxRefreshSeconds = other.getMapObjectsMaxRefreshSeconds
        }
        if other.hasGetMapObjectsMinDistanceMeters {
             getMapObjectsMinDistanceMeters = other.getMapObjectsMinDistanceMeters
        }
        if other.hasGoogleMapsApiKey {
             googleMapsApiKey = other.googleMapsApiKey
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.MapSettings.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.MapSettings.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 9:
            pokemonVisibleRange = try input.readDouble()

          case 17:
            pokeNavRangeMeters = try input.readDouble()

          case 25:
            encounterRangeMeters = try input.readDouble()

          case 37:
            getMapObjectsMinRefreshSeconds = try input.readFloat()

          case 45:
            getMapObjectsMaxRefreshSeconds = try input.readFloat()

          case 53:
            getMapObjectsMinDistanceMeters = try input.readFloat()

          case 58:
            googleMapsApiKey = try input.readString()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.MapSettings.Builder {
        let resultDecodedBuilder = Pogoprotos.Settings.MapSettings.Builder()
        if let jsonValuePokemonVisibleRange = jsonMap["pokemonVisibleRange"] as? NSNumber {
          resultDecodedBuilder.pokemonVisibleRange = jsonValuePokemonVisibleRange.doubleValue
        }
        if let jsonValuePokeNavRangeMeters = jsonMap["pokeNavRangeMeters"] as? NSNumber {
          resultDecodedBuilder.pokeNavRangeMeters = jsonValuePokeNavRangeMeters.doubleValue
        }
        if let jsonValueEncounterRangeMeters = jsonMap["encounterRangeMeters"] as? NSNumber {
          resultDecodedBuilder.encounterRangeMeters = jsonValueEncounterRangeMeters.doubleValue
        }
        if let jsonValueGetMapObjectsMinRefreshSeconds = jsonMap["getMapObjectsMinRefreshSeconds"] as? NSNumber {
          resultDecodedBuilder.getMapObjectsMinRefreshSeconds = jsonValueGetMapObjectsMinRefreshSeconds.floatValue
        }
        if let jsonValueGetMapObjectsMaxRefreshSeconds = jsonMap["getMapObjectsMaxRefreshSeconds"] as? NSNumber {
          resultDecodedBuilder.getMapObjectsMaxRefreshSeconds = jsonValueGetMapObjectsMaxRefreshSeconds.floatValue
        }
        if let jsonValueGetMapObjectsMinDistanceMeters = jsonMap["getMapObjectsMinDistanceMeters"] as? NSNumber {
          resultDecodedBuilder.getMapObjectsMinDistanceMeters = jsonValueGetMapObjectsMinDistanceMeters.floatValue
        }
        if let jsonValueGoogleMapsApiKey = jsonMap["googleMapsApiKey"] as? String {
          resultDecodedBuilder.googleMapsApiKey = jsonValueGoogleMapsApiKey
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Settings.MapSettings.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Settings.MapSettings.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
