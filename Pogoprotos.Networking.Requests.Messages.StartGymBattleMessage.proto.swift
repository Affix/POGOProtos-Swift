// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "StartGymBattleMessage.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Pogoprotos { public struct Networking { public struct Requests { public struct Messages { }}}}

public func == (lhs: Pogoprotos.Networking.Requests.Messages.StartGymBattleMessage, rhs: Pogoprotos.Networking.Requests.Messages.StartGymBattleMessage) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasGymId == rhs.hasGymId) && (!lhs.hasGymId || lhs.gymId == rhs.gymId)
  fieldCheck = fieldCheck && (lhs.attackingPokemonIds == rhs.attackingPokemonIds)
  fieldCheck = fieldCheck && (lhs.hasDefendingPokemonId == rhs.hasDefendingPokemonId) && (!lhs.hasDefendingPokemonId || lhs.defendingPokemonId == rhs.defendingPokemonId)
  fieldCheck = fieldCheck && (lhs.hasPlayerLatitude == rhs.hasPlayerLatitude) && (!lhs.hasPlayerLatitude || lhs.playerLatitude == rhs.playerLatitude)
  fieldCheck = fieldCheck && (lhs.hasPlayerLongitude == rhs.hasPlayerLongitude) && (!lhs.hasPlayerLongitude || lhs.playerLongitude == rhs.playerLongitude)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Pogoprotos.Networking.Requests.Messages {
  public struct StartGymBattleMessageRoot {
    public static var sharedInstance : StartGymBattleMessageRoot {
     struct Static {
         static let instance : StartGymBattleMessageRoot = StartGymBattleMessageRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class StartGymBattleMessage : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasGymId:Bool = false
    public private(set) var gymId:String = ""

    public private(set) var attackingPokemonIds:Array<UInt64> = Array<UInt64>()
    private var attackingPokemonIdsMemoizedSerializedSize:Int32 = -1
    public private(set) var hasDefendingPokemonId:Bool = false
    public private(set) var defendingPokemonId:UInt64 = UInt64(0)

    public private(set) var hasPlayerLatitude:Bool = false
    public private(set) var playerLatitude:Double = Double(0)

    public private(set) var hasPlayerLongitude:Bool = false
    public private(set) var playerLongitude:Double = Double(0)

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasGymId {
        try output.writeString(1, value:gymId)
      }
      if !attackingPokemonIds.isEmpty {
        try output.writeRawVarint32(18)
        try output.writeRawVarint32(attackingPokemonIdsMemoizedSerializedSize)
        for oneValueattackingPokemonIds in attackingPokemonIds {
          try output.writeFixed64NoTag(oneValueattackingPokemonIds)
        }
      }
      if hasDefendingPokemonId {
        try output.writeUInt64(3, value:defendingPokemonId)
      }
      if hasPlayerLatitude {
        try output.writeDouble(4, value:playerLatitude)
      }
      if hasPlayerLongitude {
        try output.writeDouble(5, value:playerLongitude)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasGymId {
        serialize_size += gymId.computeStringSize(1)
      }
      var dataSizeAttackingPokemonIds:Int32 = 0
      dataSizeAttackingPokemonIds = 8 * Int32(attackingPokemonIds.count)
      serialize_size += dataSizeAttackingPokemonIds
      if !attackingPokemonIds.isEmpty {
        serialize_size += 1
        serialize_size += dataSizeAttackingPokemonIds.computeInt32SizeNoTag()
      }
      attackingPokemonIdsMemoizedSerializedSize = dataSizeAttackingPokemonIds
      if hasDefendingPokemonId {
        serialize_size += defendingPokemonId.computeUInt64Size(3)
      }
      if hasPlayerLatitude {
        serialize_size += playerLatitude.computeDoubleSize(4)
      }
      if hasPlayerLongitude {
        serialize_size += playerLongitude.computeDoubleSize(5)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Networking.Requests.Messages.StartGymBattleMessage> {
      var mergedArray = Array<Pogoprotos.Networking.Requests.Messages.StartGymBattleMessage>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Requests.Messages.StartGymBattleMessage? {
      return try Pogoprotos.Networking.Requests.Messages.StartGymBattleMessage.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Networking.Requests.Messages.StartGymBattleMessage {
      return try Pogoprotos.Networking.Requests.Messages.StartGymBattleMessage.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Networking.Requests.Messages.StartGymBattleMessageRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Requests.Messages.StartGymBattleMessage {
      return try Pogoprotos.Networking.Requests.Messages.StartGymBattleMessage.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Requests.Messages.StartGymBattleMessage {
      return try Pogoprotos.Networking.Requests.Messages.StartGymBattleMessage.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Requests.Messages.StartGymBattleMessage {
      return try Pogoprotos.Networking.Requests.Messages.StartGymBattleMessage.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Requests.Messages.StartGymBattleMessage {
      return try Pogoprotos.Networking.Requests.Messages.StartGymBattleMessage.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Requests.Messages.StartGymBattleMessage {
      return try Pogoprotos.Networking.Requests.Messages.StartGymBattleMessage.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Networking.Requests.Messages.StartGymBattleMessage.Builder {
      return Pogoprotos.Networking.Requests.Messages.StartGymBattleMessage.classBuilder() as! Pogoprotos.Networking.Requests.Messages.StartGymBattleMessage.Builder
    }
    public func getBuilder() -> Pogoprotos.Networking.Requests.Messages.StartGymBattleMessage.Builder {
      return classBuilder() as! Pogoprotos.Networking.Requests.Messages.StartGymBattleMessage.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Networking.Requests.Messages.StartGymBattleMessage.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Networking.Requests.Messages.StartGymBattleMessage.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Networking.Requests.Messages.StartGymBattleMessage.Builder {
      return try Pogoprotos.Networking.Requests.Messages.StartGymBattleMessage.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Networking.Requests.Messages.StartGymBattleMessage) throws -> Pogoprotos.Networking.Requests.Messages.StartGymBattleMessage.Builder {
      return try Pogoprotos.Networking.Requests.Messages.StartGymBattleMessage.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasGymId {
        jsonMap["gymId"] = gymId
      }
      if !attackingPokemonIds.isEmpty {
        var jsonArrayAttackingPokemonIds:Array<String> = []
          for oneValueAttackingPokemonIds in attackingPokemonIds {
            jsonArrayAttackingPokemonIds += ["\(oneValueAttackingPokemonIds)"]
          }
        jsonMap["attackingPokemonIds"] = jsonArrayAttackingPokemonIds
      }
      if hasDefendingPokemonId {
        jsonMap["defendingPokemonId"] = "\(defendingPokemonId)"
      }
      if hasPlayerLatitude {
        jsonMap["playerLatitude"] = NSNumber(double:playerLatitude)
      }
      if hasPlayerLongitude {
        jsonMap["playerLongitude"] = NSNumber(double:playerLongitude)
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Requests.Messages.StartGymBattleMessage {
      return try Pogoprotos.Networking.Requests.Messages.StartGymBattleMessage.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Networking.Requests.Messages.StartGymBattleMessage {
      return try Pogoprotos.Networking.Requests.Messages.StartGymBattleMessage.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasGymId {
        output += "\(indent) gymId: \(gymId) \n"
      }
      var attackingPokemonIdsElementIndex:Int = 0
      for oneValueAttackingPokemonIds in attackingPokemonIds  {
          output += "\(indent) attackingPokemonIds[\(attackingPokemonIdsElementIndex)]: \(oneValueAttackingPokemonIds)\n"
          attackingPokemonIdsElementIndex += 1
      }
      if hasDefendingPokemonId {
        output += "\(indent) defendingPokemonId: \(defendingPokemonId) \n"
      }
      if hasPlayerLatitude {
        output += "\(indent) playerLatitude: \(playerLatitude) \n"
      }
      if hasPlayerLongitude {
        output += "\(indent) playerLongitude: \(playerLongitude) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasGymId {
               hashCode = (hashCode &* 31) &+ gymId.hashValue
            }
            for oneValueAttackingPokemonIds in attackingPokemonIds {
                hashCode = (hashCode &* 31) &+ oneValueAttackingPokemonIds.hashValue
            }
            if hasDefendingPokemonId {
               hashCode = (hashCode &* 31) &+ defendingPokemonId.hashValue
            }
            if hasPlayerLatitude {
               hashCode = (hashCode &* 31) &+ playerLatitude.hashValue
            }
            if hasPlayerLongitude {
               hashCode = (hashCode &* 31) &+ playerLongitude.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Networking.Requests.Messages.StartGymBattleMessage"
    }
    override public func className() -> String {
        return "Pogoprotos.Networking.Requests.Messages.StartGymBattleMessage"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Networking.Requests.Messages.StartGymBattleMessage.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Networking.Requests.Messages.StartGymBattleMessage = Pogoprotos.Networking.Requests.Messages.StartGymBattleMessage()
      public func getMessage() -> Pogoprotos.Networking.Requests.Messages.StartGymBattleMessage {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasGymId:Bool {
           get {
                return builderResult.hasGymId
           }
      }
      public var gymId:String {
           get {
                return builderResult.gymId
           }
           set (value) {
               builderResult.hasGymId = true
               builderResult.gymId = value
           }
      }
      public func setGymId(value:String) -> Pogoprotos.Networking.Requests.Messages.StartGymBattleMessage.Builder {
        self.gymId = value
        return self
      }
      public func clearGymId() -> Pogoprotos.Networking.Requests.Messages.StartGymBattleMessage.Builder{
           builderResult.hasGymId = false
           builderResult.gymId = ""
           return self
      }
      public var attackingPokemonIds:Array<UInt64> {
           get {
               return builderResult.attackingPokemonIds
           }
           set (array) {
               builderResult.attackingPokemonIds = array
           }
      }
      public func setAttackingPokemonIds(value:Array<UInt64>) -> Pogoprotos.Networking.Requests.Messages.StartGymBattleMessage.Builder {
        self.attackingPokemonIds = value
        return self
      }
      public func clearAttackingPokemonIds() -> Pogoprotos.Networking.Requests.Messages.StartGymBattleMessage.Builder {
         builderResult.attackingPokemonIds.removeAll(keepCapacity: false)
         return self
      }
      public var hasDefendingPokemonId:Bool {
           get {
                return builderResult.hasDefendingPokemonId
           }
      }
      public var defendingPokemonId:UInt64 {
           get {
                return builderResult.defendingPokemonId
           }
           set (value) {
               builderResult.hasDefendingPokemonId = true
               builderResult.defendingPokemonId = value
           }
      }
      public func setDefendingPokemonId(value:UInt64) -> Pogoprotos.Networking.Requests.Messages.StartGymBattleMessage.Builder {
        self.defendingPokemonId = value
        return self
      }
      public func clearDefendingPokemonId() -> Pogoprotos.Networking.Requests.Messages.StartGymBattleMessage.Builder{
           builderResult.hasDefendingPokemonId = false
           builderResult.defendingPokemonId = UInt64(0)
           return self
      }
      public var hasPlayerLatitude:Bool {
           get {
                return builderResult.hasPlayerLatitude
           }
      }
      public var playerLatitude:Double {
           get {
                return builderResult.playerLatitude
           }
           set (value) {
               builderResult.hasPlayerLatitude = true
               builderResult.playerLatitude = value
           }
      }
      public func setPlayerLatitude(value:Double) -> Pogoprotos.Networking.Requests.Messages.StartGymBattleMessage.Builder {
        self.playerLatitude = value
        return self
      }
      public func clearPlayerLatitude() -> Pogoprotos.Networking.Requests.Messages.StartGymBattleMessage.Builder{
           builderResult.hasPlayerLatitude = false
           builderResult.playerLatitude = Double(0)
           return self
      }
      public var hasPlayerLongitude:Bool {
           get {
                return builderResult.hasPlayerLongitude
           }
      }
      public var playerLongitude:Double {
           get {
                return builderResult.playerLongitude
           }
           set (value) {
               builderResult.hasPlayerLongitude = true
               builderResult.playerLongitude = value
           }
      }
      public func setPlayerLongitude(value:Double) -> Pogoprotos.Networking.Requests.Messages.StartGymBattleMessage.Builder {
        self.playerLongitude = value
        return self
      }
      public func clearPlayerLongitude() -> Pogoprotos.Networking.Requests.Messages.StartGymBattleMessage.Builder{
           builderResult.hasPlayerLongitude = false
           builderResult.playerLongitude = Double(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Networking.Requests.Messages.StartGymBattleMessage.Builder {
        builderResult = Pogoprotos.Networking.Requests.Messages.StartGymBattleMessage()
        return self
      }
      override public func clone() throws -> Pogoprotos.Networking.Requests.Messages.StartGymBattleMessage.Builder {
        return try Pogoprotos.Networking.Requests.Messages.StartGymBattleMessage.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Networking.Requests.Messages.StartGymBattleMessage {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Networking.Requests.Messages.StartGymBattleMessage {
        let returnMe:Pogoprotos.Networking.Requests.Messages.StartGymBattleMessage = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Networking.Requests.Messages.StartGymBattleMessage) throws -> Pogoprotos.Networking.Requests.Messages.StartGymBattleMessage.Builder {
        if other == Pogoprotos.Networking.Requests.Messages.StartGymBattleMessage() {
         return self
        }
        if other.hasGymId {
             gymId = other.gymId
        }
        if !other.attackingPokemonIds.isEmpty {
            builderResult.attackingPokemonIds += other.attackingPokemonIds
        }
        if other.hasDefendingPokemonId {
             defendingPokemonId = other.defendingPokemonId
        }
        if other.hasPlayerLatitude {
             playerLatitude = other.playerLatitude
        }
        if other.hasPlayerLongitude {
             playerLongitude = other.playerLongitude
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Requests.Messages.StartGymBattleMessage.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Requests.Messages.StartGymBattleMessage.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10:
            gymId = try input.readString()

          case 18:
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.attackingPokemonIds += [try input.readFixed64()]
            }
            input.popLimit(limit)

          case 24:
            defendingPokemonId = try input.readUInt64()

          case 33:
            playerLatitude = try input.readDouble()

          case 41:
            playerLongitude = try input.readDouble()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Requests.Messages.StartGymBattleMessage.Builder {
        let resultDecodedBuilder = Pogoprotos.Networking.Requests.Messages.StartGymBattleMessage.Builder()
        if let jsonValueGymId = jsonMap["gymId"] as? String {
          resultDecodedBuilder.gymId = jsonValueGymId
        }
        if let jsonValueAttackingPokemonIds = jsonMap["attackingPokemonIds"] as? Array<String> {
          var jsonArrayAttackingPokemonIds:Array<UInt64> = []
          for oneValueAttackingPokemonIds in jsonValueAttackingPokemonIds {
            jsonArrayAttackingPokemonIds += [UInt64(oneValueAttackingPokemonIds)!]
          }
          resultDecodedBuilder.attackingPokemonIds = jsonArrayAttackingPokemonIds
        }
        if let jsonValueDefendingPokemonId = jsonMap["defendingPokemonId"] as? String {
          resultDecodedBuilder.defendingPokemonId = UInt64(jsonValueDefendingPokemonId)!
        }
        if let jsonValuePlayerLatitude = jsonMap["playerLatitude"] as? NSNumber {
          resultDecodedBuilder.playerLatitude = jsonValuePlayerLatitude.doubleValue
        }
        if let jsonValuePlayerLongitude = jsonMap["playerLongitude"] as? NSNumber {
          resultDecodedBuilder.playerLongitude = jsonValuePlayerLongitude.doubleValue
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Networking.Requests.Messages.StartGymBattleMessage.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Networking.Requests.Messages.StartGymBattleMessage.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
