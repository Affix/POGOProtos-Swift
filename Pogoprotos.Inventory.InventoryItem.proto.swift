// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "InventoryItem.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Pogoprotos { public struct Inventory { }}

public func == (lhs: Pogoprotos.Inventory.InventoryItem, rhs: Pogoprotos.Inventory.InventoryItem) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasModifiedTimestampMs == rhs.hasModifiedTimestampMs) && (!lhs.hasModifiedTimestampMs || lhs.modifiedTimestampMs == rhs.modifiedTimestampMs)
  fieldCheck = fieldCheck && (lhs.hasDeletedItemKey == rhs.hasDeletedItemKey) && (!lhs.hasDeletedItemKey || lhs.deletedItemKey == rhs.deletedItemKey)
  fieldCheck = fieldCheck && (lhs.hasInventoryItemData == rhs.hasInventoryItemData) && (!lhs.hasInventoryItemData || lhs.inventoryItemData == rhs.inventoryItemData)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Pogoprotos.Inventory {
  public struct InventoryItemRoot {
    public static var sharedInstance : InventoryItemRoot {
     struct Static {
         static let instance : InventoryItemRoot = InventoryItemRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Pogoprotos.Inventory.InventoryItemDataRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class InventoryItem : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasModifiedTimestampMs:Bool = false
    public private(set) var modifiedTimestampMs:Int64 = Int64(0)

    public private(set) var hasDeletedItemKey:Bool = false
    public private(set) var deletedItemKey:Int64 = Int64(0)

    public private(set) var hasInventoryItemData:Bool = false
    public private(set) var inventoryItemData:Pogoprotos.Inventory.InventoryItemData!
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasModifiedTimestampMs {
        try output.writeInt64(1, value:modifiedTimestampMs)
      }
      if hasDeletedItemKey {
        try output.writeInt64(2, value:deletedItemKey)
      }
      if hasInventoryItemData {
        try output.writeMessage(3, value:inventoryItemData)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasModifiedTimestampMs {
        serialize_size += modifiedTimestampMs.computeInt64Size(1)
      }
      if hasDeletedItemKey {
        serialize_size += deletedItemKey.computeInt64Size(2)
      }
      if hasInventoryItemData {
          if let varSizeinventoryItemData = inventoryItemData?.computeMessageSize(3) {
              serialize_size += varSizeinventoryItemData
          }
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Inventory.InventoryItem> {
      var mergedArray = Array<Pogoprotos.Inventory.InventoryItem>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Inventory.InventoryItem? {
      return try Pogoprotos.Inventory.InventoryItem.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Inventory.InventoryItem {
      return try Pogoprotos.Inventory.InventoryItem.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Inventory.InventoryItemRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Inventory.InventoryItem {
      return try Pogoprotos.Inventory.InventoryItem.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Inventory.InventoryItem {
      return try Pogoprotos.Inventory.InventoryItem.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Inventory.InventoryItem {
      return try Pogoprotos.Inventory.InventoryItem.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Inventory.InventoryItem {
      return try Pogoprotos.Inventory.InventoryItem.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Inventory.InventoryItem {
      return try Pogoprotos.Inventory.InventoryItem.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Inventory.InventoryItem.Builder {
      return Pogoprotos.Inventory.InventoryItem.classBuilder() as! Pogoprotos.Inventory.InventoryItem.Builder
    }
    public func getBuilder() -> Pogoprotos.Inventory.InventoryItem.Builder {
      return classBuilder() as! Pogoprotos.Inventory.InventoryItem.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Inventory.InventoryItem.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Inventory.InventoryItem.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Inventory.InventoryItem.Builder {
      return try Pogoprotos.Inventory.InventoryItem.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Inventory.InventoryItem) throws -> Pogoprotos.Inventory.InventoryItem.Builder {
      return try Pogoprotos.Inventory.InventoryItem.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasModifiedTimestampMs {
        jsonMap["modifiedTimestampMs"] = "\(modifiedTimestampMs)"
      }
      if hasDeletedItemKey {
        jsonMap["deletedItemKey"] = "\(deletedItemKey)"
      }
      if hasInventoryItemData {
        jsonMap["inventoryItemData"] = try inventoryItemData.encode()
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Inventory.InventoryItem {
      return try Pogoprotos.Inventory.InventoryItem.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Inventory.InventoryItem {
      return try Pogoprotos.Inventory.InventoryItem.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasModifiedTimestampMs {
        output += "\(indent) modifiedTimestampMs: \(modifiedTimestampMs) \n"
      }
      if hasDeletedItemKey {
        output += "\(indent) deletedItemKey: \(deletedItemKey) \n"
      }
      if hasInventoryItemData {
        output += "\(indent) inventoryItemData {\n"
        if let outDescInventoryItemData = inventoryItemData {
          output += try outDescInventoryItemData.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasModifiedTimestampMs {
               hashCode = (hashCode &* 31) &+ modifiedTimestampMs.hashValue
            }
            if hasDeletedItemKey {
               hashCode = (hashCode &* 31) &+ deletedItemKey.hashValue
            }
            if hasInventoryItemData {
                if let hashValueinventoryItemData = inventoryItemData?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueinventoryItemData
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Inventory.InventoryItem"
    }
    override public func className() -> String {
        return "Pogoprotos.Inventory.InventoryItem"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Inventory.InventoryItem.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Inventory.InventoryItem = Pogoprotos.Inventory.InventoryItem()
      public func getMessage() -> Pogoprotos.Inventory.InventoryItem {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasModifiedTimestampMs:Bool {
           get {
                return builderResult.hasModifiedTimestampMs
           }
      }
      public var modifiedTimestampMs:Int64 {
           get {
                return builderResult.modifiedTimestampMs
           }
           set (value) {
               builderResult.hasModifiedTimestampMs = true
               builderResult.modifiedTimestampMs = value
           }
      }
      public func setModifiedTimestampMs(value:Int64) -> Pogoprotos.Inventory.InventoryItem.Builder {
        self.modifiedTimestampMs = value
        return self
      }
      public func clearModifiedTimestampMs() -> Pogoprotos.Inventory.InventoryItem.Builder{
           builderResult.hasModifiedTimestampMs = false
           builderResult.modifiedTimestampMs = Int64(0)
           return self
      }
      public var hasDeletedItemKey:Bool {
           get {
                return builderResult.hasDeletedItemKey
           }
      }
      public var deletedItemKey:Int64 {
           get {
                return builderResult.deletedItemKey
           }
           set (value) {
               builderResult.hasDeletedItemKey = true
               builderResult.deletedItemKey = value
           }
      }
      public func setDeletedItemKey(value:Int64) -> Pogoprotos.Inventory.InventoryItem.Builder {
        self.deletedItemKey = value
        return self
      }
      public func clearDeletedItemKey() -> Pogoprotos.Inventory.InventoryItem.Builder{
           builderResult.hasDeletedItemKey = false
           builderResult.deletedItemKey = Int64(0)
           return self
      }
      public var hasInventoryItemData:Bool {
           get {
               return builderResult.hasInventoryItemData
           }
      }
      public var inventoryItemData:Pogoprotos.Inventory.InventoryItemData! {
           get {
               if inventoryItemDataBuilder_ != nil {
                  builderResult.inventoryItemData = inventoryItemDataBuilder_.getMessage()
               }
               return builderResult.inventoryItemData
           }
           set (value) {
               builderResult.hasInventoryItemData = true
               builderResult.inventoryItemData = value
           }
      }
      private var inventoryItemDataBuilder_:Pogoprotos.Inventory.InventoryItemData.Builder! {
           didSet {
              builderResult.hasInventoryItemData = true
           }
      }
      public func getInventoryItemDataBuilder() -> Pogoprotos.Inventory.InventoryItemData.Builder {
        if inventoryItemDataBuilder_ == nil {
           inventoryItemDataBuilder_ = Pogoprotos.Inventory.InventoryItemData.Builder()
           builderResult.inventoryItemData = inventoryItemDataBuilder_.getMessage()
           if inventoryItemData != nil {
              try! inventoryItemDataBuilder_.mergeFrom(inventoryItemData)
           }
        }
        return inventoryItemDataBuilder_
      }
      public func setInventoryItemData(value:Pogoprotos.Inventory.InventoryItemData!) -> Pogoprotos.Inventory.InventoryItem.Builder {
        self.inventoryItemData = value
        return self
      }
      public func mergeInventoryItemData(value:Pogoprotos.Inventory.InventoryItemData) throws -> Pogoprotos.Inventory.InventoryItem.Builder {
        if builderResult.hasInventoryItemData {
          builderResult.inventoryItemData = try Pogoprotos.Inventory.InventoryItemData.builderWithPrototype(builderResult.inventoryItemData).mergeFrom(value).buildPartial()
        } else {
          builderResult.inventoryItemData = value
        }
        builderResult.hasInventoryItemData = true
        return self
      }
      public func clearInventoryItemData() -> Pogoprotos.Inventory.InventoryItem.Builder {
        inventoryItemDataBuilder_ = nil
        builderResult.hasInventoryItemData = false
        builderResult.inventoryItemData = nil
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Inventory.InventoryItem.Builder {
        builderResult = Pogoprotos.Inventory.InventoryItem()
        return self
      }
      override public func clone() throws -> Pogoprotos.Inventory.InventoryItem.Builder {
        return try Pogoprotos.Inventory.InventoryItem.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Inventory.InventoryItem {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Inventory.InventoryItem {
        let returnMe:Pogoprotos.Inventory.InventoryItem = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Inventory.InventoryItem) throws -> Pogoprotos.Inventory.InventoryItem.Builder {
        if other == Pogoprotos.Inventory.InventoryItem() {
         return self
        }
        if other.hasModifiedTimestampMs {
             modifiedTimestampMs = other.modifiedTimestampMs
        }
        if other.hasDeletedItemKey {
             deletedItemKey = other.deletedItemKey
        }
        if (other.hasInventoryItemData) {
            try mergeInventoryItemData(other.inventoryItemData)
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Inventory.InventoryItem.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Inventory.InventoryItem.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            modifiedTimestampMs = try input.readInt64()

          case 16:
            deletedItemKey = try input.readInt64()

          case 26:
            let subBuilder:Pogoprotos.Inventory.InventoryItemData.Builder = Pogoprotos.Inventory.InventoryItemData.Builder()
            if hasInventoryItemData {
              try subBuilder.mergeFrom(inventoryItemData)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            inventoryItemData = subBuilder.buildPartial()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Inventory.InventoryItem.Builder {
        let resultDecodedBuilder = Pogoprotos.Inventory.InventoryItem.Builder()
        if let jsonValueModifiedTimestampMs = jsonMap["modifiedTimestampMs"] as? String {
          resultDecodedBuilder.modifiedTimestampMs = Int64(jsonValueModifiedTimestampMs)!
        }
        if let jsonValueDeletedItemKey = jsonMap["deletedItemKey"] as? String {
          resultDecodedBuilder.deletedItemKey = Int64(jsonValueDeletedItemKey)!
        }
        if let jsonValueInventoryItemData = jsonMap["inventoryItemData"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.inventoryItemData = try Pogoprotos.Inventory.InventoryItemData.Builder.decodeToBuilder(jsonValueInventoryItemData).build()

        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Inventory.InventoryItem.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Inventory.InventoryItem.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
