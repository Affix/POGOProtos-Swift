// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "ResponseEnvelope.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Pogoprotos { public struct Networking { public struct Envelopes { }}}

public func == (lhs: Pogoprotos.Networking.Envelopes.ResponseEnvelope, rhs: Pogoprotos.Networking.Envelopes.ResponseEnvelope) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasStatusCode == rhs.hasStatusCode) && (!lhs.hasStatusCode || lhs.statusCode == rhs.statusCode)
  fieldCheck = fieldCheck && (lhs.hasRequestId == rhs.hasRequestId) && (!lhs.hasRequestId || lhs.requestId == rhs.requestId)
  fieldCheck = fieldCheck && (lhs.hasApiUrl == rhs.hasApiUrl) && (!lhs.hasApiUrl || lhs.apiUrl == rhs.apiUrl)
  fieldCheck = fieldCheck && (lhs.hasUnknown6 == rhs.hasUnknown6) && (!lhs.hasUnknown6 || lhs.unknown6 == rhs.unknown6)
  fieldCheck = fieldCheck && (lhs.hasAuthTicket == rhs.hasAuthTicket) && (!lhs.hasAuthTicket || lhs.authTicket == rhs.authTicket)
  fieldCheck = fieldCheck && (lhs.returns == rhs.returns)
  fieldCheck = fieldCheck && (lhs.hasError == rhs.hasError) && (!lhs.hasError || lhs.error == rhs.error)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7, rhs: Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasUnknown71 == rhs.hasUnknown71) && (!lhs.hasUnknown71 || lhs.unknown71 == rhs.unknown71)
  fieldCheck = fieldCheck && (lhs.hasUnknown72 == rhs.hasUnknown72) && (!lhs.hasUnknown72 || lhs.unknown72 == rhs.unknown72)
  fieldCheck = fieldCheck && (lhs.hasUnknown73 == rhs.hasUnknown73) && (!lhs.hasUnknown73 || lhs.unknown73 == rhs.unknown73)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Pogoprotos.Networking.Envelopes {
  public struct ResponseEnvelopeRoot {
    public static var sharedInstance : ResponseEnvelopeRoot {
     struct Static {
         static let instance : ResponseEnvelopeRoot = ResponseEnvelopeRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Pogoprotos.Networking.Envelopes.AuthTicketRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Networking.Envelopes.Unknown6ResponseRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class ResponseEnvelope : GeneratedMessage, GeneratedMessageProtocol {


    //Nested type declaration start

      final public class Unknown7 : GeneratedMessage, GeneratedMessageProtocol {
        public private(set) var hasUnknown71:Bool = false
        public private(set) var unknown71:NSData = NSData()

        public private(set) var hasUnknown72:Bool = false
        public private(set) var unknown72:Int64 = Int64(0)

        public private(set) var hasUnknown73:Bool = false
        public private(set) var unknown73:NSData = NSData()

        required public init() {
             super.init()
        }
        override public func isInitialized() -> Bool {
         return true
        }
        override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
          if hasUnknown71 {
            try output.writeData(1, value:unknown71)
          }
          if hasUnknown72 {
            try output.writeInt64(2, value:unknown72)
          }
          if hasUnknown73 {
            try output.writeData(3, value:unknown73)
          }
          try unknownFields.writeToCodedOutputStream(output)
        }
        override public func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasUnknown71 {
            serialize_size += unknown71.computeDataSize(1)
          }
          if hasUnknown72 {
            serialize_size += unknown72.computeInt64Size(2)
          }
          if hasUnknown73 {
            serialize_size += unknown73.computeDataSize(3)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7> {
          var mergedArray = Array<Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7>()
          while let value = try parseFromDelimitedFromInputStream(input) {
            mergedArray += [value]
          }
          return mergedArray
        }
        public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7? {
          return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.Builder().mergeDelimitedFromInputStream(input)?.build()
        }
        public class func parseFromData(data:NSData) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7 {
          return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Networking.Envelopes.ResponseEnvelopeRoot.sharedInstance.extensionRegistry).build()
        }
        public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7 {
          return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7 {
          return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.Builder().mergeFromInputStream(input).build()
        }
        public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7 {
          return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7 {
          return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.Builder().mergeFromCodedInputStream(input).build()
        }
        public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7 {
          return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func getBuilder() -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.Builder {
          return Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.classBuilder() as! Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.Builder
        }
        public func getBuilder() -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.Builder {
          return classBuilder() as! Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.Builder
        }
        override public class func classBuilder() -> MessageBuilder {
          return Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.Builder()
        }
        override public func classBuilder() -> MessageBuilder {
          return Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.Builder()
        }
        public func toBuilder() throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.Builder {
          return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.builderWithPrototype(self)
        }
        public class func builderWithPrototype(prototype:Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.Builder {
          return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.Builder().mergeFrom(prototype)
        }
        override public func encode() throws -> Dictionary<String,AnyObject> {
          guard isInitialized() else {
            throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
          }

          var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
          if hasUnknown71 {
            jsonMap["unknown71"] = unknown71.base64EncodedStringWithOptions(NSDataBase64EncodingOptions(rawValue: 0))
          }
          if hasUnknown72 {
            jsonMap["unknown72"] = "\(unknown72)"
          }
          if hasUnknown73 {
            jsonMap["unknown73"] = unknown73.base64EncodedStringWithOptions(NSDataBase64EncodingOptions(rawValue: 0))
          }
          return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7 {
          return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.Builder.decodeToBuilder(jsonMap).build()
        }
        override class public func fromJSON(data:NSData) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7 {
          return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.Builder.fromJSONToBuilder(data).build()
        }
        override public func getDescription(indent:String) throws -> String {
          var output = ""
          if hasUnknown71 {
            output += "\(indent) unknown71: \(unknown71) \n"
          }
          if hasUnknown72 {
            output += "\(indent) unknown72: \(unknown72) \n"
          }
          if hasUnknown73 {
            output += "\(indent) unknown73: \(unknown73) \n"
          }
          output += unknownFields.getDescription(indent)
          return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasUnknown71 {
                   hashCode = (hashCode &* 31) &+ unknown71.hashValue
                }
                if hasUnknown72 {
                   hashCode = (hashCode &* 31) &+ unknown72.hashValue
                }
                if hasUnknown73 {
                   hashCode = (hashCode &* 31) &+ unknown73.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7"
        }
        override public func className() -> String {
            return "Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7"
        }
        override public func classMetaType() -> GeneratedMessage.Type {
            return Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.self
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
          private var builderResult:Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7 = Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7()
          public func getMessage() -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7 {
              return builderResult
          }

          required override public init () {
             super.init()
          }
          public var hasUnknown71:Bool {
               get {
                    return builderResult.hasUnknown71
               }
          }
          public var unknown71:NSData {
               get {
                    return builderResult.unknown71
               }
               set (value) {
                   builderResult.hasUnknown71 = true
                   builderResult.unknown71 = value
               }
          }
          public func setUnknown71(value:NSData) -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.Builder {
            self.unknown71 = value
            return self
          }
          public func clearUnknown71() -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.Builder{
               builderResult.hasUnknown71 = false
               builderResult.unknown71 = NSData()
               return self
          }
          public var hasUnknown72:Bool {
               get {
                    return builderResult.hasUnknown72
               }
          }
          public var unknown72:Int64 {
               get {
                    return builderResult.unknown72
               }
               set (value) {
                   builderResult.hasUnknown72 = true
                   builderResult.unknown72 = value
               }
          }
          public func setUnknown72(value:Int64) -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.Builder {
            self.unknown72 = value
            return self
          }
          public func clearUnknown72() -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.Builder{
               builderResult.hasUnknown72 = false
               builderResult.unknown72 = Int64(0)
               return self
          }
          public var hasUnknown73:Bool {
               get {
                    return builderResult.hasUnknown73
               }
          }
          public var unknown73:NSData {
               get {
                    return builderResult.unknown73
               }
               set (value) {
                   builderResult.hasUnknown73 = true
                   builderResult.unknown73 = value
               }
          }
          public func setUnknown73(value:NSData) -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.Builder {
            self.unknown73 = value
            return self
          }
          public func clearUnknown73() -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.Builder{
               builderResult.hasUnknown73 = false
               builderResult.unknown73 = NSData()
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          override public func clear() -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.Builder {
            builderResult = Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7()
            return self
          }
          override public func clone() throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.Builder {
            return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.builderWithPrototype(builderResult)
          }
          override public func build() throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7 {
               try checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7 {
            let returnMe:Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7 = builderResult
            return returnMe
          }
          public func mergeFrom(other:Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.Builder {
            if other == Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7() {
             return self
            }
            if other.hasUnknown71 {
                 unknown71 = other.unknown71
            }
            if other.hasUnknown72 {
                 unknown72 = other.unknown72
            }
            if other.hasUnknown73 {
                 unknown73 = other.unknown73
            }
            try mergeUnknownFields(other.unknownFields)
            return self
          }
          override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.Builder {
               return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              let protobufTag = try input.readTag()
              switch protobufTag {
              case 0: 
                self.unknownFields = try unknownFieldsBuilder.build()
                return self

              case 10:
                unknown71 = try input.readData()

              case 16:
                unknown72 = try input.readInt64()

              case 26:
                unknown73 = try input.readData()

              default:
                if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                   unknownFields = try unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
          override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.Builder {
            let resultDecodedBuilder = Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.Builder()
            if let jsonValueUnknown71 = jsonMap["unknown71"] as? String {
              resultDecodedBuilder.unknown71 = NSData(base64EncodedString:jsonValueUnknown71, options: NSDataBase64DecodingOptions(rawValue:0))!
            }
            if let jsonValueUnknown72 = jsonMap["unknown72"] as? String {
              resultDecodedBuilder.unknown72 = Int64(jsonValueUnknown72)!
            }
            if let jsonValueUnknown73 = jsonMap["unknown73"] as? String {
              resultDecodedBuilder.unknown73 = NSData(base64EncodedString:jsonValueUnknown73, options: NSDataBase64DecodingOptions(rawValue:0))!
            }
            return resultDecodedBuilder
          }
          override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.Builder {
            let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
              throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
            }
            return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.Builder.decodeToBuilder(jsDataCast)
          }
        }

      }

    //Nested type declaration end

    public private(set) var hasStatusCode:Bool = false
    public private(set) var statusCode:Int32 = Int32(0)

    public private(set) var hasRequestId:Bool = false
    public private(set) var requestId:UInt64 = UInt64(0)

    public private(set) var hasApiUrl:Bool = false
    public private(set) var apiUrl:String = ""

    public private(set) var hasUnknown6:Bool = false
    public private(set) var unknown6:Pogoprotos.Networking.Envelopes.Unknown6Response!
    public private(set) var hasAuthTicket:Bool = false
    public private(set) var authTicket:Pogoprotos.Networking.Envelopes.AuthTicket!
    public private(set) var returns:Array<NSData> = Array<NSData>()
    public private(set) var hasError:Bool = false
    public private(set) var error:String = ""

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasStatusCode {
        try output.writeInt32(1, value:statusCode)
      }
      if hasRequestId {
        try output.writeUInt64(2, value:requestId)
      }
      if hasApiUrl {
        try output.writeString(3, value:apiUrl)
      }
      if hasUnknown6 {
        try output.writeMessage(6, value:unknown6)
      }
      if hasAuthTicket {
        try output.writeMessage(7, value:authTicket)
      }
      if !returns.isEmpty {
        for oneValuereturns in returns {
          try output.writeData(100, value:oneValuereturns)
        }
      }
      if hasError {
        try output.writeString(101, value:error)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasStatusCode {
        serialize_size += statusCode.computeInt32Size(1)
      }
      if hasRequestId {
        serialize_size += requestId.computeUInt64Size(2)
      }
      if hasApiUrl {
        serialize_size += apiUrl.computeStringSize(3)
      }
      if hasUnknown6 {
          if let varSizeunknown6 = unknown6?.computeMessageSize(6) {
              serialize_size += varSizeunknown6
          }
      }
      if hasAuthTicket {
          if let varSizeauthTicket = authTicket?.computeMessageSize(7) {
              serialize_size += varSizeauthTicket
          }
      }
      var dataSizeReturns:Int32 = 0
      for oneValuereturns in returns {
          dataSizeReturns += oneValuereturns.computeDataSizeNoTag()
      }
      serialize_size += dataSizeReturns
      serialize_size += 2 * Int32(returns.count)
      if hasError {
        serialize_size += error.computeStringSize(101)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Networking.Envelopes.ResponseEnvelope> {
      var mergedArray = Array<Pogoprotos.Networking.Envelopes.ResponseEnvelope>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope? {
      return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope {
      return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Networking.Envelopes.ResponseEnvelopeRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope {
      return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope {
      return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope {
      return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope {
      return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope {
      return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
      return Pogoprotos.Networking.Envelopes.ResponseEnvelope.classBuilder() as! Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder
    }
    public func getBuilder() -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
      return classBuilder() as! Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
      return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Networking.Envelopes.ResponseEnvelope) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
      return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasStatusCode {
        jsonMap["statusCode"] = NSNumber(int:statusCode)
      }
      if hasRequestId {
        jsonMap["requestId"] = "\(requestId)"
      }
      if hasApiUrl {
        jsonMap["apiUrl"] = apiUrl
      }
      if hasUnknown6 {
        jsonMap["unknown6"] = try unknown6.encode()
      }
      if hasAuthTicket {
        jsonMap["authTicket"] = try authTicket.encode()
      }
      if !returns.isEmpty {
        var jsonArrayReturns:Array<String> = []
          for oneValueReturns in returns {
            jsonArrayReturns += [oneValueReturns.base64EncodedStringWithOptions(NSDataBase64EncodingOptions(rawValue: 0))]
          }
        jsonMap["returns"] = jsonArrayReturns
      }
      if hasError {
        jsonMap["error"] = error
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope {
      return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope {
      return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasStatusCode {
        output += "\(indent) statusCode: \(statusCode) \n"
      }
      if hasRequestId {
        output += "\(indent) requestId: \(requestId) \n"
      }
      if hasApiUrl {
        output += "\(indent) apiUrl: \(apiUrl) \n"
      }
      if hasUnknown6 {
        output += "\(indent) unknown6 {\n"
        if let outDescUnknown6 = unknown6 {
          output += try outDescUnknown6.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasAuthTicket {
        output += "\(indent) authTicket {\n"
        if let outDescAuthTicket = authTicket {
          output += try outDescAuthTicket.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      var returnsElementIndex:Int = 0
      for oneValueReturns in returns  {
          output += "\(indent) returns[\(returnsElementIndex)]: \(oneValueReturns)\n"
          returnsElementIndex += 1
      }
      if hasError {
        output += "\(indent) error: \(error) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasStatusCode {
               hashCode = (hashCode &* 31) &+ statusCode.hashValue
            }
            if hasRequestId {
               hashCode = (hashCode &* 31) &+ requestId.hashValue
            }
            if hasApiUrl {
               hashCode = (hashCode &* 31) &+ apiUrl.hashValue
            }
            if hasUnknown6 {
                if let hashValueunknown6 = unknown6?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueunknown6
                }
            }
            if hasAuthTicket {
                if let hashValueauthTicket = authTicket?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueauthTicket
                }
            }
            for oneValueReturns in returns {
                hashCode = (hashCode &* 31) &+ oneValueReturns.hashValue
            }
            if hasError {
               hashCode = (hashCode &* 31) &+ error.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Networking.Envelopes.ResponseEnvelope"
    }
    override public func className() -> String {
        return "Pogoprotos.Networking.Envelopes.ResponseEnvelope"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Networking.Envelopes.ResponseEnvelope.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Networking.Envelopes.ResponseEnvelope = Pogoprotos.Networking.Envelopes.ResponseEnvelope()
      public func getMessage() -> Pogoprotos.Networking.Envelopes.ResponseEnvelope {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasStatusCode:Bool {
           get {
                return builderResult.hasStatusCode
           }
      }
      public var statusCode:Int32 {
           get {
                return builderResult.statusCode
           }
           set (value) {
               builderResult.hasStatusCode = true
               builderResult.statusCode = value
           }
      }
      public func setStatusCode(value:Int32) -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
        self.statusCode = value
        return self
      }
      public func clearStatusCode() -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder{
           builderResult.hasStatusCode = false
           builderResult.statusCode = Int32(0)
           return self
      }
      public var hasRequestId:Bool {
           get {
                return builderResult.hasRequestId
           }
      }
      public var requestId:UInt64 {
           get {
                return builderResult.requestId
           }
           set (value) {
               builderResult.hasRequestId = true
               builderResult.requestId = value
           }
      }
      public func setRequestId(value:UInt64) -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
        self.requestId = value
        return self
      }
      public func clearRequestId() -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder{
           builderResult.hasRequestId = false
           builderResult.requestId = UInt64(0)
           return self
      }
      public var hasApiUrl:Bool {
           get {
                return builderResult.hasApiUrl
           }
      }
      public var apiUrl:String {
           get {
                return builderResult.apiUrl
           }
           set (value) {
               builderResult.hasApiUrl = true
               builderResult.apiUrl = value
           }
      }
      public func setApiUrl(value:String) -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
        self.apiUrl = value
        return self
      }
      public func clearApiUrl() -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder{
           builderResult.hasApiUrl = false
           builderResult.apiUrl = ""
           return self
      }
      public var hasUnknown6:Bool {
           get {
               return builderResult.hasUnknown6
           }
      }
      public var unknown6:Pogoprotos.Networking.Envelopes.Unknown6Response! {
           get {
               if unknown6Builder_ != nil {
                  builderResult.unknown6 = unknown6Builder_.getMessage()
               }
               return builderResult.unknown6
           }
           set (value) {
               builderResult.hasUnknown6 = true
               builderResult.unknown6 = value
           }
      }
      private var unknown6Builder_:Pogoprotos.Networking.Envelopes.Unknown6Response.Builder! {
           didSet {
              builderResult.hasUnknown6 = true
           }
      }
      public func getUnknown6Builder() -> Pogoprotos.Networking.Envelopes.Unknown6Response.Builder {
        if unknown6Builder_ == nil {
           unknown6Builder_ = Pogoprotos.Networking.Envelopes.Unknown6Response.Builder()
           builderResult.unknown6 = unknown6Builder_.getMessage()
           if unknown6 != nil {
              try! unknown6Builder_.mergeFrom(unknown6)
           }
        }
        return unknown6Builder_
      }
      public func setUnknown6(value:Pogoprotos.Networking.Envelopes.Unknown6Response!) -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
        self.unknown6 = value
        return self
      }
      public func mergeUnknown6(value:Pogoprotos.Networking.Envelopes.Unknown6Response) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
        if builderResult.hasUnknown6 {
          builderResult.unknown6 = try Pogoprotos.Networking.Envelopes.Unknown6Response.builderWithPrototype(builderResult.unknown6).mergeFrom(value).buildPartial()
        } else {
          builderResult.unknown6 = value
        }
        builderResult.hasUnknown6 = true
        return self
      }
      public func clearUnknown6() -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
        unknown6Builder_ = nil
        builderResult.hasUnknown6 = false
        builderResult.unknown6 = nil
        return self
      }
      public var hasAuthTicket:Bool {
           get {
               return builderResult.hasAuthTicket
           }
      }
      public var authTicket:Pogoprotos.Networking.Envelopes.AuthTicket! {
           get {
               if authTicketBuilder_ != nil {
                  builderResult.authTicket = authTicketBuilder_.getMessage()
               }
               return builderResult.authTicket
           }
           set (value) {
               builderResult.hasAuthTicket = true
               builderResult.authTicket = value
           }
      }
      private var authTicketBuilder_:Pogoprotos.Networking.Envelopes.AuthTicket.Builder! {
           didSet {
              builderResult.hasAuthTicket = true
           }
      }
      public func getAuthTicketBuilder() -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder {
        if authTicketBuilder_ == nil {
           authTicketBuilder_ = Pogoprotos.Networking.Envelopes.AuthTicket.Builder()
           builderResult.authTicket = authTicketBuilder_.getMessage()
           if authTicket != nil {
              try! authTicketBuilder_.mergeFrom(authTicket)
           }
        }
        return authTicketBuilder_
      }
      public func setAuthTicket(value:Pogoprotos.Networking.Envelopes.AuthTicket!) -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
        self.authTicket = value
        return self
      }
      public func mergeAuthTicket(value:Pogoprotos.Networking.Envelopes.AuthTicket) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
        if builderResult.hasAuthTicket {
          builderResult.authTicket = try Pogoprotos.Networking.Envelopes.AuthTicket.builderWithPrototype(builderResult.authTicket).mergeFrom(value).buildPartial()
        } else {
          builderResult.authTicket = value
        }
        builderResult.hasAuthTicket = true
        return self
      }
      public func clearAuthTicket() -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
        authTicketBuilder_ = nil
        builderResult.hasAuthTicket = false
        builderResult.authTicket = nil
        return self
      }
      public var returns:Array<NSData> {
           get {
               return builderResult.returns
           }
           set (array) {
               builderResult.returns = array
           }
      }
      public func setReturns(value:Array<NSData>) -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
        self.returns = value
        return self
      }
      public func clearReturns() -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
         builderResult.returns.removeAll(keepCapacity: false)
         return self
      }
      public var hasError:Bool {
           get {
                return builderResult.hasError
           }
      }
      public var error:String {
           get {
                return builderResult.error
           }
           set (value) {
               builderResult.hasError = true
               builderResult.error = value
           }
      }
      public func setError(value:String) -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
        self.error = value
        return self
      }
      public func clearError() -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder{
           builderResult.hasError = false
           builderResult.error = ""
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
        builderResult = Pogoprotos.Networking.Envelopes.ResponseEnvelope()
        return self
      }
      override public func clone() throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
        return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Networking.Envelopes.ResponseEnvelope {
        let returnMe:Pogoprotos.Networking.Envelopes.ResponseEnvelope = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Networking.Envelopes.ResponseEnvelope) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
        if other == Pogoprotos.Networking.Envelopes.ResponseEnvelope() {
         return self
        }
        if other.hasStatusCode {
             statusCode = other.statusCode
        }
        if other.hasRequestId {
             requestId = other.requestId
        }
        if other.hasApiUrl {
             apiUrl = other.apiUrl
        }
        if (other.hasUnknown6) {
            try mergeUnknown6(other.unknown6)
        }
        if (other.hasAuthTicket) {
            try mergeAuthTicket(other.authTicket)
        }
        if !other.returns.isEmpty {
            builderResult.returns += other.returns
        }
        if other.hasError {
             error = other.error
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            statusCode = try input.readInt32()

          case 16:
            requestId = try input.readUInt64()

          case 26:
            apiUrl = try input.readString()

          case 50:
            let subBuilder:Pogoprotos.Networking.Envelopes.Unknown6Response.Builder = Pogoprotos.Networking.Envelopes.Unknown6Response.Builder()
            if hasUnknown6 {
              try subBuilder.mergeFrom(unknown6)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            unknown6 = subBuilder.buildPartial()

          case 58:
            let subBuilder:Pogoprotos.Networking.Envelopes.AuthTicket.Builder = Pogoprotos.Networking.Envelopes.AuthTicket.Builder()
            if hasAuthTicket {
              try subBuilder.mergeFrom(authTicket)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            authTicket = subBuilder.buildPartial()

          case 802:
            returns += [try input.readData()]

          case 810:
            error = try input.readString()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
        let resultDecodedBuilder = Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder()
        if let jsonValueStatusCode = jsonMap["statusCode"] as? NSNumber {
          resultDecodedBuilder.statusCode = jsonValueStatusCode.intValue
        }
        if let jsonValueRequestId = jsonMap["requestId"] as? String {
          resultDecodedBuilder.requestId = UInt64(jsonValueRequestId)!
        }
        if let jsonValueApiUrl = jsonMap["apiUrl"] as? String {
          resultDecodedBuilder.apiUrl = jsonValueApiUrl
        }
        if let jsonValueUnknown6 = jsonMap["unknown6"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.unknown6 = try Pogoprotos.Networking.Envelopes.Unknown6Response.Builder.decodeToBuilder(jsonValueUnknown6).build()

        }
        if let jsonValueAuthTicket = jsonMap["authTicket"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.authTicket = try Pogoprotos.Networking.Envelopes.AuthTicket.Builder.decodeToBuilder(jsonValueAuthTicket).build()

        }
        if let jsonValueReturns = jsonMap["returns"] as? Array<String> {
          var jsonArrayReturns:Array<NSData> = []
          for oneValueReturns in jsonValueReturns {
            jsonArrayReturns += [NSData(base64EncodedString:oneValueReturns, options: NSDataBase64DecodingOptions(rawValue:0))!]
          }
          resultDecodedBuilder.returns = jsonArrayReturns
        }
        if let jsonValueError = jsonMap["error"] as? String {
          resultDecodedBuilder.error = jsonValueError
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
