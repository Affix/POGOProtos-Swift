// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "GlobalSettings.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Pogoprotos { public struct Settings { }}

public func == (lhs: Pogoprotos.Settings.GlobalSettings, rhs: Pogoprotos.Settings.GlobalSettings) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasFortSettings == rhs.hasFortSettings) && (!lhs.hasFortSettings || lhs.fortSettings == rhs.fortSettings)
  fieldCheck = fieldCheck && (lhs.hasMapSettings == rhs.hasMapSettings) && (!lhs.hasMapSettings || lhs.mapSettings == rhs.mapSettings)
  fieldCheck = fieldCheck && (lhs.hasLevelSettings == rhs.hasLevelSettings) && (!lhs.hasLevelSettings || lhs.levelSettings == rhs.levelSettings)
  fieldCheck = fieldCheck && (lhs.hasInventorySettings == rhs.hasInventorySettings) && (!lhs.hasInventorySettings || lhs.inventorySettings == rhs.inventorySettings)
  fieldCheck = fieldCheck && (lhs.hasMinimumClientVersion == rhs.hasMinimumClientVersion) && (!lhs.hasMinimumClientVersion || lhs.minimumClientVersion == rhs.minimumClientVersion)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Pogoprotos.Settings {
  public struct GlobalSettingsRoot {
    public static var sharedInstance : GlobalSettingsRoot {
     struct Static {
         static let instance : GlobalSettingsRoot = GlobalSettingsRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Pogoprotos.Settings.FortSettingsRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Settings.MapSettingsRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Settings.LevelSettingsRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Settings.InventorySettingsRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class GlobalSettings : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasFortSettings:Bool = false
    public private(set) var fortSettings:Pogoprotos.Settings.FortSettings!
    public private(set) var hasMapSettings:Bool = false
    public private(set) var mapSettings:Pogoprotos.Settings.MapSettings!
    public private(set) var hasLevelSettings:Bool = false
    public private(set) var levelSettings:Pogoprotos.Settings.LevelSettings!
    public private(set) var hasInventorySettings:Bool = false
    public private(set) var inventorySettings:Pogoprotos.Settings.InventorySettings!
    public private(set) var hasMinimumClientVersion:Bool = false
    public private(set) var minimumClientVersion:String = ""

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasFortSettings {
        try output.writeMessage(2, value:fortSettings)
      }
      if hasMapSettings {
        try output.writeMessage(3, value:mapSettings)
      }
      if hasLevelSettings {
        try output.writeMessage(4, value:levelSettings)
      }
      if hasInventorySettings {
        try output.writeMessage(5, value:inventorySettings)
      }
      if hasMinimumClientVersion {
        try output.writeString(6, value:minimumClientVersion)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasFortSettings {
          if let varSizefortSettings = fortSettings?.computeMessageSize(2) {
              serialize_size += varSizefortSettings
          }
      }
      if hasMapSettings {
          if let varSizemapSettings = mapSettings?.computeMessageSize(3) {
              serialize_size += varSizemapSettings
          }
      }
      if hasLevelSettings {
          if let varSizelevelSettings = levelSettings?.computeMessageSize(4) {
              serialize_size += varSizelevelSettings
          }
      }
      if hasInventorySettings {
          if let varSizeinventorySettings = inventorySettings?.computeMessageSize(5) {
              serialize_size += varSizeinventorySettings
          }
      }
      if hasMinimumClientVersion {
        serialize_size += minimumClientVersion.computeStringSize(6)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Settings.GlobalSettings> {
      var mergedArray = Array<Pogoprotos.Settings.GlobalSettings>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.GlobalSettings? {
      return try Pogoprotos.Settings.GlobalSettings.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Settings.GlobalSettings {
      return try Pogoprotos.Settings.GlobalSettings.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Settings.GlobalSettingsRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.GlobalSettings {
      return try Pogoprotos.Settings.GlobalSettings.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.GlobalSettings {
      return try Pogoprotos.Settings.GlobalSettings.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.GlobalSettings {
      return try Pogoprotos.Settings.GlobalSettings.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.GlobalSettings {
      return try Pogoprotos.Settings.GlobalSettings.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.GlobalSettings {
      return try Pogoprotos.Settings.GlobalSettings.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Settings.GlobalSettings.Builder {
      return Pogoprotos.Settings.GlobalSettings.classBuilder() as! Pogoprotos.Settings.GlobalSettings.Builder
    }
    public func getBuilder() -> Pogoprotos.Settings.GlobalSettings.Builder {
      return classBuilder() as! Pogoprotos.Settings.GlobalSettings.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.GlobalSettings.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.GlobalSettings.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Settings.GlobalSettings.Builder {
      return try Pogoprotos.Settings.GlobalSettings.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Settings.GlobalSettings) throws -> Pogoprotos.Settings.GlobalSettings.Builder {
      return try Pogoprotos.Settings.GlobalSettings.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasFortSettings {
        jsonMap["fortSettings"] = try fortSettings.encode()
      }
      if hasMapSettings {
        jsonMap["mapSettings"] = try mapSettings.encode()
      }
      if hasLevelSettings {
        jsonMap["levelSettings"] = try levelSettings.encode()
      }
      if hasInventorySettings {
        jsonMap["inventorySettings"] = try inventorySettings.encode()
      }
      if hasMinimumClientVersion {
        jsonMap["minimumClientVersion"] = minimumClientVersion
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.GlobalSettings {
      return try Pogoprotos.Settings.GlobalSettings.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Settings.GlobalSettings {
      return try Pogoprotos.Settings.GlobalSettings.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasFortSettings {
        output += "\(indent) fortSettings {\n"
        if let outDescFortSettings = fortSettings {
          output += try outDescFortSettings.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasMapSettings {
        output += "\(indent) mapSettings {\n"
        if let outDescMapSettings = mapSettings {
          output += try outDescMapSettings.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasLevelSettings {
        output += "\(indent) levelSettings {\n"
        if let outDescLevelSettings = levelSettings {
          output += try outDescLevelSettings.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasInventorySettings {
        output += "\(indent) inventorySettings {\n"
        if let outDescInventorySettings = inventorySettings {
          output += try outDescInventorySettings.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasMinimumClientVersion {
        output += "\(indent) minimumClientVersion: \(minimumClientVersion) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasFortSettings {
                if let hashValuefortSettings = fortSettings?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuefortSettings
                }
            }
            if hasMapSettings {
                if let hashValuemapSettings = mapSettings?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuemapSettings
                }
            }
            if hasLevelSettings {
                if let hashValuelevelSettings = levelSettings?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuelevelSettings
                }
            }
            if hasInventorySettings {
                if let hashValueinventorySettings = inventorySettings?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueinventorySettings
                }
            }
            if hasMinimumClientVersion {
               hashCode = (hashCode &* 31) &+ minimumClientVersion.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Settings.GlobalSettings"
    }
    override public func className() -> String {
        return "Pogoprotos.Settings.GlobalSettings"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Settings.GlobalSettings.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Settings.GlobalSettings = Pogoprotos.Settings.GlobalSettings()
      public func getMessage() -> Pogoprotos.Settings.GlobalSettings {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasFortSettings:Bool {
           get {
               return builderResult.hasFortSettings
           }
      }
      public var fortSettings:Pogoprotos.Settings.FortSettings! {
           get {
               if fortSettingsBuilder_ != nil {
                  builderResult.fortSettings = fortSettingsBuilder_.getMessage()
               }
               return builderResult.fortSettings
           }
           set (value) {
               builderResult.hasFortSettings = true
               builderResult.fortSettings = value
           }
      }
      private var fortSettingsBuilder_:Pogoprotos.Settings.FortSettings.Builder! {
           didSet {
              builderResult.hasFortSettings = true
           }
      }
      public func getFortSettingsBuilder() -> Pogoprotos.Settings.FortSettings.Builder {
        if fortSettingsBuilder_ == nil {
           fortSettingsBuilder_ = Pogoprotos.Settings.FortSettings.Builder()
           builderResult.fortSettings = fortSettingsBuilder_.getMessage()
           if fortSettings != nil {
              try! fortSettingsBuilder_.mergeFrom(fortSettings)
           }
        }
        return fortSettingsBuilder_
      }
      public func setFortSettings(value:Pogoprotos.Settings.FortSettings!) -> Pogoprotos.Settings.GlobalSettings.Builder {
        self.fortSettings = value
        return self
      }
      public func mergeFortSettings(value:Pogoprotos.Settings.FortSettings) throws -> Pogoprotos.Settings.GlobalSettings.Builder {
        if builderResult.hasFortSettings {
          builderResult.fortSettings = try Pogoprotos.Settings.FortSettings.builderWithPrototype(builderResult.fortSettings).mergeFrom(value).buildPartial()
        } else {
          builderResult.fortSettings = value
        }
        builderResult.hasFortSettings = true
        return self
      }
      public func clearFortSettings() -> Pogoprotos.Settings.GlobalSettings.Builder {
        fortSettingsBuilder_ = nil
        builderResult.hasFortSettings = false
        builderResult.fortSettings = nil
        return self
      }
      public var hasMapSettings:Bool {
           get {
               return builderResult.hasMapSettings
           }
      }
      public var mapSettings:Pogoprotos.Settings.MapSettings! {
           get {
               if mapSettingsBuilder_ != nil {
                  builderResult.mapSettings = mapSettingsBuilder_.getMessage()
               }
               return builderResult.mapSettings
           }
           set (value) {
               builderResult.hasMapSettings = true
               builderResult.mapSettings = value
           }
      }
      private var mapSettingsBuilder_:Pogoprotos.Settings.MapSettings.Builder! {
           didSet {
              builderResult.hasMapSettings = true
           }
      }
      public func getMapSettingsBuilder() -> Pogoprotos.Settings.MapSettings.Builder {
        if mapSettingsBuilder_ == nil {
           mapSettingsBuilder_ = Pogoprotos.Settings.MapSettings.Builder()
           builderResult.mapSettings = mapSettingsBuilder_.getMessage()
           if mapSettings != nil {
              try! mapSettingsBuilder_.mergeFrom(mapSettings)
           }
        }
        return mapSettingsBuilder_
      }
      public func setMapSettings(value:Pogoprotos.Settings.MapSettings!) -> Pogoprotos.Settings.GlobalSettings.Builder {
        self.mapSettings = value
        return self
      }
      public func mergeMapSettings(value:Pogoprotos.Settings.MapSettings) throws -> Pogoprotos.Settings.GlobalSettings.Builder {
        if builderResult.hasMapSettings {
          builderResult.mapSettings = try Pogoprotos.Settings.MapSettings.builderWithPrototype(builderResult.mapSettings).mergeFrom(value).buildPartial()
        } else {
          builderResult.mapSettings = value
        }
        builderResult.hasMapSettings = true
        return self
      }
      public func clearMapSettings() -> Pogoprotos.Settings.GlobalSettings.Builder {
        mapSettingsBuilder_ = nil
        builderResult.hasMapSettings = false
        builderResult.mapSettings = nil
        return self
      }
      public var hasLevelSettings:Bool {
           get {
               return builderResult.hasLevelSettings
           }
      }
      public var levelSettings:Pogoprotos.Settings.LevelSettings! {
           get {
               if levelSettingsBuilder_ != nil {
                  builderResult.levelSettings = levelSettingsBuilder_.getMessage()
               }
               return builderResult.levelSettings
           }
           set (value) {
               builderResult.hasLevelSettings = true
               builderResult.levelSettings = value
           }
      }
      private var levelSettingsBuilder_:Pogoprotos.Settings.LevelSettings.Builder! {
           didSet {
              builderResult.hasLevelSettings = true
           }
      }
      public func getLevelSettingsBuilder() -> Pogoprotos.Settings.LevelSettings.Builder {
        if levelSettingsBuilder_ == nil {
           levelSettingsBuilder_ = Pogoprotos.Settings.LevelSettings.Builder()
           builderResult.levelSettings = levelSettingsBuilder_.getMessage()
           if levelSettings != nil {
              try! levelSettingsBuilder_.mergeFrom(levelSettings)
           }
        }
        return levelSettingsBuilder_
      }
      public func setLevelSettings(value:Pogoprotos.Settings.LevelSettings!) -> Pogoprotos.Settings.GlobalSettings.Builder {
        self.levelSettings = value
        return self
      }
      public func mergeLevelSettings(value:Pogoprotos.Settings.LevelSettings) throws -> Pogoprotos.Settings.GlobalSettings.Builder {
        if builderResult.hasLevelSettings {
          builderResult.levelSettings = try Pogoprotos.Settings.LevelSettings.builderWithPrototype(builderResult.levelSettings).mergeFrom(value).buildPartial()
        } else {
          builderResult.levelSettings = value
        }
        builderResult.hasLevelSettings = true
        return self
      }
      public func clearLevelSettings() -> Pogoprotos.Settings.GlobalSettings.Builder {
        levelSettingsBuilder_ = nil
        builderResult.hasLevelSettings = false
        builderResult.levelSettings = nil
        return self
      }
      public var hasInventorySettings:Bool {
           get {
               return builderResult.hasInventorySettings
           }
      }
      public var inventorySettings:Pogoprotos.Settings.InventorySettings! {
           get {
               if inventorySettingsBuilder_ != nil {
                  builderResult.inventorySettings = inventorySettingsBuilder_.getMessage()
               }
               return builderResult.inventorySettings
           }
           set (value) {
               builderResult.hasInventorySettings = true
               builderResult.inventorySettings = value
           }
      }
      private var inventorySettingsBuilder_:Pogoprotos.Settings.InventorySettings.Builder! {
           didSet {
              builderResult.hasInventorySettings = true
           }
      }
      public func getInventorySettingsBuilder() -> Pogoprotos.Settings.InventorySettings.Builder {
        if inventorySettingsBuilder_ == nil {
           inventorySettingsBuilder_ = Pogoprotos.Settings.InventorySettings.Builder()
           builderResult.inventorySettings = inventorySettingsBuilder_.getMessage()
           if inventorySettings != nil {
              try! inventorySettingsBuilder_.mergeFrom(inventorySettings)
           }
        }
        return inventorySettingsBuilder_
      }
      public func setInventorySettings(value:Pogoprotos.Settings.InventorySettings!) -> Pogoprotos.Settings.GlobalSettings.Builder {
        self.inventorySettings = value
        return self
      }
      public func mergeInventorySettings(value:Pogoprotos.Settings.InventorySettings) throws -> Pogoprotos.Settings.GlobalSettings.Builder {
        if builderResult.hasInventorySettings {
          builderResult.inventorySettings = try Pogoprotos.Settings.InventorySettings.builderWithPrototype(builderResult.inventorySettings).mergeFrom(value).buildPartial()
        } else {
          builderResult.inventorySettings = value
        }
        builderResult.hasInventorySettings = true
        return self
      }
      public func clearInventorySettings() -> Pogoprotos.Settings.GlobalSettings.Builder {
        inventorySettingsBuilder_ = nil
        builderResult.hasInventorySettings = false
        builderResult.inventorySettings = nil
        return self
      }
      public var hasMinimumClientVersion:Bool {
           get {
                return builderResult.hasMinimumClientVersion
           }
      }
      public var minimumClientVersion:String {
           get {
                return builderResult.minimumClientVersion
           }
           set (value) {
               builderResult.hasMinimumClientVersion = true
               builderResult.minimumClientVersion = value
           }
      }
      public func setMinimumClientVersion(value:String) -> Pogoprotos.Settings.GlobalSettings.Builder {
        self.minimumClientVersion = value
        return self
      }
      public func clearMinimumClientVersion() -> Pogoprotos.Settings.GlobalSettings.Builder{
           builderResult.hasMinimumClientVersion = false
           builderResult.minimumClientVersion = ""
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Settings.GlobalSettings.Builder {
        builderResult = Pogoprotos.Settings.GlobalSettings()
        return self
      }
      override public func clone() throws -> Pogoprotos.Settings.GlobalSettings.Builder {
        return try Pogoprotos.Settings.GlobalSettings.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Settings.GlobalSettings {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Settings.GlobalSettings {
        let returnMe:Pogoprotos.Settings.GlobalSettings = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Settings.GlobalSettings) throws -> Pogoprotos.Settings.GlobalSettings.Builder {
        if other == Pogoprotos.Settings.GlobalSettings() {
         return self
        }
        if (other.hasFortSettings) {
            try mergeFortSettings(other.fortSettings)
        }
        if (other.hasMapSettings) {
            try mergeMapSettings(other.mapSettings)
        }
        if (other.hasLevelSettings) {
            try mergeLevelSettings(other.levelSettings)
        }
        if (other.hasInventorySettings) {
            try mergeInventorySettings(other.inventorySettings)
        }
        if other.hasMinimumClientVersion {
             minimumClientVersion = other.minimumClientVersion
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.GlobalSettings.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.GlobalSettings.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 18:
            let subBuilder:Pogoprotos.Settings.FortSettings.Builder = Pogoprotos.Settings.FortSettings.Builder()
            if hasFortSettings {
              try subBuilder.mergeFrom(fortSettings)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            fortSettings = subBuilder.buildPartial()

          case 26:
            let subBuilder:Pogoprotos.Settings.MapSettings.Builder = Pogoprotos.Settings.MapSettings.Builder()
            if hasMapSettings {
              try subBuilder.mergeFrom(mapSettings)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            mapSettings = subBuilder.buildPartial()

          case 34:
            let subBuilder:Pogoprotos.Settings.LevelSettings.Builder = Pogoprotos.Settings.LevelSettings.Builder()
            if hasLevelSettings {
              try subBuilder.mergeFrom(levelSettings)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            levelSettings = subBuilder.buildPartial()

          case 42:
            let subBuilder:Pogoprotos.Settings.InventorySettings.Builder = Pogoprotos.Settings.InventorySettings.Builder()
            if hasInventorySettings {
              try subBuilder.mergeFrom(inventorySettings)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            inventorySettings = subBuilder.buildPartial()

          case 50:
            minimumClientVersion = try input.readString()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.GlobalSettings.Builder {
        let resultDecodedBuilder = Pogoprotos.Settings.GlobalSettings.Builder()
        if let jsonValueFortSettings = jsonMap["fortSettings"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.fortSettings = try Pogoprotos.Settings.FortSettings.Builder.decodeToBuilder(jsonValueFortSettings).build()

        }
        if let jsonValueMapSettings = jsonMap["mapSettings"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.mapSettings = try Pogoprotos.Settings.MapSettings.Builder.decodeToBuilder(jsonValueMapSettings).build()

        }
        if let jsonValueLevelSettings = jsonMap["levelSettings"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.levelSettings = try Pogoprotos.Settings.LevelSettings.Builder.decodeToBuilder(jsonValueLevelSettings).build()

        }
        if let jsonValueInventorySettings = jsonMap["inventorySettings"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.inventorySettings = try Pogoprotos.Settings.InventorySettings.Builder.decodeToBuilder(jsonValueInventorySettings).build()

        }
        if let jsonValueMinimumClientVersion = jsonMap["minimumClientVersion"] as? String {
          resultDecodedBuilder.minimumClientVersion = jsonValueMinimumClientVersion
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Settings.GlobalSettings.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Settings.GlobalSettings.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
