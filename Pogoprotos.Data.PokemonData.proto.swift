// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "PokemonData.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Pogoprotos { public struct Data { }}

public func == (lhs: Pogoprotos.Data.PokemonData, rhs: Pogoprotos.Data.PokemonData) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasPokemonId == rhs.hasPokemonId) && (!lhs.hasPokemonId || lhs.pokemonId == rhs.pokemonId)
  fieldCheck = fieldCheck && (lhs.hasCp == rhs.hasCp) && (!lhs.hasCp || lhs.cp == rhs.cp)
  fieldCheck = fieldCheck && (lhs.hasStamina == rhs.hasStamina) && (!lhs.hasStamina || lhs.stamina == rhs.stamina)
  fieldCheck = fieldCheck && (lhs.hasStaminaMax == rhs.hasStaminaMax) && (!lhs.hasStaminaMax || lhs.staminaMax == rhs.staminaMax)
  fieldCheck = fieldCheck && (lhs.hasMove1 == rhs.hasMove1) && (!lhs.hasMove1 || lhs.move1 == rhs.move1)
  fieldCheck = fieldCheck && (lhs.hasMove2 == rhs.hasMove2) && (!lhs.hasMove2 || lhs.move2 == rhs.move2)
  fieldCheck = fieldCheck && (lhs.hasDeployedFortId == rhs.hasDeployedFortId) && (!lhs.hasDeployedFortId || lhs.deployedFortId == rhs.deployedFortId)
  fieldCheck = fieldCheck && (lhs.hasOwnerName == rhs.hasOwnerName) && (!lhs.hasOwnerName || lhs.ownerName == rhs.ownerName)
  fieldCheck = fieldCheck && (lhs.hasIsEgg == rhs.hasIsEgg) && (!lhs.hasIsEgg || lhs.isEgg == rhs.isEgg)
  fieldCheck = fieldCheck && (lhs.hasEggKmWalkedTarget == rhs.hasEggKmWalkedTarget) && (!lhs.hasEggKmWalkedTarget || lhs.eggKmWalkedTarget == rhs.eggKmWalkedTarget)
  fieldCheck = fieldCheck && (lhs.hasEggKmWalkedStart == rhs.hasEggKmWalkedStart) && (!lhs.hasEggKmWalkedStart || lhs.eggKmWalkedStart == rhs.eggKmWalkedStart)
  fieldCheck = fieldCheck && (lhs.hasOrigin == rhs.hasOrigin) && (!lhs.hasOrigin || lhs.origin == rhs.origin)
  fieldCheck = fieldCheck && (lhs.hasHeightM == rhs.hasHeightM) && (!lhs.hasHeightM || lhs.heightM == rhs.heightM)
  fieldCheck = fieldCheck && (lhs.hasWeightKg == rhs.hasWeightKg) && (!lhs.hasWeightKg || lhs.weightKg == rhs.weightKg)
  fieldCheck = fieldCheck && (lhs.hasIndividualAttack == rhs.hasIndividualAttack) && (!lhs.hasIndividualAttack || lhs.individualAttack == rhs.individualAttack)
  fieldCheck = fieldCheck && (lhs.hasIndividualDefense == rhs.hasIndividualDefense) && (!lhs.hasIndividualDefense || lhs.individualDefense == rhs.individualDefense)
  fieldCheck = fieldCheck && (lhs.hasIndividualStamina == rhs.hasIndividualStamina) && (!lhs.hasIndividualStamina || lhs.individualStamina == rhs.individualStamina)
  fieldCheck = fieldCheck && (lhs.hasCpMultiplier == rhs.hasCpMultiplier) && (!lhs.hasCpMultiplier || lhs.cpMultiplier == rhs.cpMultiplier)
  fieldCheck = fieldCheck && (lhs.hasPokeball == rhs.hasPokeball) && (!lhs.hasPokeball || lhs.pokeball == rhs.pokeball)
  fieldCheck = fieldCheck && (lhs.hasCapturedCellId == rhs.hasCapturedCellId) && (!lhs.hasCapturedCellId || lhs.capturedCellId == rhs.capturedCellId)
  fieldCheck = fieldCheck && (lhs.hasBattlesAttacked == rhs.hasBattlesAttacked) && (!lhs.hasBattlesAttacked || lhs.battlesAttacked == rhs.battlesAttacked)
  fieldCheck = fieldCheck && (lhs.hasBattlesDefended == rhs.hasBattlesDefended) && (!lhs.hasBattlesDefended || lhs.battlesDefended == rhs.battlesDefended)
  fieldCheck = fieldCheck && (lhs.hasEggIncubatorId == rhs.hasEggIncubatorId) && (!lhs.hasEggIncubatorId || lhs.eggIncubatorId == rhs.eggIncubatorId)
  fieldCheck = fieldCheck && (lhs.hasCreationTimeMs == rhs.hasCreationTimeMs) && (!lhs.hasCreationTimeMs || lhs.creationTimeMs == rhs.creationTimeMs)
  fieldCheck = fieldCheck && (lhs.hasNumUpgrades == rhs.hasNumUpgrades) && (!lhs.hasNumUpgrades || lhs.numUpgrades == rhs.numUpgrades)
  fieldCheck = fieldCheck && (lhs.hasAdditionalCpMultiplier == rhs.hasAdditionalCpMultiplier) && (!lhs.hasAdditionalCpMultiplier || lhs.additionalCpMultiplier == rhs.additionalCpMultiplier)
  fieldCheck = fieldCheck && (lhs.hasFavorite == rhs.hasFavorite) && (!lhs.hasFavorite || lhs.favorite == rhs.favorite)
  fieldCheck = fieldCheck && (lhs.hasNickname == rhs.hasNickname) && (!lhs.hasNickname || lhs.nickname == rhs.nickname)
  fieldCheck = fieldCheck && (lhs.hasFromFort == rhs.hasFromFort) && (!lhs.hasFromFort || lhs.fromFort == rhs.fromFort)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Pogoprotos.Data {
  public struct PokemonDataRoot {
    public static var sharedInstance : PokemonDataRoot {
     struct Static {
         static let instance : PokemonDataRoot = PokemonDataRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Pogoprotos.Enums.PokemonIdRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Enums.PokemonMoveRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Inventory.Item.ItemIdRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class PokemonData : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasId:Bool = false
    public private(set) var id:UInt64 = UInt64(0)

    public private(set) var pokemonId:Pogoprotos.Enums.PokemonId = Pogoprotos.Enums.PokemonId.Missingno
    public private(set) var hasPokemonId:Bool = false
    public private(set) var hasCp:Bool = false
    public private(set) var cp:Int32 = Int32(0)

    public private(set) var hasStamina:Bool = false
    public private(set) var stamina:Int32 = Int32(0)

    public private(set) var hasStaminaMax:Bool = false
    public private(set) var staminaMax:Int32 = Int32(0)

    public private(set) var move1:Pogoprotos.Enums.PokemonMove = Pogoprotos.Enums.PokemonMove.MoveUnset
    public private(set) var hasMove1:Bool = false
    public private(set) var move2:Pogoprotos.Enums.PokemonMove = Pogoprotos.Enums.PokemonMove.MoveUnset
    public private(set) var hasMove2:Bool = false
    public private(set) var hasDeployedFortId:Bool = false
    public private(set) var deployedFortId:Int32 = Int32(0)

    public private(set) var hasOwnerName:Bool = false
    public private(set) var ownerName:String = ""

    public private(set) var hasIsEgg:Bool = false
    public private(set) var isEgg:Bool = false

    public private(set) var hasEggKmWalkedTarget:Bool = false
    public private(set) var eggKmWalkedTarget:Double = Double(0)

    public private(set) var hasEggKmWalkedStart:Bool = false
    public private(set) var eggKmWalkedStart:Double = Double(0)

    public private(set) var hasOrigin:Bool = false
    public private(set) var origin:Int32 = Int32(0)

    public private(set) var hasHeightM:Bool = false
    public private(set) var heightM:Float = Float(0)

    public private(set) var hasWeightKg:Bool = false
    public private(set) var weightKg:Float = Float(0)

    public private(set) var hasIndividualAttack:Bool = false
    public private(set) var individualAttack:Int32 = Int32(0)

    public private(set) var hasIndividualDefense:Bool = false
    public private(set) var individualDefense:Int32 = Int32(0)

    public private(set) var hasIndividualStamina:Bool = false
    public private(set) var individualStamina:Int32 = Int32(0)

    public private(set) var hasCpMultiplier:Bool = false
    public private(set) var cpMultiplier:Float = Float(0)

    public private(set) var pokeball:Pogoprotos.Inventory.Item.ItemId = Pogoprotos.Inventory.Item.ItemId.ItemUnknown
    public private(set) var hasPokeball:Bool = false
    public private(set) var hasCapturedCellId:Bool = false
    public private(set) var capturedCellId:UInt64 = UInt64(0)

    public private(set) var hasBattlesAttacked:Bool = false
    public private(set) var battlesAttacked:Int32 = Int32(0)

    public private(set) var hasBattlesDefended:Bool = false
    public private(set) var battlesDefended:Int32 = Int32(0)

    public private(set) var hasEggIncubatorId:Bool = false
    public private(set) var eggIncubatorId:String = ""

    public private(set) var hasCreationTimeMs:Bool = false
    public private(set) var creationTimeMs:UInt64 = UInt64(0)

    public private(set) var hasNumUpgrades:Bool = false
    public private(set) var numUpgrades:Int32 = Int32(0)

    public private(set) var hasAdditionalCpMultiplier:Bool = false
    public private(set) var additionalCpMultiplier:Float = Float(0)

    public private(set) var hasFavorite:Bool = false
    public private(set) var favorite:Int32 = Int32(0)

    public private(set) var hasNickname:Bool = false
    public private(set) var nickname:String = ""

    public private(set) var hasFromFort:Bool = false
    public private(set) var fromFort:Int32 = Int32(0)

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasId {
        try output.writeFixed64(1, value:id)
      }
      if hasPokemonId {
        try output.writeEnum(2, value:pokemonId.rawValue)
      }
      if hasCp {
        try output.writeInt32(3, value:cp)
      }
      if hasStamina {
        try output.writeInt32(4, value:stamina)
      }
      if hasStaminaMax {
        try output.writeInt32(5, value:staminaMax)
      }
      if hasMove1 {
        try output.writeEnum(6, value:move1.rawValue)
      }
      if hasMove2 {
        try output.writeEnum(7, value:move2.rawValue)
      }
      if hasDeployedFortId {
        try output.writeInt32(8, value:deployedFortId)
      }
      if hasOwnerName {
        try output.writeString(9, value:ownerName)
      }
      if hasIsEgg {
        try output.writeBool(10, value:isEgg)
      }
      if hasEggKmWalkedTarget {
        try output.writeDouble(11, value:eggKmWalkedTarget)
      }
      if hasEggKmWalkedStart {
        try output.writeDouble(12, value:eggKmWalkedStart)
      }
      if hasOrigin {
        try output.writeInt32(14, value:origin)
      }
      if hasHeightM {
        try output.writeFloat(15, value:heightM)
      }
      if hasWeightKg {
        try output.writeFloat(16, value:weightKg)
      }
      if hasIndividualAttack {
        try output.writeInt32(17, value:individualAttack)
      }
      if hasIndividualDefense {
        try output.writeInt32(18, value:individualDefense)
      }
      if hasIndividualStamina {
        try output.writeInt32(19, value:individualStamina)
      }
      if hasCpMultiplier {
        try output.writeFloat(20, value:cpMultiplier)
      }
      if hasPokeball {
        try output.writeEnum(21, value:pokeball.rawValue)
      }
      if hasCapturedCellId {
        try output.writeUInt64(22, value:capturedCellId)
      }
      if hasBattlesAttacked {
        try output.writeInt32(23, value:battlesAttacked)
      }
      if hasBattlesDefended {
        try output.writeInt32(24, value:battlesDefended)
      }
      if hasEggIncubatorId {
        try output.writeString(25, value:eggIncubatorId)
      }
      if hasCreationTimeMs {
        try output.writeUInt64(26, value:creationTimeMs)
      }
      if hasNumUpgrades {
        try output.writeInt32(27, value:numUpgrades)
      }
      if hasAdditionalCpMultiplier {
        try output.writeFloat(28, value:additionalCpMultiplier)
      }
      if hasFavorite {
        try output.writeInt32(29, value:favorite)
      }
      if hasNickname {
        try output.writeString(30, value:nickname)
      }
      if hasFromFort {
        try output.writeInt32(31, value:fromFort)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasId {
        serialize_size += id.computeFixed64Size(1)
      }
      if (hasPokemonId) {
        serialize_size += pokemonId.rawValue.computeEnumSize(2)
      }
      if hasCp {
        serialize_size += cp.computeInt32Size(3)
      }
      if hasStamina {
        serialize_size += stamina.computeInt32Size(4)
      }
      if hasStaminaMax {
        serialize_size += staminaMax.computeInt32Size(5)
      }
      if (hasMove1) {
        serialize_size += move1.rawValue.computeEnumSize(6)
      }
      if (hasMove2) {
        serialize_size += move2.rawValue.computeEnumSize(7)
      }
      if hasDeployedFortId {
        serialize_size += deployedFortId.computeInt32Size(8)
      }
      if hasOwnerName {
        serialize_size += ownerName.computeStringSize(9)
      }
      if hasIsEgg {
        serialize_size += isEgg.computeBoolSize(10)
      }
      if hasEggKmWalkedTarget {
        serialize_size += eggKmWalkedTarget.computeDoubleSize(11)
      }
      if hasEggKmWalkedStart {
        serialize_size += eggKmWalkedStart.computeDoubleSize(12)
      }
      if hasOrigin {
        serialize_size += origin.computeInt32Size(14)
      }
      if hasHeightM {
        serialize_size += heightM.computeFloatSize(15)
      }
      if hasWeightKg {
        serialize_size += weightKg.computeFloatSize(16)
      }
      if hasIndividualAttack {
        serialize_size += individualAttack.computeInt32Size(17)
      }
      if hasIndividualDefense {
        serialize_size += individualDefense.computeInt32Size(18)
      }
      if hasIndividualStamina {
        serialize_size += individualStamina.computeInt32Size(19)
      }
      if hasCpMultiplier {
        serialize_size += cpMultiplier.computeFloatSize(20)
      }
      if (hasPokeball) {
        serialize_size += pokeball.rawValue.computeEnumSize(21)
      }
      if hasCapturedCellId {
        serialize_size += capturedCellId.computeUInt64Size(22)
      }
      if hasBattlesAttacked {
        serialize_size += battlesAttacked.computeInt32Size(23)
      }
      if hasBattlesDefended {
        serialize_size += battlesDefended.computeInt32Size(24)
      }
      if hasEggIncubatorId {
        serialize_size += eggIncubatorId.computeStringSize(25)
      }
      if hasCreationTimeMs {
        serialize_size += creationTimeMs.computeUInt64Size(26)
      }
      if hasNumUpgrades {
        serialize_size += numUpgrades.computeInt32Size(27)
      }
      if hasAdditionalCpMultiplier {
        serialize_size += additionalCpMultiplier.computeFloatSize(28)
      }
      if hasFavorite {
        serialize_size += favorite.computeInt32Size(29)
      }
      if hasNickname {
        serialize_size += nickname.computeStringSize(30)
      }
      if hasFromFort {
        serialize_size += fromFort.computeInt32Size(31)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Data.PokemonData> {
      var mergedArray = Array<Pogoprotos.Data.PokemonData>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Data.PokemonData? {
      return try Pogoprotos.Data.PokemonData.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Data.PokemonData {
      return try Pogoprotos.Data.PokemonData.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Data.PokemonDataRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.PokemonData {
      return try Pogoprotos.Data.PokemonData.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Data.PokemonData {
      return try Pogoprotos.Data.PokemonData.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.PokemonData {
      return try Pogoprotos.Data.PokemonData.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Data.PokemonData {
      return try Pogoprotos.Data.PokemonData.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.PokemonData {
      return try Pogoprotos.Data.PokemonData.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Data.PokemonData.Builder {
      return Pogoprotos.Data.PokemonData.classBuilder() as! Pogoprotos.Data.PokemonData.Builder
    }
    public func getBuilder() -> Pogoprotos.Data.PokemonData.Builder {
      return classBuilder() as! Pogoprotos.Data.PokemonData.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Data.PokemonData.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Data.PokemonData.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Data.PokemonData.Builder {
      return try Pogoprotos.Data.PokemonData.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Data.PokemonData) throws -> Pogoprotos.Data.PokemonData.Builder {
      return try Pogoprotos.Data.PokemonData.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasId {
        jsonMap["id"] = "\(id)"
      }
      if hasPokemonId {
        jsonMap["pokemonId"] = pokemonId.toString()
      }
      if hasCp {
        jsonMap["cp"] = NSNumber(int:cp)
      }
      if hasStamina {
        jsonMap["stamina"] = NSNumber(int:stamina)
      }
      if hasStaminaMax {
        jsonMap["staminaMax"] = NSNumber(int:staminaMax)
      }
      if hasMove1 {
        jsonMap["move1"] = move1.toString()
      }
      if hasMove2 {
        jsonMap["move2"] = move2.toString()
      }
      if hasDeployedFortId {
        jsonMap["deployedFortId"] = NSNumber(int:deployedFortId)
      }
      if hasOwnerName {
        jsonMap["ownerName"] = ownerName
      }
      if hasIsEgg {
        jsonMap["isEgg"] = isEgg
      }
      if hasEggKmWalkedTarget {
        jsonMap["eggKmWalkedTarget"] = NSNumber(double:eggKmWalkedTarget)
      }
      if hasEggKmWalkedStart {
        jsonMap["eggKmWalkedStart"] = NSNumber(double:eggKmWalkedStart)
      }
      if hasOrigin {
        jsonMap["origin"] = NSNumber(int:origin)
      }
      if hasHeightM {
        jsonMap["heightM"] = NSNumber(float:heightM)
      }
      if hasWeightKg {
        jsonMap["weightKg"] = NSNumber(float:weightKg)
      }
      if hasIndividualAttack {
        jsonMap["individualAttack"] = NSNumber(int:individualAttack)
      }
      if hasIndividualDefense {
        jsonMap["individualDefense"] = NSNumber(int:individualDefense)
      }
      if hasIndividualStamina {
        jsonMap["individualStamina"] = NSNumber(int:individualStamina)
      }
      if hasCpMultiplier {
        jsonMap["cpMultiplier"] = NSNumber(float:cpMultiplier)
      }
      if hasPokeball {
        jsonMap["pokeball"] = pokeball.toString()
      }
      if hasCapturedCellId {
        jsonMap["capturedCellId"] = "\(capturedCellId)"
      }
      if hasBattlesAttacked {
        jsonMap["battlesAttacked"] = NSNumber(int:battlesAttacked)
      }
      if hasBattlesDefended {
        jsonMap["battlesDefended"] = NSNumber(int:battlesDefended)
      }
      if hasEggIncubatorId {
        jsonMap["eggIncubatorId"] = eggIncubatorId
      }
      if hasCreationTimeMs {
        jsonMap["creationTimeMs"] = "\(creationTimeMs)"
      }
      if hasNumUpgrades {
        jsonMap["numUpgrades"] = NSNumber(int:numUpgrades)
      }
      if hasAdditionalCpMultiplier {
        jsonMap["additionalCpMultiplier"] = NSNumber(float:additionalCpMultiplier)
      }
      if hasFavorite {
        jsonMap["favorite"] = NSNumber(int:favorite)
      }
      if hasNickname {
        jsonMap["nickname"] = nickname
      }
      if hasFromFort {
        jsonMap["fromFort"] = NSNumber(int:fromFort)
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Data.PokemonData {
      return try Pogoprotos.Data.PokemonData.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Data.PokemonData {
      return try Pogoprotos.Data.PokemonData.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasId {
        output += "\(indent) id: \(id) \n"
      }
      if (hasPokemonId) {
        output += "\(indent) pokemonId: \(pokemonId.description)\n"
      }
      if hasCp {
        output += "\(indent) cp: \(cp) \n"
      }
      if hasStamina {
        output += "\(indent) stamina: \(stamina) \n"
      }
      if hasStaminaMax {
        output += "\(indent) staminaMax: \(staminaMax) \n"
      }
      if (hasMove1) {
        output += "\(indent) move1: \(move1.description)\n"
      }
      if (hasMove2) {
        output += "\(indent) move2: \(move2.description)\n"
      }
      if hasDeployedFortId {
        output += "\(indent) deployedFortId: \(deployedFortId) \n"
      }
      if hasOwnerName {
        output += "\(indent) ownerName: \(ownerName) \n"
      }
      if hasIsEgg {
        output += "\(indent) isEgg: \(isEgg) \n"
      }
      if hasEggKmWalkedTarget {
        output += "\(indent) eggKmWalkedTarget: \(eggKmWalkedTarget) \n"
      }
      if hasEggKmWalkedStart {
        output += "\(indent) eggKmWalkedStart: \(eggKmWalkedStart) \n"
      }
      if hasOrigin {
        output += "\(indent) origin: \(origin) \n"
      }
      if hasHeightM {
        output += "\(indent) heightM: \(heightM) \n"
      }
      if hasWeightKg {
        output += "\(indent) weightKg: \(weightKg) \n"
      }
      if hasIndividualAttack {
        output += "\(indent) individualAttack: \(individualAttack) \n"
      }
      if hasIndividualDefense {
        output += "\(indent) individualDefense: \(individualDefense) \n"
      }
      if hasIndividualStamina {
        output += "\(indent) individualStamina: \(individualStamina) \n"
      }
      if hasCpMultiplier {
        output += "\(indent) cpMultiplier: \(cpMultiplier) \n"
      }
      if (hasPokeball) {
        output += "\(indent) pokeball: \(pokeball.description)\n"
      }
      if hasCapturedCellId {
        output += "\(indent) capturedCellId: \(capturedCellId) \n"
      }
      if hasBattlesAttacked {
        output += "\(indent) battlesAttacked: \(battlesAttacked) \n"
      }
      if hasBattlesDefended {
        output += "\(indent) battlesDefended: \(battlesDefended) \n"
      }
      if hasEggIncubatorId {
        output += "\(indent) eggIncubatorId: \(eggIncubatorId) \n"
      }
      if hasCreationTimeMs {
        output += "\(indent) creationTimeMs: \(creationTimeMs) \n"
      }
      if hasNumUpgrades {
        output += "\(indent) numUpgrades: \(numUpgrades) \n"
      }
      if hasAdditionalCpMultiplier {
        output += "\(indent) additionalCpMultiplier: \(additionalCpMultiplier) \n"
      }
      if hasFavorite {
        output += "\(indent) favorite: \(favorite) \n"
      }
      if hasNickname {
        output += "\(indent) nickname: \(nickname) \n"
      }
      if hasFromFort {
        output += "\(indent) fromFort: \(fromFort) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasId {
               hashCode = (hashCode &* 31) &+ id.hashValue
            }
            if hasPokemonId {
               hashCode = (hashCode &* 31) &+ Int(pokemonId.rawValue)
            }
            if hasCp {
               hashCode = (hashCode &* 31) &+ cp.hashValue
            }
            if hasStamina {
               hashCode = (hashCode &* 31) &+ stamina.hashValue
            }
            if hasStaminaMax {
               hashCode = (hashCode &* 31) &+ staminaMax.hashValue
            }
            if hasMove1 {
               hashCode = (hashCode &* 31) &+ Int(move1.rawValue)
            }
            if hasMove2 {
               hashCode = (hashCode &* 31) &+ Int(move2.rawValue)
            }
            if hasDeployedFortId {
               hashCode = (hashCode &* 31) &+ deployedFortId.hashValue
            }
            if hasOwnerName {
               hashCode = (hashCode &* 31) &+ ownerName.hashValue
            }
            if hasIsEgg {
               hashCode = (hashCode &* 31) &+ isEgg.hashValue
            }
            if hasEggKmWalkedTarget {
               hashCode = (hashCode &* 31) &+ eggKmWalkedTarget.hashValue
            }
            if hasEggKmWalkedStart {
               hashCode = (hashCode &* 31) &+ eggKmWalkedStart.hashValue
            }
            if hasOrigin {
               hashCode = (hashCode &* 31) &+ origin.hashValue
            }
            if hasHeightM {
               hashCode = (hashCode &* 31) &+ heightM.hashValue
            }
            if hasWeightKg {
               hashCode = (hashCode &* 31) &+ weightKg.hashValue
            }
            if hasIndividualAttack {
               hashCode = (hashCode &* 31) &+ individualAttack.hashValue
            }
            if hasIndividualDefense {
               hashCode = (hashCode &* 31) &+ individualDefense.hashValue
            }
            if hasIndividualStamina {
               hashCode = (hashCode &* 31) &+ individualStamina.hashValue
            }
            if hasCpMultiplier {
               hashCode = (hashCode &* 31) &+ cpMultiplier.hashValue
            }
            if hasPokeball {
               hashCode = (hashCode &* 31) &+ Int(pokeball.rawValue)
            }
            if hasCapturedCellId {
               hashCode = (hashCode &* 31) &+ capturedCellId.hashValue
            }
            if hasBattlesAttacked {
               hashCode = (hashCode &* 31) &+ battlesAttacked.hashValue
            }
            if hasBattlesDefended {
               hashCode = (hashCode &* 31) &+ battlesDefended.hashValue
            }
            if hasEggIncubatorId {
               hashCode = (hashCode &* 31) &+ eggIncubatorId.hashValue
            }
            if hasCreationTimeMs {
               hashCode = (hashCode &* 31) &+ creationTimeMs.hashValue
            }
            if hasNumUpgrades {
               hashCode = (hashCode &* 31) &+ numUpgrades.hashValue
            }
            if hasAdditionalCpMultiplier {
               hashCode = (hashCode &* 31) &+ additionalCpMultiplier.hashValue
            }
            if hasFavorite {
               hashCode = (hashCode &* 31) &+ favorite.hashValue
            }
            if hasNickname {
               hashCode = (hashCode &* 31) &+ nickname.hashValue
            }
            if hasFromFort {
               hashCode = (hashCode &* 31) &+ fromFort.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Data.PokemonData"
    }
    override public func className() -> String {
        return "Pogoprotos.Data.PokemonData"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Data.PokemonData.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Data.PokemonData = Pogoprotos.Data.PokemonData()
      public func getMessage() -> Pogoprotos.Data.PokemonData {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasId:Bool {
           get {
                return builderResult.hasId
           }
      }
      public var id:UInt64 {
           get {
                return builderResult.id
           }
           set (value) {
               builderResult.hasId = true
               builderResult.id = value
           }
      }
      public func setId(value:UInt64) -> Pogoprotos.Data.PokemonData.Builder {
        self.id = value
        return self
      }
      public func clearId() -> Pogoprotos.Data.PokemonData.Builder{
           builderResult.hasId = false
           builderResult.id = UInt64(0)
           return self
      }
        public var hasPokemonId:Bool{
            get {
                return builderResult.hasPokemonId
            }
        }
        public var pokemonId:Pogoprotos.Enums.PokemonId {
            get {
                return builderResult.pokemonId
            }
            set (value) {
                builderResult.hasPokemonId = true
                builderResult.pokemonId = value
            }
        }
        public func setPokemonId(value:Pogoprotos.Enums.PokemonId) -> Pogoprotos.Data.PokemonData.Builder {
          self.pokemonId = value
          return self
        }
        public func clearPokemonId() -> Pogoprotos.Data.PokemonData.Builder {
           builderResult.hasPokemonId = false
           builderResult.pokemonId = .Missingno
           return self
        }
      public var hasCp:Bool {
           get {
                return builderResult.hasCp
           }
      }
      public var cp:Int32 {
           get {
                return builderResult.cp
           }
           set (value) {
               builderResult.hasCp = true
               builderResult.cp = value
           }
      }
      public func setCp(value:Int32) -> Pogoprotos.Data.PokemonData.Builder {
        self.cp = value
        return self
      }
      public func clearCp() -> Pogoprotos.Data.PokemonData.Builder{
           builderResult.hasCp = false
           builderResult.cp = Int32(0)
           return self
      }
      public var hasStamina:Bool {
           get {
                return builderResult.hasStamina
           }
      }
      public var stamina:Int32 {
           get {
                return builderResult.stamina
           }
           set (value) {
               builderResult.hasStamina = true
               builderResult.stamina = value
           }
      }
      public func setStamina(value:Int32) -> Pogoprotos.Data.PokemonData.Builder {
        self.stamina = value
        return self
      }
      public func clearStamina() -> Pogoprotos.Data.PokemonData.Builder{
           builderResult.hasStamina = false
           builderResult.stamina = Int32(0)
           return self
      }
      public var hasStaminaMax:Bool {
           get {
                return builderResult.hasStaminaMax
           }
      }
      public var staminaMax:Int32 {
           get {
                return builderResult.staminaMax
           }
           set (value) {
               builderResult.hasStaminaMax = true
               builderResult.staminaMax = value
           }
      }
      public func setStaminaMax(value:Int32) -> Pogoprotos.Data.PokemonData.Builder {
        self.staminaMax = value
        return self
      }
      public func clearStaminaMax() -> Pogoprotos.Data.PokemonData.Builder{
           builderResult.hasStaminaMax = false
           builderResult.staminaMax = Int32(0)
           return self
      }
        public var hasMove1:Bool{
            get {
                return builderResult.hasMove1
            }
        }
        public var move1:Pogoprotos.Enums.PokemonMove {
            get {
                return builderResult.move1
            }
            set (value) {
                builderResult.hasMove1 = true
                builderResult.move1 = value
            }
        }
        public func setMove1(value:Pogoprotos.Enums.PokemonMove) -> Pogoprotos.Data.PokemonData.Builder {
          self.move1 = value
          return self
        }
        public func clearMove1() -> Pogoprotos.Data.PokemonData.Builder {
           builderResult.hasMove1 = false
           builderResult.move1 = .MoveUnset
           return self
        }
        public var hasMove2:Bool{
            get {
                return builderResult.hasMove2
            }
        }
        public var move2:Pogoprotos.Enums.PokemonMove {
            get {
                return builderResult.move2
            }
            set (value) {
                builderResult.hasMove2 = true
                builderResult.move2 = value
            }
        }
        public func setMove2(value:Pogoprotos.Enums.PokemonMove) -> Pogoprotos.Data.PokemonData.Builder {
          self.move2 = value
          return self
        }
        public func clearMove2() -> Pogoprotos.Data.PokemonData.Builder {
           builderResult.hasMove2 = false
           builderResult.move2 = .MoveUnset
           return self
        }
      public var hasDeployedFortId:Bool {
           get {
                return builderResult.hasDeployedFortId
           }
      }
      public var deployedFortId:Int32 {
           get {
                return builderResult.deployedFortId
           }
           set (value) {
               builderResult.hasDeployedFortId = true
               builderResult.deployedFortId = value
           }
      }
      public func setDeployedFortId(value:Int32) -> Pogoprotos.Data.PokemonData.Builder {
        self.deployedFortId = value
        return self
      }
      public func clearDeployedFortId() -> Pogoprotos.Data.PokemonData.Builder{
           builderResult.hasDeployedFortId = false
           builderResult.deployedFortId = Int32(0)
           return self
      }
      public var hasOwnerName:Bool {
           get {
                return builderResult.hasOwnerName
           }
      }
      public var ownerName:String {
           get {
                return builderResult.ownerName
           }
           set (value) {
               builderResult.hasOwnerName = true
               builderResult.ownerName = value
           }
      }
      public func setOwnerName(value:String) -> Pogoprotos.Data.PokemonData.Builder {
        self.ownerName = value
        return self
      }
      public func clearOwnerName() -> Pogoprotos.Data.PokemonData.Builder{
           builderResult.hasOwnerName = false
           builderResult.ownerName = ""
           return self
      }
      public var hasIsEgg:Bool {
           get {
                return builderResult.hasIsEgg
           }
      }
      public var isEgg:Bool {
           get {
                return builderResult.isEgg
           }
           set (value) {
               builderResult.hasIsEgg = true
               builderResult.isEgg = value
           }
      }
      public func setIsEgg(value:Bool) -> Pogoprotos.Data.PokemonData.Builder {
        self.isEgg = value
        return self
      }
      public func clearIsEgg() -> Pogoprotos.Data.PokemonData.Builder{
           builderResult.hasIsEgg = false
           builderResult.isEgg = false
           return self
      }
      public var hasEggKmWalkedTarget:Bool {
           get {
                return builderResult.hasEggKmWalkedTarget
           }
      }
      public var eggKmWalkedTarget:Double {
           get {
                return builderResult.eggKmWalkedTarget
           }
           set (value) {
               builderResult.hasEggKmWalkedTarget = true
               builderResult.eggKmWalkedTarget = value
           }
      }
      public func setEggKmWalkedTarget(value:Double) -> Pogoprotos.Data.PokemonData.Builder {
        self.eggKmWalkedTarget = value
        return self
      }
      public func clearEggKmWalkedTarget() -> Pogoprotos.Data.PokemonData.Builder{
           builderResult.hasEggKmWalkedTarget = false
           builderResult.eggKmWalkedTarget = Double(0)
           return self
      }
      public var hasEggKmWalkedStart:Bool {
           get {
                return builderResult.hasEggKmWalkedStart
           }
      }
      public var eggKmWalkedStart:Double {
           get {
                return builderResult.eggKmWalkedStart
           }
           set (value) {
               builderResult.hasEggKmWalkedStart = true
               builderResult.eggKmWalkedStart = value
           }
      }
      public func setEggKmWalkedStart(value:Double) -> Pogoprotos.Data.PokemonData.Builder {
        self.eggKmWalkedStart = value
        return self
      }
      public func clearEggKmWalkedStart() -> Pogoprotos.Data.PokemonData.Builder{
           builderResult.hasEggKmWalkedStart = false
           builderResult.eggKmWalkedStart = Double(0)
           return self
      }
      public var hasOrigin:Bool {
           get {
                return builderResult.hasOrigin
           }
      }
      public var origin:Int32 {
           get {
                return builderResult.origin
           }
           set (value) {
               builderResult.hasOrigin = true
               builderResult.origin = value
           }
      }
      public func setOrigin(value:Int32) -> Pogoprotos.Data.PokemonData.Builder {
        self.origin = value
        return self
      }
      public func clearOrigin() -> Pogoprotos.Data.PokemonData.Builder{
           builderResult.hasOrigin = false
           builderResult.origin = Int32(0)
           return self
      }
      public var hasHeightM:Bool {
           get {
                return builderResult.hasHeightM
           }
      }
      public var heightM:Float {
           get {
                return builderResult.heightM
           }
           set (value) {
               builderResult.hasHeightM = true
               builderResult.heightM = value
           }
      }
      public func setHeightM(value:Float) -> Pogoprotos.Data.PokemonData.Builder {
        self.heightM = value
        return self
      }
      public func clearHeightM() -> Pogoprotos.Data.PokemonData.Builder{
           builderResult.hasHeightM = false
           builderResult.heightM = Float(0)
           return self
      }
      public var hasWeightKg:Bool {
           get {
                return builderResult.hasWeightKg
           }
      }
      public var weightKg:Float {
           get {
                return builderResult.weightKg
           }
           set (value) {
               builderResult.hasWeightKg = true
               builderResult.weightKg = value
           }
      }
      public func setWeightKg(value:Float) -> Pogoprotos.Data.PokemonData.Builder {
        self.weightKg = value
        return self
      }
      public func clearWeightKg() -> Pogoprotos.Data.PokemonData.Builder{
           builderResult.hasWeightKg = false
           builderResult.weightKg = Float(0)
           return self
      }
      public var hasIndividualAttack:Bool {
           get {
                return builderResult.hasIndividualAttack
           }
      }
      public var individualAttack:Int32 {
           get {
                return builderResult.individualAttack
           }
           set (value) {
               builderResult.hasIndividualAttack = true
               builderResult.individualAttack = value
           }
      }
      public func setIndividualAttack(value:Int32) -> Pogoprotos.Data.PokemonData.Builder {
        self.individualAttack = value
        return self
      }
      public func clearIndividualAttack() -> Pogoprotos.Data.PokemonData.Builder{
           builderResult.hasIndividualAttack = false
           builderResult.individualAttack = Int32(0)
           return self
      }
      public var hasIndividualDefense:Bool {
           get {
                return builderResult.hasIndividualDefense
           }
      }
      public var individualDefense:Int32 {
           get {
                return builderResult.individualDefense
           }
           set (value) {
               builderResult.hasIndividualDefense = true
               builderResult.individualDefense = value
           }
      }
      public func setIndividualDefense(value:Int32) -> Pogoprotos.Data.PokemonData.Builder {
        self.individualDefense = value
        return self
      }
      public func clearIndividualDefense() -> Pogoprotos.Data.PokemonData.Builder{
           builderResult.hasIndividualDefense = false
           builderResult.individualDefense = Int32(0)
           return self
      }
      public var hasIndividualStamina:Bool {
           get {
                return builderResult.hasIndividualStamina
           }
      }
      public var individualStamina:Int32 {
           get {
                return builderResult.individualStamina
           }
           set (value) {
               builderResult.hasIndividualStamina = true
               builderResult.individualStamina = value
           }
      }
      public func setIndividualStamina(value:Int32) -> Pogoprotos.Data.PokemonData.Builder {
        self.individualStamina = value
        return self
      }
      public func clearIndividualStamina() -> Pogoprotos.Data.PokemonData.Builder{
           builderResult.hasIndividualStamina = false
           builderResult.individualStamina = Int32(0)
           return self
      }
      public var hasCpMultiplier:Bool {
           get {
                return builderResult.hasCpMultiplier
           }
      }
      public var cpMultiplier:Float {
           get {
                return builderResult.cpMultiplier
           }
           set (value) {
               builderResult.hasCpMultiplier = true
               builderResult.cpMultiplier = value
           }
      }
      public func setCpMultiplier(value:Float) -> Pogoprotos.Data.PokemonData.Builder {
        self.cpMultiplier = value
        return self
      }
      public func clearCpMultiplier() -> Pogoprotos.Data.PokemonData.Builder{
           builderResult.hasCpMultiplier = false
           builderResult.cpMultiplier = Float(0)
           return self
      }
        public var hasPokeball:Bool{
            get {
                return builderResult.hasPokeball
            }
        }
        public var pokeball:Pogoprotos.Inventory.Item.ItemId {
            get {
                return builderResult.pokeball
            }
            set (value) {
                builderResult.hasPokeball = true
                builderResult.pokeball = value
            }
        }
        public func setPokeball(value:Pogoprotos.Inventory.Item.ItemId) -> Pogoprotos.Data.PokemonData.Builder {
          self.pokeball = value
          return self
        }
        public func clearPokeball() -> Pogoprotos.Data.PokemonData.Builder {
           builderResult.hasPokeball = false
           builderResult.pokeball = .ItemUnknown
           return self
        }
      public var hasCapturedCellId:Bool {
           get {
                return builderResult.hasCapturedCellId
           }
      }
      public var capturedCellId:UInt64 {
           get {
                return builderResult.capturedCellId
           }
           set (value) {
               builderResult.hasCapturedCellId = true
               builderResult.capturedCellId = value
           }
      }
      public func setCapturedCellId(value:UInt64) -> Pogoprotos.Data.PokemonData.Builder {
        self.capturedCellId = value
        return self
      }
      public func clearCapturedCellId() -> Pogoprotos.Data.PokemonData.Builder{
           builderResult.hasCapturedCellId = false
           builderResult.capturedCellId = UInt64(0)
           return self
      }
      public var hasBattlesAttacked:Bool {
           get {
                return builderResult.hasBattlesAttacked
           }
      }
      public var battlesAttacked:Int32 {
           get {
                return builderResult.battlesAttacked
           }
           set (value) {
               builderResult.hasBattlesAttacked = true
               builderResult.battlesAttacked = value
           }
      }
      public func setBattlesAttacked(value:Int32) -> Pogoprotos.Data.PokemonData.Builder {
        self.battlesAttacked = value
        return self
      }
      public func clearBattlesAttacked() -> Pogoprotos.Data.PokemonData.Builder{
           builderResult.hasBattlesAttacked = false
           builderResult.battlesAttacked = Int32(0)
           return self
      }
      public var hasBattlesDefended:Bool {
           get {
                return builderResult.hasBattlesDefended
           }
      }
      public var battlesDefended:Int32 {
           get {
                return builderResult.battlesDefended
           }
           set (value) {
               builderResult.hasBattlesDefended = true
               builderResult.battlesDefended = value
           }
      }
      public func setBattlesDefended(value:Int32) -> Pogoprotos.Data.PokemonData.Builder {
        self.battlesDefended = value
        return self
      }
      public func clearBattlesDefended() -> Pogoprotos.Data.PokemonData.Builder{
           builderResult.hasBattlesDefended = false
           builderResult.battlesDefended = Int32(0)
           return self
      }
      public var hasEggIncubatorId:Bool {
           get {
                return builderResult.hasEggIncubatorId
           }
      }
      public var eggIncubatorId:String {
           get {
                return builderResult.eggIncubatorId
           }
           set (value) {
               builderResult.hasEggIncubatorId = true
               builderResult.eggIncubatorId = value
           }
      }
      public func setEggIncubatorId(value:String) -> Pogoprotos.Data.PokemonData.Builder {
        self.eggIncubatorId = value
        return self
      }
      public func clearEggIncubatorId() -> Pogoprotos.Data.PokemonData.Builder{
           builderResult.hasEggIncubatorId = false
           builderResult.eggIncubatorId = ""
           return self
      }
      public var hasCreationTimeMs:Bool {
           get {
                return builderResult.hasCreationTimeMs
           }
      }
      public var creationTimeMs:UInt64 {
           get {
                return builderResult.creationTimeMs
           }
           set (value) {
               builderResult.hasCreationTimeMs = true
               builderResult.creationTimeMs = value
           }
      }
      public func setCreationTimeMs(value:UInt64) -> Pogoprotos.Data.PokemonData.Builder {
        self.creationTimeMs = value
        return self
      }
      public func clearCreationTimeMs() -> Pogoprotos.Data.PokemonData.Builder{
           builderResult.hasCreationTimeMs = false
           builderResult.creationTimeMs = UInt64(0)
           return self
      }
      public var hasNumUpgrades:Bool {
           get {
                return builderResult.hasNumUpgrades
           }
      }
      public var numUpgrades:Int32 {
           get {
                return builderResult.numUpgrades
           }
           set (value) {
               builderResult.hasNumUpgrades = true
               builderResult.numUpgrades = value
           }
      }
      public func setNumUpgrades(value:Int32) -> Pogoprotos.Data.PokemonData.Builder {
        self.numUpgrades = value
        return self
      }
      public func clearNumUpgrades() -> Pogoprotos.Data.PokemonData.Builder{
           builderResult.hasNumUpgrades = false
           builderResult.numUpgrades = Int32(0)
           return self
      }
      public var hasAdditionalCpMultiplier:Bool {
           get {
                return builderResult.hasAdditionalCpMultiplier
           }
      }
      public var additionalCpMultiplier:Float {
           get {
                return builderResult.additionalCpMultiplier
           }
           set (value) {
               builderResult.hasAdditionalCpMultiplier = true
               builderResult.additionalCpMultiplier = value
           }
      }
      public func setAdditionalCpMultiplier(value:Float) -> Pogoprotos.Data.PokemonData.Builder {
        self.additionalCpMultiplier = value
        return self
      }
      public func clearAdditionalCpMultiplier() -> Pogoprotos.Data.PokemonData.Builder{
           builderResult.hasAdditionalCpMultiplier = false
           builderResult.additionalCpMultiplier = Float(0)
           return self
      }
      public var hasFavorite:Bool {
           get {
                return builderResult.hasFavorite
           }
      }
      public var favorite:Int32 {
           get {
                return builderResult.favorite
           }
           set (value) {
               builderResult.hasFavorite = true
               builderResult.favorite = value
           }
      }
      public func setFavorite(value:Int32) -> Pogoprotos.Data.PokemonData.Builder {
        self.favorite = value
        return self
      }
      public func clearFavorite() -> Pogoprotos.Data.PokemonData.Builder{
           builderResult.hasFavorite = false
           builderResult.favorite = Int32(0)
           return self
      }
      public var hasNickname:Bool {
           get {
                return builderResult.hasNickname
           }
      }
      public var nickname:String {
           get {
                return builderResult.nickname
           }
           set (value) {
               builderResult.hasNickname = true
               builderResult.nickname = value
           }
      }
      public func setNickname(value:String) -> Pogoprotos.Data.PokemonData.Builder {
        self.nickname = value
        return self
      }
      public func clearNickname() -> Pogoprotos.Data.PokemonData.Builder{
           builderResult.hasNickname = false
           builderResult.nickname = ""
           return self
      }
      public var hasFromFort:Bool {
           get {
                return builderResult.hasFromFort
           }
      }
      public var fromFort:Int32 {
           get {
                return builderResult.fromFort
           }
           set (value) {
               builderResult.hasFromFort = true
               builderResult.fromFort = value
           }
      }
      public func setFromFort(value:Int32) -> Pogoprotos.Data.PokemonData.Builder {
        self.fromFort = value
        return self
      }
      public func clearFromFort() -> Pogoprotos.Data.PokemonData.Builder{
           builderResult.hasFromFort = false
           builderResult.fromFort = Int32(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Data.PokemonData.Builder {
        builderResult = Pogoprotos.Data.PokemonData()
        return self
      }
      override public func clone() throws -> Pogoprotos.Data.PokemonData.Builder {
        return try Pogoprotos.Data.PokemonData.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Data.PokemonData {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Data.PokemonData {
        let returnMe:Pogoprotos.Data.PokemonData = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Data.PokemonData) throws -> Pogoprotos.Data.PokemonData.Builder {
        if other == Pogoprotos.Data.PokemonData() {
         return self
        }
        if other.hasId {
             id = other.id
        }
        if other.hasPokemonId {
             pokemonId = other.pokemonId
        }
        if other.hasCp {
             cp = other.cp
        }
        if other.hasStamina {
             stamina = other.stamina
        }
        if other.hasStaminaMax {
             staminaMax = other.staminaMax
        }
        if other.hasMove1 {
             move1 = other.move1
        }
        if other.hasMove2 {
             move2 = other.move2
        }
        if other.hasDeployedFortId {
             deployedFortId = other.deployedFortId
        }
        if other.hasOwnerName {
             ownerName = other.ownerName
        }
        if other.hasIsEgg {
             isEgg = other.isEgg
        }
        if other.hasEggKmWalkedTarget {
             eggKmWalkedTarget = other.eggKmWalkedTarget
        }
        if other.hasEggKmWalkedStart {
             eggKmWalkedStart = other.eggKmWalkedStart
        }
        if other.hasOrigin {
             origin = other.origin
        }
        if other.hasHeightM {
             heightM = other.heightM
        }
        if other.hasWeightKg {
             weightKg = other.weightKg
        }
        if other.hasIndividualAttack {
             individualAttack = other.individualAttack
        }
        if other.hasIndividualDefense {
             individualDefense = other.individualDefense
        }
        if other.hasIndividualStamina {
             individualStamina = other.individualStamina
        }
        if other.hasCpMultiplier {
             cpMultiplier = other.cpMultiplier
        }
        if other.hasPokeball {
             pokeball = other.pokeball
        }
        if other.hasCapturedCellId {
             capturedCellId = other.capturedCellId
        }
        if other.hasBattlesAttacked {
             battlesAttacked = other.battlesAttacked
        }
        if other.hasBattlesDefended {
             battlesDefended = other.battlesDefended
        }
        if other.hasEggIncubatorId {
             eggIncubatorId = other.eggIncubatorId
        }
        if other.hasCreationTimeMs {
             creationTimeMs = other.creationTimeMs
        }
        if other.hasNumUpgrades {
             numUpgrades = other.numUpgrades
        }
        if other.hasAdditionalCpMultiplier {
             additionalCpMultiplier = other.additionalCpMultiplier
        }
        if other.hasFavorite {
             favorite = other.favorite
        }
        if other.hasNickname {
             nickname = other.nickname
        }
        if other.hasFromFort {
             fromFort = other.fromFort
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Data.PokemonData.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.PokemonData.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 9:
            id = try input.readFixed64()

          case 16:
            let valueIntpokemonId = try input.readEnum()
            if let enumspokemonId = Pogoprotos.Enums.PokemonId(rawValue:valueIntpokemonId){
                 pokemonId = enumspokemonId
            } else {
                 try unknownFieldsBuilder.mergeVarintField(2, value:Int64(valueIntpokemonId))
            }

          case 24:
            cp = try input.readInt32()

          case 32:
            stamina = try input.readInt32()

          case 40:
            staminaMax = try input.readInt32()

          case 48:
            let valueIntmove1 = try input.readEnum()
            if let enumsmove1 = Pogoprotos.Enums.PokemonMove(rawValue:valueIntmove1){
                 move1 = enumsmove1
            } else {
                 try unknownFieldsBuilder.mergeVarintField(6, value:Int64(valueIntmove1))
            }

          case 56:
            let valueIntmove2 = try input.readEnum()
            if let enumsmove2 = Pogoprotos.Enums.PokemonMove(rawValue:valueIntmove2){
                 move2 = enumsmove2
            } else {
                 try unknownFieldsBuilder.mergeVarintField(7, value:Int64(valueIntmove2))
            }

          case 64:
            deployedFortId = try input.readInt32()

          case 74:
            ownerName = try input.readString()

          case 80:
            isEgg = try input.readBool()

          case 89:
            eggKmWalkedTarget = try input.readDouble()

          case 97:
            eggKmWalkedStart = try input.readDouble()

          case 112:
            origin = try input.readInt32()

          case 125:
            heightM = try input.readFloat()

          case 133:
            weightKg = try input.readFloat()

          case 136:
            individualAttack = try input.readInt32()

          case 144:
            individualDefense = try input.readInt32()

          case 152:
            individualStamina = try input.readInt32()

          case 165:
            cpMultiplier = try input.readFloat()

          case 168:
            let valueIntpokeball = try input.readEnum()
            if let enumspokeball = Pogoprotos.Inventory.Item.ItemId(rawValue:valueIntpokeball){
                 pokeball = enumspokeball
            } else {
                 try unknownFieldsBuilder.mergeVarintField(21, value:Int64(valueIntpokeball))
            }

          case 176:
            capturedCellId = try input.readUInt64()

          case 184:
            battlesAttacked = try input.readInt32()

          case 192:
            battlesDefended = try input.readInt32()

          case 202:
            eggIncubatorId = try input.readString()

          case 208:
            creationTimeMs = try input.readUInt64()

          case 216:
            numUpgrades = try input.readInt32()

          case 229:
            additionalCpMultiplier = try input.readFloat()

          case 232:
            favorite = try input.readInt32()

          case 242:
            nickname = try input.readString()

          case 248:
            fromFort = try input.readInt32()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Data.PokemonData.Builder {
        let resultDecodedBuilder = Pogoprotos.Data.PokemonData.Builder()
        if let jsonValueId = jsonMap["id"] as? String {
          resultDecodedBuilder.id = UInt64(jsonValueId)!
        }
        if let jsonValuePokemonId = jsonMap["pokemonId"] as? String {
          resultDecodedBuilder.pokemonId = try Pogoprotos.Enums.PokemonId.fromString(jsonValuePokemonId)
        }
        if let jsonValueCp = jsonMap["cp"] as? NSNumber {
          resultDecodedBuilder.cp = jsonValueCp.intValue
        }
        if let jsonValueStamina = jsonMap["stamina"] as? NSNumber {
          resultDecodedBuilder.stamina = jsonValueStamina.intValue
        }
        if let jsonValueStaminaMax = jsonMap["staminaMax"] as? NSNumber {
          resultDecodedBuilder.staminaMax = jsonValueStaminaMax.intValue
        }
        if let jsonValueMove1 = jsonMap["move1"] as? String {
          resultDecodedBuilder.move1 = try Pogoprotos.Enums.PokemonMove.fromString(jsonValueMove1)
        }
        if let jsonValueMove2 = jsonMap["move2"] as? String {
          resultDecodedBuilder.move2 = try Pogoprotos.Enums.PokemonMove.fromString(jsonValueMove2)
        }
        if let jsonValueDeployedFortId = jsonMap["deployedFortId"] as? NSNumber {
          resultDecodedBuilder.deployedFortId = jsonValueDeployedFortId.intValue
        }
        if let jsonValueOwnerName = jsonMap["ownerName"] as? String {
          resultDecodedBuilder.ownerName = jsonValueOwnerName
        }
        if let jsonValueIsEgg = jsonMap["isEgg"] as? Bool {
          resultDecodedBuilder.isEgg = jsonValueIsEgg
        }
        if let jsonValueEggKmWalkedTarget = jsonMap["eggKmWalkedTarget"] as? NSNumber {
          resultDecodedBuilder.eggKmWalkedTarget = jsonValueEggKmWalkedTarget.doubleValue
        }
        if let jsonValueEggKmWalkedStart = jsonMap["eggKmWalkedStart"] as? NSNumber {
          resultDecodedBuilder.eggKmWalkedStart = jsonValueEggKmWalkedStart.doubleValue
        }
        if let jsonValueOrigin = jsonMap["origin"] as? NSNumber {
          resultDecodedBuilder.origin = jsonValueOrigin.intValue
        }
        if let jsonValueHeightM = jsonMap["heightM"] as? NSNumber {
          resultDecodedBuilder.heightM = jsonValueHeightM.floatValue
        }
        if let jsonValueWeightKg = jsonMap["weightKg"] as? NSNumber {
          resultDecodedBuilder.weightKg = jsonValueWeightKg.floatValue
        }
        if let jsonValueIndividualAttack = jsonMap["individualAttack"] as? NSNumber {
          resultDecodedBuilder.individualAttack = jsonValueIndividualAttack.intValue
        }
        if let jsonValueIndividualDefense = jsonMap["individualDefense"] as? NSNumber {
          resultDecodedBuilder.individualDefense = jsonValueIndividualDefense.intValue
        }
        if let jsonValueIndividualStamina = jsonMap["individualStamina"] as? NSNumber {
          resultDecodedBuilder.individualStamina = jsonValueIndividualStamina.intValue
        }
        if let jsonValueCpMultiplier = jsonMap["cpMultiplier"] as? NSNumber {
          resultDecodedBuilder.cpMultiplier = jsonValueCpMultiplier.floatValue
        }
        if let jsonValuePokeball = jsonMap["pokeball"] as? String {
          resultDecodedBuilder.pokeball = try Pogoprotos.Inventory.Item.ItemId.fromString(jsonValuePokeball)
        }
        if let jsonValueCapturedCellId = jsonMap["capturedCellId"] as? String {
          resultDecodedBuilder.capturedCellId = UInt64(jsonValueCapturedCellId)!
        }
        if let jsonValueBattlesAttacked = jsonMap["battlesAttacked"] as? NSNumber {
          resultDecodedBuilder.battlesAttacked = jsonValueBattlesAttacked.intValue
        }
        if let jsonValueBattlesDefended = jsonMap["battlesDefended"] as? NSNumber {
          resultDecodedBuilder.battlesDefended = jsonValueBattlesDefended.intValue
        }
        if let jsonValueEggIncubatorId = jsonMap["eggIncubatorId"] as? String {
          resultDecodedBuilder.eggIncubatorId = jsonValueEggIncubatorId
        }
        if let jsonValueCreationTimeMs = jsonMap["creationTimeMs"] as? String {
          resultDecodedBuilder.creationTimeMs = UInt64(jsonValueCreationTimeMs)!
        }
        if let jsonValueNumUpgrades = jsonMap["numUpgrades"] as? NSNumber {
          resultDecodedBuilder.numUpgrades = jsonValueNumUpgrades.intValue
        }
        if let jsonValueAdditionalCpMultiplier = jsonMap["additionalCpMultiplier"] as? NSNumber {
          resultDecodedBuilder.additionalCpMultiplier = jsonValueAdditionalCpMultiplier.floatValue
        }
        if let jsonValueFavorite = jsonMap["favorite"] as? NSNumber {
          resultDecodedBuilder.favorite = jsonValueFavorite.intValue
        }
        if let jsonValueNickname = jsonMap["nickname"] as? String {
          resultDecodedBuilder.nickname = jsonValueNickname
        }
        if let jsonValueFromFort = jsonMap["fromFort"] as? NSNumber {
          resultDecodedBuilder.fromFort = jsonValueFromFort.intValue
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Data.PokemonData.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Data.PokemonData.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
