// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "FortDetailsResponse.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Pogoprotos { public struct Networking { public struct Responses { }}}

public func == (lhs: Pogoprotos.Networking.Responses.FortDetailsResponse, rhs: Pogoprotos.Networking.Responses.FortDetailsResponse) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasFortId == rhs.hasFortId) && (!lhs.hasFortId || lhs.fortId == rhs.fortId)
  fieldCheck = fieldCheck && (lhs.hasTeamColor == rhs.hasTeamColor) && (!lhs.hasTeamColor || lhs.teamColor == rhs.teamColor)
  fieldCheck = fieldCheck && (lhs.hasPokemonData == rhs.hasPokemonData) && (!lhs.hasPokemonData || lhs.pokemonData == rhs.pokemonData)
  fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
  fieldCheck = fieldCheck && (lhs.imageUrls == rhs.imageUrls)
  fieldCheck = fieldCheck && (lhs.hasFp == rhs.hasFp) && (!lhs.hasFp || lhs.fp == rhs.fp)
  fieldCheck = fieldCheck && (lhs.hasStamina == rhs.hasStamina) && (!lhs.hasStamina || lhs.stamina == rhs.stamina)
  fieldCheck = fieldCheck && (lhs.hasMaxStamina == rhs.hasMaxStamina) && (!lhs.hasMaxStamina || lhs.maxStamina == rhs.maxStamina)
  fieldCheck = fieldCheck && (lhs.hasTypes == rhs.hasTypes) && (!lhs.hasTypes || lhs.types == rhs.types)
  fieldCheck = fieldCheck && (lhs.hasLatitude == rhs.hasLatitude) && (!lhs.hasLatitude || lhs.latitude == rhs.latitude)
  fieldCheck = fieldCheck && (lhs.hasLongitude == rhs.hasLongitude) && (!lhs.hasLongitude || lhs.longitude == rhs.longitude)
  fieldCheck = fieldCheck && (lhs.hasDescription == rhs.hasDescription) && (!lhs.hasDescription || lhs.description_ == rhs.description_)
  fieldCheck = fieldCheck && (lhs.modifiers == rhs.modifiers)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Pogoprotos.Networking.Responses {
  public struct FortDetailsResponseRoot {
    public static var sharedInstance : FortDetailsResponseRoot {
     struct Static {
         static let instance : FortDetailsResponseRoot = FortDetailsResponseRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Pogoprotos.Data.PokemonDataRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Enums.TeamColorRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Map.Fort.FortTypeRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Map.Fort.FortModifierRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class FortDetailsResponse : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasFortId:Bool = false
    public private(set) var fortId:String = ""

    public private(set) var teamColor:Pogoprotos.Enums.TeamColor = Pogoprotos.Enums.TeamColor.Neutral
    public private(set) var hasTeamColor:Bool = false
    public private(set) var hasPokemonData:Bool = false
    public private(set) var pokemonData:Pogoprotos.Data.PokemonData!
    public private(set) var hasName:Bool = false
    public private(set) var name:String = ""

    public private(set) var imageUrls:Array<String> = Array<String>()
    public private(set) var hasFp:Bool = false
    public private(set) var fp:Int32 = Int32(0)

    public private(set) var hasStamina:Bool = false
    public private(set) var stamina:Int32 = Int32(0)

    public private(set) var hasMaxStamina:Bool = false
    public private(set) var maxStamina:Int32 = Int32(0)

    public private(set) var types:Pogoprotos.Map.Fort.FortType = Pogoprotos.Map.Fort.FortType.Gym
    public private(set) var hasTypes:Bool = false
    public private(set) var hasLatitude:Bool = false
    public private(set) var latitude:Double = Double(0)

    public private(set) var hasLongitude:Bool = false
    public private(set) var longitude:Double = Double(0)

    public private(set) var hasDescription:Bool = false
    public private(set) var description_:String = ""

    public private(set) var modifiers:Array<Pogoprotos.Map.Fort.FortModifier>  = Array<Pogoprotos.Map.Fort.FortModifier>()
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasFortId {
        try output.writeString(1, value:fortId)
      }
      if hasTeamColor {
        try output.writeEnum(2, value:teamColor.rawValue)
      }
      if hasPokemonData {
        try output.writeMessage(3, value:pokemonData)
      }
      if hasName {
        try output.writeString(4, value:name)
      }
      if !imageUrls.isEmpty {
        for oneValueimageUrls in imageUrls {
          try output.writeString(5, value:oneValueimageUrls)
        }
      }
      if hasFp {
        try output.writeInt32(6, value:fp)
      }
      if hasStamina {
        try output.writeInt32(7, value:stamina)
      }
      if hasMaxStamina {
        try output.writeInt32(8, value:maxStamina)
      }
      if hasTypes {
        try output.writeEnum(9, value:types.rawValue)
      }
      if hasLatitude {
        try output.writeDouble(10, value:latitude)
      }
      if hasLongitude {
        try output.writeDouble(11, value:longitude)
      }
      if hasDescription {
        try output.writeString(12, value:description_)
      }
      for oneElementModifiers in modifiers {
          try output.writeMessage(13, value:oneElementModifiers)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasFortId {
        serialize_size += fortId.computeStringSize(1)
      }
      if (hasTeamColor) {
        serialize_size += teamColor.rawValue.computeEnumSize(2)
      }
      if hasPokemonData {
          if let varSizepokemonData = pokemonData?.computeMessageSize(3) {
              serialize_size += varSizepokemonData
          }
      }
      if hasName {
        serialize_size += name.computeStringSize(4)
      }
      var dataSizeImageUrls:Int32 = 0
      for oneValueimageUrls in imageUrls {
          dataSizeImageUrls += oneValueimageUrls.computeStringSizeNoTag()
      }
      serialize_size += dataSizeImageUrls
      serialize_size += 1 * Int32(imageUrls.count)
      if hasFp {
        serialize_size += fp.computeInt32Size(6)
      }
      if hasStamina {
        serialize_size += stamina.computeInt32Size(7)
      }
      if hasMaxStamina {
        serialize_size += maxStamina.computeInt32Size(8)
      }
      if (hasTypes) {
        serialize_size += types.rawValue.computeEnumSize(9)
      }
      if hasLatitude {
        serialize_size += latitude.computeDoubleSize(10)
      }
      if hasLongitude {
        serialize_size += longitude.computeDoubleSize(11)
      }
      if hasDescription {
        serialize_size += description_.computeStringSize(12)
      }
      for oneElementModifiers in modifiers {
          serialize_size += oneElementModifiers.computeMessageSize(13)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Networking.Responses.FortDetailsResponse> {
      var mergedArray = Array<Pogoprotos.Networking.Responses.FortDetailsResponse>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Responses.FortDetailsResponse? {
      return try Pogoprotos.Networking.Responses.FortDetailsResponse.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Networking.Responses.FortDetailsResponse {
      return try Pogoprotos.Networking.Responses.FortDetailsResponse.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Networking.Responses.FortDetailsResponseRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Responses.FortDetailsResponse {
      return try Pogoprotos.Networking.Responses.FortDetailsResponse.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Responses.FortDetailsResponse {
      return try Pogoprotos.Networking.Responses.FortDetailsResponse.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Responses.FortDetailsResponse {
      return try Pogoprotos.Networking.Responses.FortDetailsResponse.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Responses.FortDetailsResponse {
      return try Pogoprotos.Networking.Responses.FortDetailsResponse.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Responses.FortDetailsResponse {
      return try Pogoprotos.Networking.Responses.FortDetailsResponse.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Networking.Responses.FortDetailsResponse.Builder {
      return Pogoprotos.Networking.Responses.FortDetailsResponse.classBuilder() as! Pogoprotos.Networking.Responses.FortDetailsResponse.Builder
    }
    public func getBuilder() -> Pogoprotos.Networking.Responses.FortDetailsResponse.Builder {
      return classBuilder() as! Pogoprotos.Networking.Responses.FortDetailsResponse.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Networking.Responses.FortDetailsResponse.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Networking.Responses.FortDetailsResponse.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Networking.Responses.FortDetailsResponse.Builder {
      return try Pogoprotos.Networking.Responses.FortDetailsResponse.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Networking.Responses.FortDetailsResponse) throws -> Pogoprotos.Networking.Responses.FortDetailsResponse.Builder {
      return try Pogoprotos.Networking.Responses.FortDetailsResponse.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasFortId {
        jsonMap["fortId"] = fortId
      }
      if hasTeamColor {
        jsonMap["teamColor"] = teamColor.toString()
      }
      if hasPokemonData {
        jsonMap["pokemonData"] = try pokemonData.encode()
      }
      if hasName {
        jsonMap["name"] = name
      }
      if !imageUrls.isEmpty {
        jsonMap["imageUrls"] = imageUrls
      }
      if hasFp {
        jsonMap["fp"] = NSNumber(int:fp)
      }
      if hasStamina {
        jsonMap["stamina"] = NSNumber(int:stamina)
      }
      if hasMaxStamina {
        jsonMap["maxStamina"] = NSNumber(int:maxStamina)
      }
      if hasTypes {
        jsonMap["type"] = types.toString()
      }
      if hasLatitude {
        jsonMap["latitude"] = NSNumber(double:latitude)
      }
      if hasLongitude {
        jsonMap["longitude"] = NSNumber(double:longitude)
      }
      if hasDescription {
        jsonMap["description"] = description_
      }
      if !modifiers.isEmpty {
        var jsonArrayModifiers:Array<Dictionary<String,AnyObject>> = []
          for oneValueModifiers in modifiers {
            let ecodedMessageModifiers = try oneValueModifiers.encode()
            jsonArrayModifiers += [ecodedMessageModifiers]
          }
        jsonMap["modifiers"] = jsonArrayModifiers
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Responses.FortDetailsResponse {
      return try Pogoprotos.Networking.Responses.FortDetailsResponse.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Networking.Responses.FortDetailsResponse {
      return try Pogoprotos.Networking.Responses.FortDetailsResponse.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasFortId {
        output += "\(indent) fortId: \(fortId) \n"
      }
      if (hasTeamColor) {
        output += "\(indent) teamColor: \(teamColor.description)\n"
      }
      if hasPokemonData {
        output += "\(indent) pokemonData {\n"
        if let outDescPokemonData = pokemonData {
          output += try outDescPokemonData.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasName {
        output += "\(indent) name: \(name) \n"
      }
      var imageUrlsElementIndex:Int = 0
      for oneValueImageUrls in imageUrls  {
          output += "\(indent) imageUrls[\(imageUrlsElementIndex)]: \(oneValueImageUrls)\n"
          imageUrlsElementIndex += 1
      }
      if hasFp {
        output += "\(indent) fp: \(fp) \n"
      }
      if hasStamina {
        output += "\(indent) stamina: \(stamina) \n"
      }
      if hasMaxStamina {
        output += "\(indent) maxStamina: \(maxStamina) \n"
      }
      if (hasTypes) {
        output += "\(indent) types: \(types.description)\n"
      }
      if hasLatitude {
        output += "\(indent) latitude: \(latitude) \n"
      }
      if hasLongitude {
        output += "\(indent) longitude: \(longitude) \n"
      }
      if hasDescription {
        output += "\(indent) description_: \(description_) \n"
      }
      var modifiersElementIndex:Int = 0
      for oneElementModifiers in modifiers {
          output += "\(indent) modifiers[\(modifiersElementIndex)] {\n"
          output += try oneElementModifiers.getDescription("\(indent)  ")
          output += "\(indent)}\n"
          modifiersElementIndex += 1
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasFortId {
               hashCode = (hashCode &* 31) &+ fortId.hashValue
            }
            if hasTeamColor {
               hashCode = (hashCode &* 31) &+ Int(teamColor.rawValue)
            }
            if hasPokemonData {
                if let hashValuepokemonData = pokemonData?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuepokemonData
                }
            }
            if hasName {
               hashCode = (hashCode &* 31) &+ name.hashValue
            }
            for oneValueImageUrls in imageUrls {
                hashCode = (hashCode &* 31) &+ oneValueImageUrls.hashValue
            }
            if hasFp {
               hashCode = (hashCode &* 31) &+ fp.hashValue
            }
            if hasStamina {
               hashCode = (hashCode &* 31) &+ stamina.hashValue
            }
            if hasMaxStamina {
               hashCode = (hashCode &* 31) &+ maxStamina.hashValue
            }
            if hasTypes {
               hashCode = (hashCode &* 31) &+ Int(types.rawValue)
            }
            if hasLatitude {
               hashCode = (hashCode &* 31) &+ latitude.hashValue
            }
            if hasLongitude {
               hashCode = (hashCode &* 31) &+ longitude.hashValue
            }
            if hasDescription {
               hashCode = (hashCode &* 31) &+ description_.hashValue
            }
            for oneElementModifiers in modifiers {
                hashCode = (hashCode &* 31) &+ oneElementModifiers.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Networking.Responses.FortDetailsResponse"
    }
    override public func className() -> String {
        return "Pogoprotos.Networking.Responses.FortDetailsResponse"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Networking.Responses.FortDetailsResponse.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Networking.Responses.FortDetailsResponse = Pogoprotos.Networking.Responses.FortDetailsResponse()
      public func getMessage() -> Pogoprotos.Networking.Responses.FortDetailsResponse {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasFortId:Bool {
           get {
                return builderResult.hasFortId
           }
      }
      public var fortId:String {
           get {
                return builderResult.fortId
           }
           set (value) {
               builderResult.hasFortId = true
               builderResult.fortId = value
           }
      }
      public func setFortId(value:String) -> Pogoprotos.Networking.Responses.FortDetailsResponse.Builder {
        self.fortId = value
        return self
      }
      public func clearFortId() -> Pogoprotos.Networking.Responses.FortDetailsResponse.Builder{
           builderResult.hasFortId = false
           builderResult.fortId = ""
           return self
      }
        public var hasTeamColor:Bool{
            get {
                return builderResult.hasTeamColor
            }
        }
        public var teamColor:Pogoprotos.Enums.TeamColor {
            get {
                return builderResult.teamColor
            }
            set (value) {
                builderResult.hasTeamColor = true
                builderResult.teamColor = value
            }
        }
        public func setTeamColor(value:Pogoprotos.Enums.TeamColor) -> Pogoprotos.Networking.Responses.FortDetailsResponse.Builder {
          self.teamColor = value
          return self
        }
        public func clearTeamColor() -> Pogoprotos.Networking.Responses.FortDetailsResponse.Builder {
           builderResult.hasTeamColor = false
           builderResult.teamColor = .Neutral
           return self
        }
      public var hasPokemonData:Bool {
           get {
               return builderResult.hasPokemonData
           }
      }
      public var pokemonData:Pogoprotos.Data.PokemonData! {
           get {
               if pokemonDataBuilder_ != nil {
                  builderResult.pokemonData = pokemonDataBuilder_.getMessage()
               }
               return builderResult.pokemonData
           }
           set (value) {
               builderResult.hasPokemonData = true
               builderResult.pokemonData = value
           }
      }
      private var pokemonDataBuilder_:Pogoprotos.Data.PokemonData.Builder! {
           didSet {
              builderResult.hasPokemonData = true
           }
      }
      public func getPokemonDataBuilder() -> Pogoprotos.Data.PokemonData.Builder {
        if pokemonDataBuilder_ == nil {
           pokemonDataBuilder_ = Pogoprotos.Data.PokemonData.Builder()
           builderResult.pokemonData = pokemonDataBuilder_.getMessage()
           if pokemonData != nil {
              try! pokemonDataBuilder_.mergeFrom(pokemonData)
           }
        }
        return pokemonDataBuilder_
      }
      public func setPokemonData(value:Pogoprotos.Data.PokemonData!) -> Pogoprotos.Networking.Responses.FortDetailsResponse.Builder {
        self.pokemonData = value
        return self
      }
      public func mergePokemonData(value:Pogoprotos.Data.PokemonData) throws -> Pogoprotos.Networking.Responses.FortDetailsResponse.Builder {
        if builderResult.hasPokemonData {
          builderResult.pokemonData = try Pogoprotos.Data.PokemonData.builderWithPrototype(builderResult.pokemonData).mergeFrom(value).buildPartial()
        } else {
          builderResult.pokemonData = value
        }
        builderResult.hasPokemonData = true
        return self
      }
      public func clearPokemonData() -> Pogoprotos.Networking.Responses.FortDetailsResponse.Builder {
        pokemonDataBuilder_ = nil
        builderResult.hasPokemonData = false
        builderResult.pokemonData = nil
        return self
      }
      public var hasName:Bool {
           get {
                return builderResult.hasName
           }
      }
      public var name:String {
           get {
                return builderResult.name
           }
           set (value) {
               builderResult.hasName = true
               builderResult.name = value
           }
      }
      public func setName(value:String) -> Pogoprotos.Networking.Responses.FortDetailsResponse.Builder {
        self.name = value
        return self
      }
      public func clearName() -> Pogoprotos.Networking.Responses.FortDetailsResponse.Builder{
           builderResult.hasName = false
           builderResult.name = ""
           return self
      }
      public var imageUrls:Array<String> {
           get {
               return builderResult.imageUrls
           }
           set (array) {
               builderResult.imageUrls = array
           }
      }
      public func setImageUrls(value:Array<String>) -> Pogoprotos.Networking.Responses.FortDetailsResponse.Builder {
        self.imageUrls = value
        return self
      }
      public func clearImageUrls() -> Pogoprotos.Networking.Responses.FortDetailsResponse.Builder {
         builderResult.imageUrls.removeAll(keepCapacity: false)
         return self
      }
      public var hasFp:Bool {
           get {
                return builderResult.hasFp
           }
      }
      public var fp:Int32 {
           get {
                return builderResult.fp
           }
           set (value) {
               builderResult.hasFp = true
               builderResult.fp = value
           }
      }
      public func setFp(value:Int32) -> Pogoprotos.Networking.Responses.FortDetailsResponse.Builder {
        self.fp = value
        return self
      }
      public func clearFp() -> Pogoprotos.Networking.Responses.FortDetailsResponse.Builder{
           builderResult.hasFp = false
           builderResult.fp = Int32(0)
           return self
      }
      public var hasStamina:Bool {
           get {
                return builderResult.hasStamina
           }
      }
      public var stamina:Int32 {
           get {
                return builderResult.stamina
           }
           set (value) {
               builderResult.hasStamina = true
               builderResult.stamina = value
           }
      }
      public func setStamina(value:Int32) -> Pogoprotos.Networking.Responses.FortDetailsResponse.Builder {
        self.stamina = value
        return self
      }
      public func clearStamina() -> Pogoprotos.Networking.Responses.FortDetailsResponse.Builder{
           builderResult.hasStamina = false
           builderResult.stamina = Int32(0)
           return self
      }
      public var hasMaxStamina:Bool {
           get {
                return builderResult.hasMaxStamina
           }
      }
      public var maxStamina:Int32 {
           get {
                return builderResult.maxStamina
           }
           set (value) {
               builderResult.hasMaxStamina = true
               builderResult.maxStamina = value
           }
      }
      public func setMaxStamina(value:Int32) -> Pogoprotos.Networking.Responses.FortDetailsResponse.Builder {
        self.maxStamina = value
        return self
      }
      public func clearMaxStamina() -> Pogoprotos.Networking.Responses.FortDetailsResponse.Builder{
           builderResult.hasMaxStamina = false
           builderResult.maxStamina = Int32(0)
           return self
      }
        public var hasTypes:Bool{
            get {
                return builderResult.hasTypes
            }
        }
        public var types:Pogoprotos.Map.Fort.FortType {
            get {
                return builderResult.types
            }
            set (value) {
                builderResult.hasTypes = true
                builderResult.types = value
            }
        }
        public func setTypes(value:Pogoprotos.Map.Fort.FortType) -> Pogoprotos.Networking.Responses.FortDetailsResponse.Builder {
          self.types = value
          return self
        }
        public func clearTypes() -> Pogoprotos.Networking.Responses.FortDetailsResponse.Builder {
           builderResult.hasTypes = false
           builderResult.types = .Gym
           return self
        }
      public var hasLatitude:Bool {
           get {
                return builderResult.hasLatitude
           }
      }
      public var latitude:Double {
           get {
                return builderResult.latitude
           }
           set (value) {
               builderResult.hasLatitude = true
               builderResult.latitude = value
           }
      }
      public func setLatitude(value:Double) -> Pogoprotos.Networking.Responses.FortDetailsResponse.Builder {
        self.latitude = value
        return self
      }
      public func clearLatitude() -> Pogoprotos.Networking.Responses.FortDetailsResponse.Builder{
           builderResult.hasLatitude = false
           builderResult.latitude = Double(0)
           return self
      }
      public var hasLongitude:Bool {
           get {
                return builderResult.hasLongitude
           }
      }
      public var longitude:Double {
           get {
                return builderResult.longitude
           }
           set (value) {
               builderResult.hasLongitude = true
               builderResult.longitude = value
           }
      }
      public func setLongitude(value:Double) -> Pogoprotos.Networking.Responses.FortDetailsResponse.Builder {
        self.longitude = value
        return self
      }
      public func clearLongitude() -> Pogoprotos.Networking.Responses.FortDetailsResponse.Builder{
           builderResult.hasLongitude = false
           builderResult.longitude = Double(0)
           return self
      }
      public var hasDescription:Bool {
           get {
                return builderResult.hasDescription
           }
      }
      public var description_:String {
           get {
                return builderResult.description_
           }
           set (value) {
               builderResult.hasDescription = true
               builderResult.description_ = value
           }
      }
      public func setDescription(value:String) -> Pogoprotos.Networking.Responses.FortDetailsResponse.Builder {
        self.description_ = value
        return self
      }
      public func clearDescription() -> Pogoprotos.Networking.Responses.FortDetailsResponse.Builder{
           builderResult.hasDescription = false
           builderResult.description_ = ""
           return self
      }
      public var modifiers:Array<Pogoprotos.Map.Fort.FortModifier> {
           get {
               return builderResult.modifiers
           }
           set (value) {
               builderResult.modifiers = value
           }
      }
      public func setModifiers(value:Array<Pogoprotos.Map.Fort.FortModifier>) -> Pogoprotos.Networking.Responses.FortDetailsResponse.Builder {
        self.modifiers = value
        return self
      }
      public func clearModifiers() -> Pogoprotos.Networking.Responses.FortDetailsResponse.Builder {
        builderResult.modifiers.removeAll(keepCapacity: false)
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Networking.Responses.FortDetailsResponse.Builder {
        builderResult = Pogoprotos.Networking.Responses.FortDetailsResponse()
        return self
      }
      override public func clone() throws -> Pogoprotos.Networking.Responses.FortDetailsResponse.Builder {
        return try Pogoprotos.Networking.Responses.FortDetailsResponse.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Networking.Responses.FortDetailsResponse {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Networking.Responses.FortDetailsResponse {
        let returnMe:Pogoprotos.Networking.Responses.FortDetailsResponse = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Networking.Responses.FortDetailsResponse) throws -> Pogoprotos.Networking.Responses.FortDetailsResponse.Builder {
        if other == Pogoprotos.Networking.Responses.FortDetailsResponse() {
         return self
        }
        if other.hasFortId {
             fortId = other.fortId
        }
        if other.hasTeamColor {
             teamColor = other.teamColor
        }
        if (other.hasPokemonData) {
            try mergePokemonData(other.pokemonData)
        }
        if other.hasName {
             name = other.name
        }
        if !other.imageUrls.isEmpty {
            builderResult.imageUrls += other.imageUrls
        }
        if other.hasFp {
             fp = other.fp
        }
        if other.hasStamina {
             stamina = other.stamina
        }
        if other.hasMaxStamina {
             maxStamina = other.maxStamina
        }
        if other.hasTypes {
             types = other.types
        }
        if other.hasLatitude {
             latitude = other.latitude
        }
        if other.hasLongitude {
             longitude = other.longitude
        }
        if other.hasDescription {
             description_ = other.description_
        }
        if !other.modifiers.isEmpty  {
           builderResult.modifiers += other.modifiers
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Responses.FortDetailsResponse.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Responses.FortDetailsResponse.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10:
            fortId = try input.readString()

          case 16:
            let valueIntteamColor = try input.readEnum()
            if let enumsteamColor = Pogoprotos.Enums.TeamColor(rawValue:valueIntteamColor){
                 teamColor = enumsteamColor
            } else {
                 try unknownFieldsBuilder.mergeVarintField(2, value:Int64(valueIntteamColor))
            }

          case 26:
            let subBuilder:Pogoprotos.Data.PokemonData.Builder = Pogoprotos.Data.PokemonData.Builder()
            if hasPokemonData {
              try subBuilder.mergeFrom(pokemonData)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            pokemonData = subBuilder.buildPartial()

          case 34:
            name = try input.readString()

          case 42:
            imageUrls += [try input.readString()]

          case 48:
            fp = try input.readInt32()

          case 56:
            stamina = try input.readInt32()

          case 64:
            maxStamina = try input.readInt32()

          case 72:
            let valueInttypes = try input.readEnum()
            if let enumstypes = Pogoprotos.Map.Fort.FortType(rawValue:valueInttypes){
                 types = enumstypes
            } else {
                 try unknownFieldsBuilder.mergeVarintField(9, value:Int64(valueInttypes))
            }

          case 81:
            latitude = try input.readDouble()

          case 89:
            longitude = try input.readDouble()

          case 98:
            description_ = try input.readString()

          case 106:
            let subBuilder = Pogoprotos.Map.Fort.FortModifier.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            modifiers += [subBuilder.buildPartial()]

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Responses.FortDetailsResponse.Builder {
        let resultDecodedBuilder = Pogoprotos.Networking.Responses.FortDetailsResponse.Builder()
        if let jsonValueFortId = jsonMap["fortId"] as? String {
          resultDecodedBuilder.fortId = jsonValueFortId
        }
        if let jsonValueTeamColor = jsonMap["teamColor"] as? String {
          resultDecodedBuilder.teamColor = try Pogoprotos.Enums.TeamColor.fromString(jsonValueTeamColor)
        }
        if let jsonValuePokemonData = jsonMap["pokemonData"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.pokemonData = try Pogoprotos.Data.PokemonData.Builder.decodeToBuilder(jsonValuePokemonData).build()

        }
        if let jsonValueName = jsonMap["name"] as? String {
          resultDecodedBuilder.name = jsonValueName
        }
        if let jsonValueImageUrls = jsonMap["imageUrls"] as? Array<String> {
          resultDecodedBuilder.imageUrls = jsonValueImageUrls
        }
        if let jsonValueFp = jsonMap["fp"] as? NSNumber {
          resultDecodedBuilder.fp = jsonValueFp.intValue
        }
        if let jsonValueStamina = jsonMap["stamina"] as? NSNumber {
          resultDecodedBuilder.stamina = jsonValueStamina.intValue
        }
        if let jsonValueMaxStamina = jsonMap["maxStamina"] as? NSNumber {
          resultDecodedBuilder.maxStamina = jsonValueMaxStamina.intValue
        }
        if let jsonValueTypes = jsonMap["type"] as? String {
          resultDecodedBuilder.types = try Pogoprotos.Map.Fort.FortType.fromString(jsonValueTypes)
        }
        if let jsonValueLatitude = jsonMap["latitude"] as? NSNumber {
          resultDecodedBuilder.latitude = jsonValueLatitude.doubleValue
        }
        if let jsonValueLongitude = jsonMap["longitude"] as? NSNumber {
          resultDecodedBuilder.longitude = jsonValueLongitude.doubleValue
        }
        if let jsonValueDescription = jsonMap["description"] as? String {
          resultDecodedBuilder.description_ = jsonValueDescription
        }
        if let jsonValueModifiers = jsonMap["modifiers"] as? Array<Dictionary<String,AnyObject>> {
          var jsonArrayModifiers:Array<Pogoprotos.Map.Fort.FortModifier> = []
          for oneValueModifiers in jsonValueModifiers {
            let messageFromStringModifiers = try Pogoprotos.Map.Fort.FortModifier.Builder.decodeToBuilder(oneValueModifiers).build()

            jsonArrayModifiers += [messageFromStringModifiers]
          }
          resultDecodedBuilder.modifiers = jsonArrayModifiers
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Networking.Responses.FortDetailsResponse.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Networking.Responses.FortDetailsResponse.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
