// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "BattleAction.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Pogoprotos { public struct Data { public struct Battle { }}}

public func == (lhs: Pogoprotos.Data.Battle.BattleAction, rhs: Pogoprotos.Data.Battle.BattleAction) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasTypes == rhs.hasTypes) && (!lhs.hasTypes || lhs.types == rhs.types)
  fieldCheck = fieldCheck && (lhs.hasActionStartMs == rhs.hasActionStartMs) && (!lhs.hasActionStartMs || lhs.actionStartMs == rhs.actionStartMs)
  fieldCheck = fieldCheck && (lhs.hasDurationMs == rhs.hasDurationMs) && (!lhs.hasDurationMs || lhs.durationMs == rhs.durationMs)
  fieldCheck = fieldCheck && (lhs.hasEnergyDelta == rhs.hasEnergyDelta) && (!lhs.hasEnergyDelta || lhs.energyDelta == rhs.energyDelta)
  fieldCheck = fieldCheck && (lhs.hasAttackerIndex == rhs.hasAttackerIndex) && (!lhs.hasAttackerIndex || lhs.attackerIndex == rhs.attackerIndex)
  fieldCheck = fieldCheck && (lhs.hasTargetIndex == rhs.hasTargetIndex) && (!lhs.hasTargetIndex || lhs.targetIndex == rhs.targetIndex)
  fieldCheck = fieldCheck && (lhs.hasActivePokemonId == rhs.hasActivePokemonId) && (!lhs.hasActivePokemonId || lhs.activePokemonId == rhs.activePokemonId)
  fieldCheck = fieldCheck && (lhs.hasPlayerJoined == rhs.hasPlayerJoined) && (!lhs.hasPlayerJoined || lhs.playerJoined == rhs.playerJoined)
  fieldCheck = fieldCheck && (lhs.hasBattleResults == rhs.hasBattleResults) && (!lhs.hasBattleResults || lhs.battleResults == rhs.battleResults)
  fieldCheck = fieldCheck && (lhs.hasDamageWindowsStartTimestampMss == rhs.hasDamageWindowsStartTimestampMss) && (!lhs.hasDamageWindowsStartTimestampMss || lhs.damageWindowsStartTimestampMss == rhs.damageWindowsStartTimestampMss)
  fieldCheck = fieldCheck && (lhs.hasDamageWindowsEndTimestampMss == rhs.hasDamageWindowsEndTimestampMss) && (!lhs.hasDamageWindowsEndTimestampMss || lhs.damageWindowsEndTimestampMss == rhs.damageWindowsEndTimestampMss)
  fieldCheck = fieldCheck && (lhs.hasPlayerLeft == rhs.hasPlayerLeft) && (!lhs.hasPlayerLeft || lhs.playerLeft == rhs.playerLeft)
  fieldCheck = fieldCheck && (lhs.hasTargetPokemonId == rhs.hasTargetPokemonId) && (!lhs.hasTargetPokemonId || lhs.targetPokemonId == rhs.targetPokemonId)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Pogoprotos.Data.Battle {
  public struct BattleActionRoot {
    public static var sharedInstance : BattleActionRoot {
     struct Static {
         static let instance : BattleActionRoot = BattleActionRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Pogoprotos.Data.Battle.BattleResultsRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Data.Battle.BattleActionTypeRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Data.Battle.BattleParticipantRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class BattleAction : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var types:Pogoprotos.Data.Battle.BattleActionType = Pogoprotos.Data.Battle.BattleActionType.ActionUnset
    public private(set) var hasTypes:Bool = false
    public private(set) var hasActionStartMs:Bool = false
    public private(set) var actionStartMs:Int64 = Int64(0)

    public private(set) var hasDurationMs:Bool = false
    public private(set) var durationMs:Int32 = Int32(0)

    public private(set) var hasEnergyDelta:Bool = false
    public private(set) var energyDelta:Int32 = Int32(0)

    public private(set) var hasAttackerIndex:Bool = false
    public private(set) var attackerIndex:Int32 = Int32(0)

    public private(set) var hasTargetIndex:Bool = false
    public private(set) var targetIndex:Int32 = Int32(0)

    public private(set) var hasActivePokemonId:Bool = false
    public private(set) var activePokemonId:UInt64 = UInt64(0)

    public private(set) var hasPlayerJoined:Bool = false
    public private(set) var playerJoined:Pogoprotos.Data.Battle.BattleParticipant!
    public private(set) var hasBattleResults:Bool = false
    public private(set) var battleResults:Pogoprotos.Data.Battle.BattleResults!
    public private(set) var hasDamageWindowsStartTimestampMss:Bool = false
    public private(set) var damageWindowsStartTimestampMss:Int64 = Int64(0)

    public private(set) var hasDamageWindowsEndTimestampMss:Bool = false
    public private(set) var damageWindowsEndTimestampMss:Int64 = Int64(0)

    public private(set) var hasPlayerLeft:Bool = false
    public private(set) var playerLeft:Pogoprotos.Data.Battle.BattleParticipant!
    public private(set) var hasTargetPokemonId:Bool = false
    public private(set) var targetPokemonId:UInt64 = UInt64(0)

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasTypes {
        try output.writeEnum(1, value:types.rawValue)
      }
      if hasActionStartMs {
        try output.writeInt64(2, value:actionStartMs)
      }
      if hasDurationMs {
        try output.writeInt32(3, value:durationMs)
      }
      if hasEnergyDelta {
        try output.writeInt32(5, value:energyDelta)
      }
      if hasAttackerIndex {
        try output.writeInt32(6, value:attackerIndex)
      }
      if hasTargetIndex {
        try output.writeInt32(7, value:targetIndex)
      }
      if hasActivePokemonId {
        try output.writeUInt64(8, value:activePokemonId)
      }
      if hasPlayerJoined {
        try output.writeMessage(9, value:playerJoined)
      }
      if hasBattleResults {
        try output.writeMessage(10, value:battleResults)
      }
      if hasDamageWindowsStartTimestampMss {
        try output.writeInt64(11, value:damageWindowsStartTimestampMss)
      }
      if hasDamageWindowsEndTimestampMss {
        try output.writeInt64(12, value:damageWindowsEndTimestampMss)
      }
      if hasPlayerLeft {
        try output.writeMessage(13, value:playerLeft)
      }
      if hasTargetPokemonId {
        try output.writeUInt64(14, value:targetPokemonId)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if (hasTypes) {
        serialize_size += types.rawValue.computeEnumSize(1)
      }
      if hasActionStartMs {
        serialize_size += actionStartMs.computeInt64Size(2)
      }
      if hasDurationMs {
        serialize_size += durationMs.computeInt32Size(3)
      }
      if hasEnergyDelta {
        serialize_size += energyDelta.computeInt32Size(5)
      }
      if hasAttackerIndex {
        serialize_size += attackerIndex.computeInt32Size(6)
      }
      if hasTargetIndex {
        serialize_size += targetIndex.computeInt32Size(7)
      }
      if hasActivePokemonId {
        serialize_size += activePokemonId.computeUInt64Size(8)
      }
      if hasPlayerJoined {
          if let varSizeplayerJoined = playerJoined?.computeMessageSize(9) {
              serialize_size += varSizeplayerJoined
          }
      }
      if hasBattleResults {
          if let varSizebattleResults = battleResults?.computeMessageSize(10) {
              serialize_size += varSizebattleResults
          }
      }
      if hasDamageWindowsStartTimestampMss {
        serialize_size += damageWindowsStartTimestampMss.computeInt64Size(11)
      }
      if hasDamageWindowsEndTimestampMss {
        serialize_size += damageWindowsEndTimestampMss.computeInt64Size(12)
      }
      if hasPlayerLeft {
          if let varSizeplayerLeft = playerLeft?.computeMessageSize(13) {
              serialize_size += varSizeplayerLeft
          }
      }
      if hasTargetPokemonId {
        serialize_size += targetPokemonId.computeUInt64Size(14)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Data.Battle.BattleAction> {
      var mergedArray = Array<Pogoprotos.Data.Battle.BattleAction>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Data.Battle.BattleAction? {
      return try Pogoprotos.Data.Battle.BattleAction.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Data.Battle.BattleAction {
      return try Pogoprotos.Data.Battle.BattleAction.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Data.Battle.BattleActionRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.Battle.BattleAction {
      return try Pogoprotos.Data.Battle.BattleAction.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Data.Battle.BattleAction {
      return try Pogoprotos.Data.Battle.BattleAction.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.Battle.BattleAction {
      return try Pogoprotos.Data.Battle.BattleAction.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Data.Battle.BattleAction {
      return try Pogoprotos.Data.Battle.BattleAction.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.Battle.BattleAction {
      return try Pogoprotos.Data.Battle.BattleAction.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Data.Battle.BattleAction.Builder {
      return Pogoprotos.Data.Battle.BattleAction.classBuilder() as! Pogoprotos.Data.Battle.BattleAction.Builder
    }
    public func getBuilder() -> Pogoprotos.Data.Battle.BattleAction.Builder {
      return classBuilder() as! Pogoprotos.Data.Battle.BattleAction.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Data.Battle.BattleAction.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Data.Battle.BattleAction.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Data.Battle.BattleAction.Builder {
      return try Pogoprotos.Data.Battle.BattleAction.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Data.Battle.BattleAction) throws -> Pogoprotos.Data.Battle.BattleAction.Builder {
      return try Pogoprotos.Data.Battle.BattleAction.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasTypes {
        jsonMap["type"] = types.toString()
      }
      if hasActionStartMs {
        jsonMap["actionStartMs"] = "\(actionStartMs)"
      }
      if hasDurationMs {
        jsonMap["durationMs"] = NSNumber(int:durationMs)
      }
      if hasEnergyDelta {
        jsonMap["energyDelta"] = NSNumber(int:energyDelta)
      }
      if hasAttackerIndex {
        jsonMap["attackerIndex"] = NSNumber(int:attackerIndex)
      }
      if hasTargetIndex {
        jsonMap["targetIndex"] = NSNumber(int:targetIndex)
      }
      if hasActivePokemonId {
        jsonMap["activePokemonId"] = "\(activePokemonId)"
      }
      if hasPlayerJoined {
        jsonMap["playerJoined"] = try playerJoined.encode()
      }
      if hasBattleResults {
        jsonMap["battleResults"] = try battleResults.encode()
      }
      if hasDamageWindowsStartTimestampMss {
        jsonMap["damageWindowsStartTimestampMss"] = "\(damageWindowsStartTimestampMss)"
      }
      if hasDamageWindowsEndTimestampMss {
        jsonMap["damageWindowsEndTimestampMss"] = "\(damageWindowsEndTimestampMss)"
      }
      if hasPlayerLeft {
        jsonMap["playerLeft"] = try playerLeft.encode()
      }
      if hasTargetPokemonId {
        jsonMap["targetPokemonId"] = "\(targetPokemonId)"
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Data.Battle.BattleAction {
      return try Pogoprotos.Data.Battle.BattleAction.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Data.Battle.BattleAction {
      return try Pogoprotos.Data.Battle.BattleAction.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if (hasTypes) {
        output += "\(indent) types: \(types.description)\n"
      }
      if hasActionStartMs {
        output += "\(indent) actionStartMs: \(actionStartMs) \n"
      }
      if hasDurationMs {
        output += "\(indent) durationMs: \(durationMs) \n"
      }
      if hasEnergyDelta {
        output += "\(indent) energyDelta: \(energyDelta) \n"
      }
      if hasAttackerIndex {
        output += "\(indent) attackerIndex: \(attackerIndex) \n"
      }
      if hasTargetIndex {
        output += "\(indent) targetIndex: \(targetIndex) \n"
      }
      if hasActivePokemonId {
        output += "\(indent) activePokemonId: \(activePokemonId) \n"
      }
      if hasPlayerJoined {
        output += "\(indent) playerJoined {\n"
        if let outDescPlayerJoined = playerJoined {
          output += try outDescPlayerJoined.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasBattleResults {
        output += "\(indent) battleResults {\n"
        if let outDescBattleResults = battleResults {
          output += try outDescBattleResults.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasDamageWindowsStartTimestampMss {
        output += "\(indent) damageWindowsStartTimestampMss: \(damageWindowsStartTimestampMss) \n"
      }
      if hasDamageWindowsEndTimestampMss {
        output += "\(indent) damageWindowsEndTimestampMss: \(damageWindowsEndTimestampMss) \n"
      }
      if hasPlayerLeft {
        output += "\(indent) playerLeft {\n"
        if let outDescPlayerLeft = playerLeft {
          output += try outDescPlayerLeft.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasTargetPokemonId {
        output += "\(indent) targetPokemonId: \(targetPokemonId) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasTypes {
               hashCode = (hashCode &* 31) &+ Int(types.rawValue)
            }
            if hasActionStartMs {
               hashCode = (hashCode &* 31) &+ actionStartMs.hashValue
            }
            if hasDurationMs {
               hashCode = (hashCode &* 31) &+ durationMs.hashValue
            }
            if hasEnergyDelta {
               hashCode = (hashCode &* 31) &+ energyDelta.hashValue
            }
            if hasAttackerIndex {
               hashCode = (hashCode &* 31) &+ attackerIndex.hashValue
            }
            if hasTargetIndex {
               hashCode = (hashCode &* 31) &+ targetIndex.hashValue
            }
            if hasActivePokemonId {
               hashCode = (hashCode &* 31) &+ activePokemonId.hashValue
            }
            if hasPlayerJoined {
                if let hashValueplayerJoined = playerJoined?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueplayerJoined
                }
            }
            if hasBattleResults {
                if let hashValuebattleResults = battleResults?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuebattleResults
                }
            }
            if hasDamageWindowsStartTimestampMss {
               hashCode = (hashCode &* 31) &+ damageWindowsStartTimestampMss.hashValue
            }
            if hasDamageWindowsEndTimestampMss {
               hashCode = (hashCode &* 31) &+ damageWindowsEndTimestampMss.hashValue
            }
            if hasPlayerLeft {
                if let hashValueplayerLeft = playerLeft?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueplayerLeft
                }
            }
            if hasTargetPokemonId {
               hashCode = (hashCode &* 31) &+ targetPokemonId.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Data.Battle.BattleAction"
    }
    override public func className() -> String {
        return "Pogoprotos.Data.Battle.BattleAction"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Data.Battle.BattleAction.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Data.Battle.BattleAction = Pogoprotos.Data.Battle.BattleAction()
      public func getMessage() -> Pogoprotos.Data.Battle.BattleAction {
          return builderResult
      }

      required override public init () {
         super.init()
      }
        public var hasTypes:Bool{
            get {
                return builderResult.hasTypes
            }
        }
        public var types:Pogoprotos.Data.Battle.BattleActionType {
            get {
                return builderResult.types
            }
            set (value) {
                builderResult.hasTypes = true
                builderResult.types = value
            }
        }
        public func setTypes(value:Pogoprotos.Data.Battle.BattleActionType) -> Pogoprotos.Data.Battle.BattleAction.Builder {
          self.types = value
          return self
        }
        public func clearTypes() -> Pogoprotos.Data.Battle.BattleAction.Builder {
           builderResult.hasTypes = false
           builderResult.types = .ActionUnset
           return self
        }
      public var hasActionStartMs:Bool {
           get {
                return builderResult.hasActionStartMs
           }
      }
      public var actionStartMs:Int64 {
           get {
                return builderResult.actionStartMs
           }
           set (value) {
               builderResult.hasActionStartMs = true
               builderResult.actionStartMs = value
           }
      }
      public func setActionStartMs(value:Int64) -> Pogoprotos.Data.Battle.BattleAction.Builder {
        self.actionStartMs = value
        return self
      }
      public func clearActionStartMs() -> Pogoprotos.Data.Battle.BattleAction.Builder{
           builderResult.hasActionStartMs = false
           builderResult.actionStartMs = Int64(0)
           return self
      }
      public var hasDurationMs:Bool {
           get {
                return builderResult.hasDurationMs
           }
      }
      public var durationMs:Int32 {
           get {
                return builderResult.durationMs
           }
           set (value) {
               builderResult.hasDurationMs = true
               builderResult.durationMs = value
           }
      }
      public func setDurationMs(value:Int32) -> Pogoprotos.Data.Battle.BattleAction.Builder {
        self.durationMs = value
        return self
      }
      public func clearDurationMs() -> Pogoprotos.Data.Battle.BattleAction.Builder{
           builderResult.hasDurationMs = false
           builderResult.durationMs = Int32(0)
           return self
      }
      public var hasEnergyDelta:Bool {
           get {
                return builderResult.hasEnergyDelta
           }
      }
      public var energyDelta:Int32 {
           get {
                return builderResult.energyDelta
           }
           set (value) {
               builderResult.hasEnergyDelta = true
               builderResult.energyDelta = value
           }
      }
      public func setEnergyDelta(value:Int32) -> Pogoprotos.Data.Battle.BattleAction.Builder {
        self.energyDelta = value
        return self
      }
      public func clearEnergyDelta() -> Pogoprotos.Data.Battle.BattleAction.Builder{
           builderResult.hasEnergyDelta = false
           builderResult.energyDelta = Int32(0)
           return self
      }
      public var hasAttackerIndex:Bool {
           get {
                return builderResult.hasAttackerIndex
           }
      }
      public var attackerIndex:Int32 {
           get {
                return builderResult.attackerIndex
           }
           set (value) {
               builderResult.hasAttackerIndex = true
               builderResult.attackerIndex = value
           }
      }
      public func setAttackerIndex(value:Int32) -> Pogoprotos.Data.Battle.BattleAction.Builder {
        self.attackerIndex = value
        return self
      }
      public func clearAttackerIndex() -> Pogoprotos.Data.Battle.BattleAction.Builder{
           builderResult.hasAttackerIndex = false
           builderResult.attackerIndex = Int32(0)
           return self
      }
      public var hasTargetIndex:Bool {
           get {
                return builderResult.hasTargetIndex
           }
      }
      public var targetIndex:Int32 {
           get {
                return builderResult.targetIndex
           }
           set (value) {
               builderResult.hasTargetIndex = true
               builderResult.targetIndex = value
           }
      }
      public func setTargetIndex(value:Int32) -> Pogoprotos.Data.Battle.BattleAction.Builder {
        self.targetIndex = value
        return self
      }
      public func clearTargetIndex() -> Pogoprotos.Data.Battle.BattleAction.Builder{
           builderResult.hasTargetIndex = false
           builderResult.targetIndex = Int32(0)
           return self
      }
      public var hasActivePokemonId:Bool {
           get {
                return builderResult.hasActivePokemonId
           }
      }
      public var activePokemonId:UInt64 {
           get {
                return builderResult.activePokemonId
           }
           set (value) {
               builderResult.hasActivePokemonId = true
               builderResult.activePokemonId = value
           }
      }
      public func setActivePokemonId(value:UInt64) -> Pogoprotos.Data.Battle.BattleAction.Builder {
        self.activePokemonId = value
        return self
      }
      public func clearActivePokemonId() -> Pogoprotos.Data.Battle.BattleAction.Builder{
           builderResult.hasActivePokemonId = false
           builderResult.activePokemonId = UInt64(0)
           return self
      }
      public var hasPlayerJoined:Bool {
           get {
               return builderResult.hasPlayerJoined
           }
      }
      public var playerJoined:Pogoprotos.Data.Battle.BattleParticipant! {
           get {
               if playerJoinedBuilder_ != nil {
                  builderResult.playerJoined = playerJoinedBuilder_.getMessage()
               }
               return builderResult.playerJoined
           }
           set (value) {
               builderResult.hasPlayerJoined = true
               builderResult.playerJoined = value
           }
      }
      private var playerJoinedBuilder_:Pogoprotos.Data.Battle.BattleParticipant.Builder! {
           didSet {
              builderResult.hasPlayerJoined = true
           }
      }
      public func getPlayerJoinedBuilder() -> Pogoprotos.Data.Battle.BattleParticipant.Builder {
        if playerJoinedBuilder_ == nil {
           playerJoinedBuilder_ = Pogoprotos.Data.Battle.BattleParticipant.Builder()
           builderResult.playerJoined = playerJoinedBuilder_.getMessage()
           if playerJoined != nil {
              try! playerJoinedBuilder_.mergeFrom(playerJoined)
           }
        }
        return playerJoinedBuilder_
      }
      public func setPlayerJoined(value:Pogoprotos.Data.Battle.BattleParticipant!) -> Pogoprotos.Data.Battle.BattleAction.Builder {
        self.playerJoined = value
        return self
      }
      public func mergePlayerJoined(value:Pogoprotos.Data.Battle.BattleParticipant) throws -> Pogoprotos.Data.Battle.BattleAction.Builder {
        if builderResult.hasPlayerJoined {
          builderResult.playerJoined = try Pogoprotos.Data.Battle.BattleParticipant.builderWithPrototype(builderResult.playerJoined).mergeFrom(value).buildPartial()
        } else {
          builderResult.playerJoined = value
        }
        builderResult.hasPlayerJoined = true
        return self
      }
      public func clearPlayerJoined() -> Pogoprotos.Data.Battle.BattleAction.Builder {
        playerJoinedBuilder_ = nil
        builderResult.hasPlayerJoined = false
        builderResult.playerJoined = nil
        return self
      }
      public var hasBattleResults:Bool {
           get {
               return builderResult.hasBattleResults
           }
      }
      public var battleResults:Pogoprotos.Data.Battle.BattleResults! {
           get {
               if battleResultsBuilder_ != nil {
                  builderResult.battleResults = battleResultsBuilder_.getMessage()
               }
               return builderResult.battleResults
           }
           set (value) {
               builderResult.hasBattleResults = true
               builderResult.battleResults = value
           }
      }
      private var battleResultsBuilder_:Pogoprotos.Data.Battle.BattleResults.Builder! {
           didSet {
              builderResult.hasBattleResults = true
           }
      }
      public func getBattleResultsBuilder() -> Pogoprotos.Data.Battle.BattleResults.Builder {
        if battleResultsBuilder_ == nil {
           battleResultsBuilder_ = Pogoprotos.Data.Battle.BattleResults.Builder()
           builderResult.battleResults = battleResultsBuilder_.getMessage()
           if battleResults != nil {
              try! battleResultsBuilder_.mergeFrom(battleResults)
           }
        }
        return battleResultsBuilder_
      }
      public func setBattleResults(value:Pogoprotos.Data.Battle.BattleResults!) -> Pogoprotos.Data.Battle.BattleAction.Builder {
        self.battleResults = value
        return self
      }
      public func mergeBattleResults(value:Pogoprotos.Data.Battle.BattleResults) throws -> Pogoprotos.Data.Battle.BattleAction.Builder {
        if builderResult.hasBattleResults {
          builderResult.battleResults = try Pogoprotos.Data.Battle.BattleResults.builderWithPrototype(builderResult.battleResults).mergeFrom(value).buildPartial()
        } else {
          builderResult.battleResults = value
        }
        builderResult.hasBattleResults = true
        return self
      }
      public func clearBattleResults() -> Pogoprotos.Data.Battle.BattleAction.Builder {
        battleResultsBuilder_ = nil
        builderResult.hasBattleResults = false
        builderResult.battleResults = nil
        return self
      }
      public var hasDamageWindowsStartTimestampMss:Bool {
           get {
                return builderResult.hasDamageWindowsStartTimestampMss
           }
      }
      public var damageWindowsStartTimestampMss:Int64 {
           get {
                return builderResult.damageWindowsStartTimestampMss
           }
           set (value) {
               builderResult.hasDamageWindowsStartTimestampMss = true
               builderResult.damageWindowsStartTimestampMss = value
           }
      }
      public func setDamageWindowsStartTimestampMss(value:Int64) -> Pogoprotos.Data.Battle.BattleAction.Builder {
        self.damageWindowsStartTimestampMss = value
        return self
      }
      public func clearDamageWindowsStartTimestampMss() -> Pogoprotos.Data.Battle.BattleAction.Builder{
           builderResult.hasDamageWindowsStartTimestampMss = false
           builderResult.damageWindowsStartTimestampMss = Int64(0)
           return self
      }
      public var hasDamageWindowsEndTimestampMss:Bool {
           get {
                return builderResult.hasDamageWindowsEndTimestampMss
           }
      }
      public var damageWindowsEndTimestampMss:Int64 {
           get {
                return builderResult.damageWindowsEndTimestampMss
           }
           set (value) {
               builderResult.hasDamageWindowsEndTimestampMss = true
               builderResult.damageWindowsEndTimestampMss = value
           }
      }
      public func setDamageWindowsEndTimestampMss(value:Int64) -> Pogoprotos.Data.Battle.BattleAction.Builder {
        self.damageWindowsEndTimestampMss = value
        return self
      }
      public func clearDamageWindowsEndTimestampMss() -> Pogoprotos.Data.Battle.BattleAction.Builder{
           builderResult.hasDamageWindowsEndTimestampMss = false
           builderResult.damageWindowsEndTimestampMss = Int64(0)
           return self
      }
      public var hasPlayerLeft:Bool {
           get {
               return builderResult.hasPlayerLeft
           }
      }
      public var playerLeft:Pogoprotos.Data.Battle.BattleParticipant! {
           get {
               if playerLeftBuilder_ != nil {
                  builderResult.playerLeft = playerLeftBuilder_.getMessage()
               }
               return builderResult.playerLeft
           }
           set (value) {
               builderResult.hasPlayerLeft = true
               builderResult.playerLeft = value
           }
      }
      private var playerLeftBuilder_:Pogoprotos.Data.Battle.BattleParticipant.Builder! {
           didSet {
              builderResult.hasPlayerLeft = true
           }
      }
      public func getPlayerLeftBuilder() -> Pogoprotos.Data.Battle.BattleParticipant.Builder {
        if playerLeftBuilder_ == nil {
           playerLeftBuilder_ = Pogoprotos.Data.Battle.BattleParticipant.Builder()
           builderResult.playerLeft = playerLeftBuilder_.getMessage()
           if playerLeft != nil {
              try! playerLeftBuilder_.mergeFrom(playerLeft)
           }
        }
        return playerLeftBuilder_
      }
      public func setPlayerLeft(value:Pogoprotos.Data.Battle.BattleParticipant!) -> Pogoprotos.Data.Battle.BattleAction.Builder {
        self.playerLeft = value
        return self
      }
      public func mergePlayerLeft(value:Pogoprotos.Data.Battle.BattleParticipant) throws -> Pogoprotos.Data.Battle.BattleAction.Builder {
        if builderResult.hasPlayerLeft {
          builderResult.playerLeft = try Pogoprotos.Data.Battle.BattleParticipant.builderWithPrototype(builderResult.playerLeft).mergeFrom(value).buildPartial()
        } else {
          builderResult.playerLeft = value
        }
        builderResult.hasPlayerLeft = true
        return self
      }
      public func clearPlayerLeft() -> Pogoprotos.Data.Battle.BattleAction.Builder {
        playerLeftBuilder_ = nil
        builderResult.hasPlayerLeft = false
        builderResult.playerLeft = nil
        return self
      }
      public var hasTargetPokemonId:Bool {
           get {
                return builderResult.hasTargetPokemonId
           }
      }
      public var targetPokemonId:UInt64 {
           get {
                return builderResult.targetPokemonId
           }
           set (value) {
               builderResult.hasTargetPokemonId = true
               builderResult.targetPokemonId = value
           }
      }
      public func setTargetPokemonId(value:UInt64) -> Pogoprotos.Data.Battle.BattleAction.Builder {
        self.targetPokemonId = value
        return self
      }
      public func clearTargetPokemonId() -> Pogoprotos.Data.Battle.BattleAction.Builder{
           builderResult.hasTargetPokemonId = false
           builderResult.targetPokemonId = UInt64(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Data.Battle.BattleAction.Builder {
        builderResult = Pogoprotos.Data.Battle.BattleAction()
        return self
      }
      override public func clone() throws -> Pogoprotos.Data.Battle.BattleAction.Builder {
        return try Pogoprotos.Data.Battle.BattleAction.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Data.Battle.BattleAction {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Data.Battle.BattleAction {
        let returnMe:Pogoprotos.Data.Battle.BattleAction = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Data.Battle.BattleAction) throws -> Pogoprotos.Data.Battle.BattleAction.Builder {
        if other == Pogoprotos.Data.Battle.BattleAction() {
         return self
        }
        if other.hasTypes {
             types = other.types
        }
        if other.hasActionStartMs {
             actionStartMs = other.actionStartMs
        }
        if other.hasDurationMs {
             durationMs = other.durationMs
        }
        if other.hasEnergyDelta {
             energyDelta = other.energyDelta
        }
        if other.hasAttackerIndex {
             attackerIndex = other.attackerIndex
        }
        if other.hasTargetIndex {
             targetIndex = other.targetIndex
        }
        if other.hasActivePokemonId {
             activePokemonId = other.activePokemonId
        }
        if (other.hasPlayerJoined) {
            try mergePlayerJoined(other.playerJoined)
        }
        if (other.hasBattleResults) {
            try mergeBattleResults(other.battleResults)
        }
        if other.hasDamageWindowsStartTimestampMss {
             damageWindowsStartTimestampMss = other.damageWindowsStartTimestampMss
        }
        if other.hasDamageWindowsEndTimestampMss {
             damageWindowsEndTimestampMss = other.damageWindowsEndTimestampMss
        }
        if (other.hasPlayerLeft) {
            try mergePlayerLeft(other.playerLeft)
        }
        if other.hasTargetPokemonId {
             targetPokemonId = other.targetPokemonId
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Data.Battle.BattleAction.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.Battle.BattleAction.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            let valueInttypes = try input.readEnum()
            if let enumstypes = Pogoprotos.Data.Battle.BattleActionType(rawValue:valueInttypes){
                 types = enumstypes
            } else {
                 try unknownFieldsBuilder.mergeVarintField(1, value:Int64(valueInttypes))
            }

          case 16:
            actionStartMs = try input.readInt64()

          case 24:
            durationMs = try input.readInt32()

          case 40:
            energyDelta = try input.readInt32()

          case 48:
            attackerIndex = try input.readInt32()

          case 56:
            targetIndex = try input.readInt32()

          case 64:
            activePokemonId = try input.readUInt64()

          case 74:
            let subBuilder:Pogoprotos.Data.Battle.BattleParticipant.Builder = Pogoprotos.Data.Battle.BattleParticipant.Builder()
            if hasPlayerJoined {
              try subBuilder.mergeFrom(playerJoined)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            playerJoined = subBuilder.buildPartial()

          case 82:
            let subBuilder:Pogoprotos.Data.Battle.BattleResults.Builder = Pogoprotos.Data.Battle.BattleResults.Builder()
            if hasBattleResults {
              try subBuilder.mergeFrom(battleResults)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            battleResults = subBuilder.buildPartial()

          case 88:
            damageWindowsStartTimestampMss = try input.readInt64()

          case 96:
            damageWindowsEndTimestampMss = try input.readInt64()

          case 106:
            let subBuilder:Pogoprotos.Data.Battle.BattleParticipant.Builder = Pogoprotos.Data.Battle.BattleParticipant.Builder()
            if hasPlayerLeft {
              try subBuilder.mergeFrom(playerLeft)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            playerLeft = subBuilder.buildPartial()

          case 112:
            targetPokemonId = try input.readUInt64()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Data.Battle.BattleAction.Builder {
        let resultDecodedBuilder = Pogoprotos.Data.Battle.BattleAction.Builder()
        if let jsonValueTypes = jsonMap["type"] as? String {
          resultDecodedBuilder.types = try Pogoprotos.Data.Battle.BattleActionType.fromString(jsonValueTypes)
        }
        if let jsonValueActionStartMs = jsonMap["actionStartMs"] as? String {
          resultDecodedBuilder.actionStartMs = Int64(jsonValueActionStartMs)!
        }
        if let jsonValueDurationMs = jsonMap["durationMs"] as? NSNumber {
          resultDecodedBuilder.durationMs = jsonValueDurationMs.intValue
        }
        if let jsonValueEnergyDelta = jsonMap["energyDelta"] as? NSNumber {
          resultDecodedBuilder.energyDelta = jsonValueEnergyDelta.intValue
        }
        if let jsonValueAttackerIndex = jsonMap["attackerIndex"] as? NSNumber {
          resultDecodedBuilder.attackerIndex = jsonValueAttackerIndex.intValue
        }
        if let jsonValueTargetIndex = jsonMap["targetIndex"] as? NSNumber {
          resultDecodedBuilder.targetIndex = jsonValueTargetIndex.intValue
        }
        if let jsonValueActivePokemonId = jsonMap["activePokemonId"] as? String {
          resultDecodedBuilder.activePokemonId = UInt64(jsonValueActivePokemonId)!
        }
        if let jsonValuePlayerJoined = jsonMap["playerJoined"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.playerJoined = try Pogoprotos.Data.Battle.BattleParticipant.Builder.decodeToBuilder(jsonValuePlayerJoined).build()

        }
        if let jsonValueBattleResults = jsonMap["battleResults"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.battleResults = try Pogoprotos.Data.Battle.BattleResults.Builder.decodeToBuilder(jsonValueBattleResults).build()

        }
        if let jsonValueDamageWindowsStartTimestampMss = jsonMap["damageWindowsStartTimestampMss"] as? String {
          resultDecodedBuilder.damageWindowsStartTimestampMss = Int64(jsonValueDamageWindowsStartTimestampMss)!
        }
        if let jsonValueDamageWindowsEndTimestampMss = jsonMap["damageWindowsEndTimestampMss"] as? String {
          resultDecodedBuilder.damageWindowsEndTimestampMss = Int64(jsonValueDamageWindowsEndTimestampMss)!
        }
        if let jsonValuePlayerLeft = jsonMap["playerLeft"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.playerLeft = try Pogoprotos.Data.Battle.BattleParticipant.Builder.decodeToBuilder(jsonValuePlayerLeft).build()

        }
        if let jsonValueTargetPokemonId = jsonMap["targetPokemonId"] as? String {
          resultDecodedBuilder.targetPokemonId = UInt64(jsonValueTargetPokemonId)!
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Data.Battle.BattleAction.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Data.Battle.BattleAction.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
