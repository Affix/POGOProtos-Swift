// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "AttackGymResponse.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Pogoprotos { public struct Networking { public struct Responses { }}}

public func == (lhs: Pogoprotos.Networking.Responses.AttackGymResponse, rhs: Pogoprotos.Networking.Responses.AttackGymResponse) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasResult == rhs.hasResult) && (!lhs.hasResult || lhs.result == rhs.result)
  fieldCheck = fieldCheck && (lhs.hasBattleLog == rhs.hasBattleLog) && (!lhs.hasBattleLog || lhs.battleLog == rhs.battleLog)
  fieldCheck = fieldCheck && (lhs.hasBattleId == rhs.hasBattleId) && (!lhs.hasBattleId || lhs.battleId == rhs.battleId)
  fieldCheck = fieldCheck && (lhs.hasActiveDefender == rhs.hasActiveDefender) && (!lhs.hasActiveDefender || lhs.activeDefender == rhs.activeDefender)
  fieldCheck = fieldCheck && (lhs.hasActiveAttacker == rhs.hasActiveAttacker) && (!lhs.hasActiveAttacker || lhs.activeAttacker == rhs.activeAttacker)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Pogoprotos.Networking.Responses {
  public struct AttackGymResponseRoot {
    public static var sharedInstance : AttackGymResponseRoot {
     struct Static {
         static let instance : AttackGymResponseRoot = AttackGymResponseRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Pogoprotos.Data.Battle.BattleLogRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Data.Battle.BattlePokemonInfoRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class AttackGymResponse : GeneratedMessage, GeneratedMessageProtocol {


      //Enum type declaration start 

      public enum Result:Int32, CustomDebugStringConvertible, CustomStringConvertible {
        case Unset = 0
        case Success = 1
        case ErrorInvalidAttackActions = 2
        case ErrorNotInRange = 3
        public func toString() -> String {
          switch self {
          case .Unset: return "UNSET"
          case .Success: return "SUCCESS"
          case .ErrorInvalidAttackActions: return "ERROR_INVALID_ATTACK_ACTIONS"
          case .ErrorNotInRange: return "ERROR_NOT_IN_RANGE"
          }
        }
        public static func fromString(str:String) throws -> Pogoprotos.Networking.Responses.AttackGymResponse.Result {
          switch str {
          case "UNSET":  return .Unset
          case "SUCCESS":  return .Success
          case "ERROR_INVALID_ATTACK_ACTIONS":  return .ErrorInvalidAttackActions
          case "ERROR_NOT_IN_RANGE":  return .ErrorNotInRange
          default: throw ProtocolBuffersError.InvalidProtocolBuffer("Conversion String to Enum has failed.")
          }
        }
        public var debugDescription:String { return getDescription() }
        public var description:String { return getDescription() }
        private func getDescription() -> String { 
            switch self {
                case .Unset: return ".Unset"
                case .Success: return ".Success"
                case .ErrorInvalidAttackActions: return ".ErrorInvalidAttackActions"
                case .ErrorNotInRange: return ".ErrorNotInRange"
            }
        }
      }

      //Enum type declaration end 

    public private(set) var result:Pogoprotos.Networking.Responses.AttackGymResponse.Result = Pogoprotos.Networking.Responses.AttackGymResponse.Result.Unset
    public private(set) var hasResult:Bool = false
    public private(set) var hasBattleLog:Bool = false
    public private(set) var battleLog:Pogoprotos.Data.Battle.BattleLog!
    public private(set) var hasBattleId:Bool = false
    public private(set) var battleId:String = ""

    public private(set) var hasActiveDefender:Bool = false
    public private(set) var activeDefender:Pogoprotos.Data.Battle.BattlePokemonInfo!
    public private(set) var hasActiveAttacker:Bool = false
    public private(set) var activeAttacker:Pogoprotos.Data.Battle.BattlePokemonInfo!
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasResult {
        try output.writeEnum(1, value:result.rawValue)
      }
      if hasBattleLog {
        try output.writeMessage(2, value:battleLog)
      }
      if hasBattleId {
        try output.writeString(3, value:battleId)
      }
      if hasActiveDefender {
        try output.writeMessage(4, value:activeDefender)
      }
      if hasActiveAttacker {
        try output.writeMessage(5, value:activeAttacker)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if (hasResult) {
        serialize_size += result.rawValue.computeEnumSize(1)
      }
      if hasBattleLog {
          if let varSizebattleLog = battleLog?.computeMessageSize(2) {
              serialize_size += varSizebattleLog
          }
      }
      if hasBattleId {
        serialize_size += battleId.computeStringSize(3)
      }
      if hasActiveDefender {
          if let varSizeactiveDefender = activeDefender?.computeMessageSize(4) {
              serialize_size += varSizeactiveDefender
          }
      }
      if hasActiveAttacker {
          if let varSizeactiveAttacker = activeAttacker?.computeMessageSize(5) {
              serialize_size += varSizeactiveAttacker
          }
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Networking.Responses.AttackGymResponse> {
      var mergedArray = Array<Pogoprotos.Networking.Responses.AttackGymResponse>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Responses.AttackGymResponse? {
      return try Pogoprotos.Networking.Responses.AttackGymResponse.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Networking.Responses.AttackGymResponse {
      return try Pogoprotos.Networking.Responses.AttackGymResponse.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Networking.Responses.AttackGymResponseRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Responses.AttackGymResponse {
      return try Pogoprotos.Networking.Responses.AttackGymResponse.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Responses.AttackGymResponse {
      return try Pogoprotos.Networking.Responses.AttackGymResponse.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Responses.AttackGymResponse {
      return try Pogoprotos.Networking.Responses.AttackGymResponse.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Responses.AttackGymResponse {
      return try Pogoprotos.Networking.Responses.AttackGymResponse.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Responses.AttackGymResponse {
      return try Pogoprotos.Networking.Responses.AttackGymResponse.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Networking.Responses.AttackGymResponse.Builder {
      return Pogoprotos.Networking.Responses.AttackGymResponse.classBuilder() as! Pogoprotos.Networking.Responses.AttackGymResponse.Builder
    }
    public func getBuilder() -> Pogoprotos.Networking.Responses.AttackGymResponse.Builder {
      return classBuilder() as! Pogoprotos.Networking.Responses.AttackGymResponse.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Networking.Responses.AttackGymResponse.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Networking.Responses.AttackGymResponse.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Networking.Responses.AttackGymResponse.Builder {
      return try Pogoprotos.Networking.Responses.AttackGymResponse.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Networking.Responses.AttackGymResponse) throws -> Pogoprotos.Networking.Responses.AttackGymResponse.Builder {
      return try Pogoprotos.Networking.Responses.AttackGymResponse.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasResult {
        jsonMap["result"] = result.toString()
      }
      if hasBattleLog {
        jsonMap["battleLog"] = try battleLog.encode()
      }
      if hasBattleId {
        jsonMap["battleId"] = battleId
      }
      if hasActiveDefender {
        jsonMap["activeDefender"] = try activeDefender.encode()
      }
      if hasActiveAttacker {
        jsonMap["activeAttacker"] = try activeAttacker.encode()
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Responses.AttackGymResponse {
      return try Pogoprotos.Networking.Responses.AttackGymResponse.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Networking.Responses.AttackGymResponse {
      return try Pogoprotos.Networking.Responses.AttackGymResponse.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if (hasResult) {
        output += "\(indent) result: \(result.description)\n"
      }
      if hasBattleLog {
        output += "\(indent) battleLog {\n"
        if let outDescBattleLog = battleLog {
          output += try outDescBattleLog.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasBattleId {
        output += "\(indent) battleId: \(battleId) \n"
      }
      if hasActiveDefender {
        output += "\(indent) activeDefender {\n"
        if let outDescActiveDefender = activeDefender {
          output += try outDescActiveDefender.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasActiveAttacker {
        output += "\(indent) activeAttacker {\n"
        if let outDescActiveAttacker = activeAttacker {
          output += try outDescActiveAttacker.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasResult {
               hashCode = (hashCode &* 31) &+ Int(result.rawValue)
            }
            if hasBattleLog {
                if let hashValuebattleLog = battleLog?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuebattleLog
                }
            }
            if hasBattleId {
               hashCode = (hashCode &* 31) &+ battleId.hashValue
            }
            if hasActiveDefender {
                if let hashValueactiveDefender = activeDefender?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueactiveDefender
                }
            }
            if hasActiveAttacker {
                if let hashValueactiveAttacker = activeAttacker?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueactiveAttacker
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Networking.Responses.AttackGymResponse"
    }
    override public func className() -> String {
        return "Pogoprotos.Networking.Responses.AttackGymResponse"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Networking.Responses.AttackGymResponse.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Networking.Responses.AttackGymResponse = Pogoprotos.Networking.Responses.AttackGymResponse()
      public func getMessage() -> Pogoprotos.Networking.Responses.AttackGymResponse {
          return builderResult
      }

      required override public init () {
         super.init()
      }
        public var hasResult:Bool{
            get {
                return builderResult.hasResult
            }
        }
        public var result:Pogoprotos.Networking.Responses.AttackGymResponse.Result {
            get {
                return builderResult.result
            }
            set (value) {
                builderResult.hasResult = true
                builderResult.result = value
            }
        }
        public func setResult(value:Pogoprotos.Networking.Responses.AttackGymResponse.Result) -> Pogoprotos.Networking.Responses.AttackGymResponse.Builder {
          self.result = value
          return self
        }
        public func clearResult() -> Pogoprotos.Networking.Responses.AttackGymResponse.Builder {
           builderResult.hasResult = false
           builderResult.result = .Unset
           return self
        }
      public var hasBattleLog:Bool {
           get {
               return builderResult.hasBattleLog
           }
      }
      public var battleLog:Pogoprotos.Data.Battle.BattleLog! {
           get {
               if battleLogBuilder_ != nil {
                  builderResult.battleLog = battleLogBuilder_.getMessage()
               }
               return builderResult.battleLog
           }
           set (value) {
               builderResult.hasBattleLog = true
               builderResult.battleLog = value
           }
      }
      private var battleLogBuilder_:Pogoprotos.Data.Battle.BattleLog.Builder! {
           didSet {
              builderResult.hasBattleLog = true
           }
      }
      public func getBattleLogBuilder() -> Pogoprotos.Data.Battle.BattleLog.Builder {
        if battleLogBuilder_ == nil {
           battleLogBuilder_ = Pogoprotos.Data.Battle.BattleLog.Builder()
           builderResult.battleLog = battleLogBuilder_.getMessage()
           if battleLog != nil {
              try! battleLogBuilder_.mergeFrom(battleLog)
           }
        }
        return battleLogBuilder_
      }
      public func setBattleLog(value:Pogoprotos.Data.Battle.BattleLog!) -> Pogoprotos.Networking.Responses.AttackGymResponse.Builder {
        self.battleLog = value
        return self
      }
      public func mergeBattleLog(value:Pogoprotos.Data.Battle.BattleLog) throws -> Pogoprotos.Networking.Responses.AttackGymResponse.Builder {
        if builderResult.hasBattleLog {
          builderResult.battleLog = try Pogoprotos.Data.Battle.BattleLog.builderWithPrototype(builderResult.battleLog).mergeFrom(value).buildPartial()
        } else {
          builderResult.battleLog = value
        }
        builderResult.hasBattleLog = true
        return self
      }
      public func clearBattleLog() -> Pogoprotos.Networking.Responses.AttackGymResponse.Builder {
        battleLogBuilder_ = nil
        builderResult.hasBattleLog = false
        builderResult.battleLog = nil
        return self
      }
      public var hasBattleId:Bool {
           get {
                return builderResult.hasBattleId
           }
      }
      public var battleId:String {
           get {
                return builderResult.battleId
           }
           set (value) {
               builderResult.hasBattleId = true
               builderResult.battleId = value
           }
      }
      public func setBattleId(value:String) -> Pogoprotos.Networking.Responses.AttackGymResponse.Builder {
        self.battleId = value
        return self
      }
      public func clearBattleId() -> Pogoprotos.Networking.Responses.AttackGymResponse.Builder{
           builderResult.hasBattleId = false
           builderResult.battleId = ""
           return self
      }
      public var hasActiveDefender:Bool {
           get {
               return builderResult.hasActiveDefender
           }
      }
      public var activeDefender:Pogoprotos.Data.Battle.BattlePokemonInfo! {
           get {
               if activeDefenderBuilder_ != nil {
                  builderResult.activeDefender = activeDefenderBuilder_.getMessage()
               }
               return builderResult.activeDefender
           }
           set (value) {
               builderResult.hasActiveDefender = true
               builderResult.activeDefender = value
           }
      }
      private var activeDefenderBuilder_:Pogoprotos.Data.Battle.BattlePokemonInfo.Builder! {
           didSet {
              builderResult.hasActiveDefender = true
           }
      }
      public func getActiveDefenderBuilder() -> Pogoprotos.Data.Battle.BattlePokemonInfo.Builder {
        if activeDefenderBuilder_ == nil {
           activeDefenderBuilder_ = Pogoprotos.Data.Battle.BattlePokemonInfo.Builder()
           builderResult.activeDefender = activeDefenderBuilder_.getMessage()
           if activeDefender != nil {
              try! activeDefenderBuilder_.mergeFrom(activeDefender)
           }
        }
        return activeDefenderBuilder_
      }
      public func setActiveDefender(value:Pogoprotos.Data.Battle.BattlePokemonInfo!) -> Pogoprotos.Networking.Responses.AttackGymResponse.Builder {
        self.activeDefender = value
        return self
      }
      public func mergeActiveDefender(value:Pogoprotos.Data.Battle.BattlePokemonInfo) throws -> Pogoprotos.Networking.Responses.AttackGymResponse.Builder {
        if builderResult.hasActiveDefender {
          builderResult.activeDefender = try Pogoprotos.Data.Battle.BattlePokemonInfo.builderWithPrototype(builderResult.activeDefender).mergeFrom(value).buildPartial()
        } else {
          builderResult.activeDefender = value
        }
        builderResult.hasActiveDefender = true
        return self
      }
      public func clearActiveDefender() -> Pogoprotos.Networking.Responses.AttackGymResponse.Builder {
        activeDefenderBuilder_ = nil
        builderResult.hasActiveDefender = false
        builderResult.activeDefender = nil
        return self
      }
      public var hasActiveAttacker:Bool {
           get {
               return builderResult.hasActiveAttacker
           }
      }
      public var activeAttacker:Pogoprotos.Data.Battle.BattlePokemonInfo! {
           get {
               if activeAttackerBuilder_ != nil {
                  builderResult.activeAttacker = activeAttackerBuilder_.getMessage()
               }
               return builderResult.activeAttacker
           }
           set (value) {
               builderResult.hasActiveAttacker = true
               builderResult.activeAttacker = value
           }
      }
      private var activeAttackerBuilder_:Pogoprotos.Data.Battle.BattlePokemonInfo.Builder! {
           didSet {
              builderResult.hasActiveAttacker = true
           }
      }
      public func getActiveAttackerBuilder() -> Pogoprotos.Data.Battle.BattlePokemonInfo.Builder {
        if activeAttackerBuilder_ == nil {
           activeAttackerBuilder_ = Pogoprotos.Data.Battle.BattlePokemonInfo.Builder()
           builderResult.activeAttacker = activeAttackerBuilder_.getMessage()
           if activeAttacker != nil {
              try! activeAttackerBuilder_.mergeFrom(activeAttacker)
           }
        }
        return activeAttackerBuilder_
      }
      public func setActiveAttacker(value:Pogoprotos.Data.Battle.BattlePokemonInfo!) -> Pogoprotos.Networking.Responses.AttackGymResponse.Builder {
        self.activeAttacker = value
        return self
      }
      public func mergeActiveAttacker(value:Pogoprotos.Data.Battle.BattlePokemonInfo) throws -> Pogoprotos.Networking.Responses.AttackGymResponse.Builder {
        if builderResult.hasActiveAttacker {
          builderResult.activeAttacker = try Pogoprotos.Data.Battle.BattlePokemonInfo.builderWithPrototype(builderResult.activeAttacker).mergeFrom(value).buildPartial()
        } else {
          builderResult.activeAttacker = value
        }
        builderResult.hasActiveAttacker = true
        return self
      }
      public func clearActiveAttacker() -> Pogoprotos.Networking.Responses.AttackGymResponse.Builder {
        activeAttackerBuilder_ = nil
        builderResult.hasActiveAttacker = false
        builderResult.activeAttacker = nil
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Networking.Responses.AttackGymResponse.Builder {
        builderResult = Pogoprotos.Networking.Responses.AttackGymResponse()
        return self
      }
      override public func clone() throws -> Pogoprotos.Networking.Responses.AttackGymResponse.Builder {
        return try Pogoprotos.Networking.Responses.AttackGymResponse.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Networking.Responses.AttackGymResponse {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Networking.Responses.AttackGymResponse {
        let returnMe:Pogoprotos.Networking.Responses.AttackGymResponse = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Networking.Responses.AttackGymResponse) throws -> Pogoprotos.Networking.Responses.AttackGymResponse.Builder {
        if other == Pogoprotos.Networking.Responses.AttackGymResponse() {
         return self
        }
        if other.hasResult {
             result = other.result
        }
        if (other.hasBattleLog) {
            try mergeBattleLog(other.battleLog)
        }
        if other.hasBattleId {
             battleId = other.battleId
        }
        if (other.hasActiveDefender) {
            try mergeActiveDefender(other.activeDefender)
        }
        if (other.hasActiveAttacker) {
            try mergeActiveAttacker(other.activeAttacker)
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Responses.AttackGymResponse.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Responses.AttackGymResponse.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            let valueIntresult = try input.readEnum()
            if let enumsresult = Pogoprotos.Networking.Responses.AttackGymResponse.Result(rawValue:valueIntresult){
                 result = enumsresult
            } else {
                 try unknownFieldsBuilder.mergeVarintField(1, value:Int64(valueIntresult))
            }

          case 18:
            let subBuilder:Pogoprotos.Data.Battle.BattleLog.Builder = Pogoprotos.Data.Battle.BattleLog.Builder()
            if hasBattleLog {
              try subBuilder.mergeFrom(battleLog)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            battleLog = subBuilder.buildPartial()

          case 26:
            battleId = try input.readString()

          case 34:
            let subBuilder:Pogoprotos.Data.Battle.BattlePokemonInfo.Builder = Pogoprotos.Data.Battle.BattlePokemonInfo.Builder()
            if hasActiveDefender {
              try subBuilder.mergeFrom(activeDefender)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            activeDefender = subBuilder.buildPartial()

          case 42:
            let subBuilder:Pogoprotos.Data.Battle.BattlePokemonInfo.Builder = Pogoprotos.Data.Battle.BattlePokemonInfo.Builder()
            if hasActiveAttacker {
              try subBuilder.mergeFrom(activeAttacker)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            activeAttacker = subBuilder.buildPartial()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Responses.AttackGymResponse.Builder {
        let resultDecodedBuilder = Pogoprotos.Networking.Responses.AttackGymResponse.Builder()
        if let jsonValueResult = jsonMap["result"] as? String {
          resultDecodedBuilder.result = try Pogoprotos.Networking.Responses.AttackGymResponse.Result.fromString(jsonValueResult)
        }
        if let jsonValueBattleLog = jsonMap["battleLog"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.battleLog = try Pogoprotos.Data.Battle.BattleLog.Builder.decodeToBuilder(jsonValueBattleLog).build()

        }
        if let jsonValueBattleId = jsonMap["battleId"] as? String {
          resultDecodedBuilder.battleId = jsonValueBattleId
        }
        if let jsonValueActiveDefender = jsonMap["activeDefender"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.activeDefender = try Pogoprotos.Data.Battle.BattlePokemonInfo.Builder.decodeToBuilder(jsonValueActiveDefender).build()

        }
        if let jsonValueActiveAttacker = jsonMap["activeAttacker"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.activeAttacker = try Pogoprotos.Data.Battle.BattlePokemonInfo.Builder.decodeToBuilder(jsonValueActiveAttacker).build()

        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Networking.Responses.AttackGymResponse.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Networking.Responses.AttackGymResponse.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
