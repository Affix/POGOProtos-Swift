// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "PlayerLevelSettings.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Pogoprotos { public struct Settings { public struct Master { }}}

public func == (lhs: Pogoprotos.Settings.Master.PlayerLevelSettings, rhs: Pogoprotos.Settings.Master.PlayerLevelSettings) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.rankNum == rhs.rankNum)
  fieldCheck = fieldCheck && (lhs.requiredExperience == rhs.requiredExperience)
  fieldCheck = fieldCheck && (lhs.cpMultiplier == rhs.cpMultiplier)
  fieldCheck = fieldCheck && (lhs.hasMaxEggPlayerLevel == rhs.hasMaxEggPlayerLevel) && (!lhs.hasMaxEggPlayerLevel || lhs.maxEggPlayerLevel == rhs.maxEggPlayerLevel)
  fieldCheck = fieldCheck && (lhs.hasMaxEncounterPlayerLevel == rhs.hasMaxEncounterPlayerLevel) && (!lhs.hasMaxEncounterPlayerLevel || lhs.maxEncounterPlayerLevel == rhs.maxEncounterPlayerLevel)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Pogoprotos.Settings.Master {
  public struct PlayerLevelSettingsRoot {
    public static var sharedInstance : PlayerLevelSettingsRoot {
     struct Static {
         static let instance : PlayerLevelSettingsRoot = PlayerLevelSettingsRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class PlayerLevelSettings : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var rankNum:Array<Int32> = Array<Int32>()
    private var rankNumMemoizedSerializedSize:Int32 = -1
    public private(set) var requiredExperience:Array<Int32> = Array<Int32>()
    private var requiredExperienceMemoizedSerializedSize:Int32 = -1
    public private(set) var cpMultiplier:Array<Float> = Array<Float>()
    private var cpMultiplierMemoizedSerializedSize:Int32 = -1
    public private(set) var hasMaxEggPlayerLevel:Bool = false
    public private(set) var maxEggPlayerLevel:Int32 = Int32(0)

    public private(set) var hasMaxEncounterPlayerLevel:Bool = false
    public private(set) var maxEncounterPlayerLevel:Int32 = Int32(0)

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if !rankNum.isEmpty {
        try output.writeRawVarint32(10)
        try output.writeRawVarint32(rankNumMemoizedSerializedSize)
        for oneValuerankNum in rankNum {
          try output.writeInt32NoTag(oneValuerankNum)
        }
      }
      if !requiredExperience.isEmpty {
        try output.writeRawVarint32(18)
        try output.writeRawVarint32(requiredExperienceMemoizedSerializedSize)
        for oneValuerequiredExperience in requiredExperience {
          try output.writeInt32NoTag(oneValuerequiredExperience)
        }
      }
      if !cpMultiplier.isEmpty {
        try output.writeRawVarint32(26)
        try output.writeRawVarint32(cpMultiplierMemoizedSerializedSize)
        for oneValuecpMultiplier in cpMultiplier {
          try output.writeFloatNoTag(oneValuecpMultiplier)
        }
      }
      if hasMaxEggPlayerLevel {
        try output.writeInt32(4, value:maxEggPlayerLevel)
      }
      if hasMaxEncounterPlayerLevel {
        try output.writeInt32(5, value:maxEncounterPlayerLevel)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      var dataSizeRankNum:Int32 = 0
      for oneValuerankNum in rankNum {
          dataSizeRankNum += oneValuerankNum.computeInt32SizeNoTag()
      }
      serialize_size += dataSizeRankNum
      if !rankNum.isEmpty {
        serialize_size += 1
        serialize_size += dataSizeRankNum.computeInt32SizeNoTag()
      }
      rankNumMemoizedSerializedSize = dataSizeRankNum
      var dataSizeRequiredExperience:Int32 = 0
      for oneValuerequiredExperience in requiredExperience {
          dataSizeRequiredExperience += oneValuerequiredExperience.computeInt32SizeNoTag()
      }
      serialize_size += dataSizeRequiredExperience
      if !requiredExperience.isEmpty {
        serialize_size += 1
        serialize_size += dataSizeRequiredExperience.computeInt32SizeNoTag()
      }
      requiredExperienceMemoizedSerializedSize = dataSizeRequiredExperience
      var dataSizeCpMultiplier:Int32 = 0
      dataSizeCpMultiplier = 4 * Int32(cpMultiplier.count)
      serialize_size += dataSizeCpMultiplier
      if !cpMultiplier.isEmpty {
        serialize_size += 1
        serialize_size += dataSizeCpMultiplier.computeInt32SizeNoTag()
      }
      cpMultiplierMemoizedSerializedSize = dataSizeCpMultiplier
      if hasMaxEggPlayerLevel {
        serialize_size += maxEggPlayerLevel.computeInt32Size(4)
      }
      if hasMaxEncounterPlayerLevel {
        serialize_size += maxEncounterPlayerLevel.computeInt32Size(5)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Settings.Master.PlayerLevelSettings> {
      var mergedArray = Array<Pogoprotos.Settings.Master.PlayerLevelSettings>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.Master.PlayerLevelSettings? {
      return try Pogoprotos.Settings.Master.PlayerLevelSettings.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Settings.Master.PlayerLevelSettings {
      return try Pogoprotos.Settings.Master.PlayerLevelSettings.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Settings.Master.PlayerLevelSettingsRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.PlayerLevelSettings {
      return try Pogoprotos.Settings.Master.PlayerLevelSettings.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.Master.PlayerLevelSettings {
      return try Pogoprotos.Settings.Master.PlayerLevelSettings.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.PlayerLevelSettings {
      return try Pogoprotos.Settings.Master.PlayerLevelSettings.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.Master.PlayerLevelSettings {
      return try Pogoprotos.Settings.Master.PlayerLevelSettings.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.PlayerLevelSettings {
      return try Pogoprotos.Settings.Master.PlayerLevelSettings.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Settings.Master.PlayerLevelSettings.Builder {
      return Pogoprotos.Settings.Master.PlayerLevelSettings.classBuilder() as! Pogoprotos.Settings.Master.PlayerLevelSettings.Builder
    }
    public func getBuilder() -> Pogoprotos.Settings.Master.PlayerLevelSettings.Builder {
      return classBuilder() as! Pogoprotos.Settings.Master.PlayerLevelSettings.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.Master.PlayerLevelSettings.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.Master.PlayerLevelSettings.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Settings.Master.PlayerLevelSettings.Builder {
      return try Pogoprotos.Settings.Master.PlayerLevelSettings.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Settings.Master.PlayerLevelSettings) throws -> Pogoprotos.Settings.Master.PlayerLevelSettings.Builder {
      return try Pogoprotos.Settings.Master.PlayerLevelSettings.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if !rankNum.isEmpty {
        var jsonArrayRankNum:Array<NSNumber> = []
          for oneValueRankNum in rankNum {
            jsonArrayRankNum += [NSNumber(int:oneValueRankNum)]
          }
        jsonMap["rankNum"] = jsonArrayRankNum
      }
      if !requiredExperience.isEmpty {
        var jsonArrayRequiredExperience:Array<NSNumber> = []
          for oneValueRequiredExperience in requiredExperience {
            jsonArrayRequiredExperience += [NSNumber(int:oneValueRequiredExperience)]
          }
        jsonMap["requiredExperience"] = jsonArrayRequiredExperience
      }
      if !cpMultiplier.isEmpty {
        var jsonArrayCpMultiplier:Array<NSNumber> = []
          for oneValueCpMultiplier in cpMultiplier {
            jsonArrayCpMultiplier += [NSNumber(float:oneValueCpMultiplier)]
          }
        jsonMap["cpMultiplier"] = jsonArrayCpMultiplier
      }
      if hasMaxEggPlayerLevel {
        jsonMap["maxEggPlayerLevel"] = NSNumber(int:maxEggPlayerLevel)
      }
      if hasMaxEncounterPlayerLevel {
        jsonMap["maxEncounterPlayerLevel"] = NSNumber(int:maxEncounterPlayerLevel)
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.Master.PlayerLevelSettings {
      return try Pogoprotos.Settings.Master.PlayerLevelSettings.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Settings.Master.PlayerLevelSettings {
      return try Pogoprotos.Settings.Master.PlayerLevelSettings.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      var rankNumElementIndex:Int = 0
      for oneValueRankNum in rankNum  {
          output += "\(indent) rankNum[\(rankNumElementIndex)]: \(oneValueRankNum)\n"
          rankNumElementIndex += 1
      }
      var requiredExperienceElementIndex:Int = 0
      for oneValueRequiredExperience in requiredExperience  {
          output += "\(indent) requiredExperience[\(requiredExperienceElementIndex)]: \(oneValueRequiredExperience)\n"
          requiredExperienceElementIndex += 1
      }
      var cpMultiplierElementIndex:Int = 0
      for oneValueCpMultiplier in cpMultiplier  {
          output += "\(indent) cpMultiplier[\(cpMultiplierElementIndex)]: \(oneValueCpMultiplier)\n"
          cpMultiplierElementIndex += 1
      }
      if hasMaxEggPlayerLevel {
        output += "\(indent) maxEggPlayerLevel: \(maxEggPlayerLevel) \n"
      }
      if hasMaxEncounterPlayerLevel {
        output += "\(indent) maxEncounterPlayerLevel: \(maxEncounterPlayerLevel) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            for oneValueRankNum in rankNum {
                hashCode = (hashCode &* 31) &+ oneValueRankNum.hashValue
            }
            for oneValueRequiredExperience in requiredExperience {
                hashCode = (hashCode &* 31) &+ oneValueRequiredExperience.hashValue
            }
            for oneValueCpMultiplier in cpMultiplier {
                hashCode = (hashCode &* 31) &+ oneValueCpMultiplier.hashValue
            }
            if hasMaxEggPlayerLevel {
               hashCode = (hashCode &* 31) &+ maxEggPlayerLevel.hashValue
            }
            if hasMaxEncounterPlayerLevel {
               hashCode = (hashCode &* 31) &+ maxEncounterPlayerLevel.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Settings.Master.PlayerLevelSettings"
    }
    override public func className() -> String {
        return "Pogoprotos.Settings.Master.PlayerLevelSettings"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Settings.Master.PlayerLevelSettings.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Settings.Master.PlayerLevelSettings = Pogoprotos.Settings.Master.PlayerLevelSettings()
      public func getMessage() -> Pogoprotos.Settings.Master.PlayerLevelSettings {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var rankNum:Array<Int32> {
           get {
               return builderResult.rankNum
           }
           set (array) {
               builderResult.rankNum = array
           }
      }
      public func setRankNum(value:Array<Int32>) -> Pogoprotos.Settings.Master.PlayerLevelSettings.Builder {
        self.rankNum = value
        return self
      }
      public func clearRankNum() -> Pogoprotos.Settings.Master.PlayerLevelSettings.Builder {
         builderResult.rankNum.removeAll(keepCapacity: false)
         return self
      }
      public var requiredExperience:Array<Int32> {
           get {
               return builderResult.requiredExperience
           }
           set (array) {
               builderResult.requiredExperience = array
           }
      }
      public func setRequiredExperience(value:Array<Int32>) -> Pogoprotos.Settings.Master.PlayerLevelSettings.Builder {
        self.requiredExperience = value
        return self
      }
      public func clearRequiredExperience() -> Pogoprotos.Settings.Master.PlayerLevelSettings.Builder {
         builderResult.requiredExperience.removeAll(keepCapacity: false)
         return self
      }
      public var cpMultiplier:Array<Float> {
           get {
               return builderResult.cpMultiplier
           }
           set (array) {
               builderResult.cpMultiplier = array
           }
      }
      public func setCpMultiplier(value:Array<Float>) -> Pogoprotos.Settings.Master.PlayerLevelSettings.Builder {
        self.cpMultiplier = value
        return self
      }
      public func clearCpMultiplier() -> Pogoprotos.Settings.Master.PlayerLevelSettings.Builder {
         builderResult.cpMultiplier.removeAll(keepCapacity: false)
         return self
      }
      public var hasMaxEggPlayerLevel:Bool {
           get {
                return builderResult.hasMaxEggPlayerLevel
           }
      }
      public var maxEggPlayerLevel:Int32 {
           get {
                return builderResult.maxEggPlayerLevel
           }
           set (value) {
               builderResult.hasMaxEggPlayerLevel = true
               builderResult.maxEggPlayerLevel = value
           }
      }
      public func setMaxEggPlayerLevel(value:Int32) -> Pogoprotos.Settings.Master.PlayerLevelSettings.Builder {
        self.maxEggPlayerLevel = value
        return self
      }
      public func clearMaxEggPlayerLevel() -> Pogoprotos.Settings.Master.PlayerLevelSettings.Builder{
           builderResult.hasMaxEggPlayerLevel = false
           builderResult.maxEggPlayerLevel = Int32(0)
           return self
      }
      public var hasMaxEncounterPlayerLevel:Bool {
           get {
                return builderResult.hasMaxEncounterPlayerLevel
           }
      }
      public var maxEncounterPlayerLevel:Int32 {
           get {
                return builderResult.maxEncounterPlayerLevel
           }
           set (value) {
               builderResult.hasMaxEncounterPlayerLevel = true
               builderResult.maxEncounterPlayerLevel = value
           }
      }
      public func setMaxEncounterPlayerLevel(value:Int32) -> Pogoprotos.Settings.Master.PlayerLevelSettings.Builder {
        self.maxEncounterPlayerLevel = value
        return self
      }
      public func clearMaxEncounterPlayerLevel() -> Pogoprotos.Settings.Master.PlayerLevelSettings.Builder{
           builderResult.hasMaxEncounterPlayerLevel = false
           builderResult.maxEncounterPlayerLevel = Int32(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Settings.Master.PlayerLevelSettings.Builder {
        builderResult = Pogoprotos.Settings.Master.PlayerLevelSettings()
        return self
      }
      override public func clone() throws -> Pogoprotos.Settings.Master.PlayerLevelSettings.Builder {
        return try Pogoprotos.Settings.Master.PlayerLevelSettings.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Settings.Master.PlayerLevelSettings {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Settings.Master.PlayerLevelSettings {
        let returnMe:Pogoprotos.Settings.Master.PlayerLevelSettings = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Settings.Master.PlayerLevelSettings) throws -> Pogoprotos.Settings.Master.PlayerLevelSettings.Builder {
        if other == Pogoprotos.Settings.Master.PlayerLevelSettings() {
         return self
        }
        if !other.rankNum.isEmpty {
            builderResult.rankNum += other.rankNum
        }
        if !other.requiredExperience.isEmpty {
            builderResult.requiredExperience += other.requiredExperience
        }
        if !other.cpMultiplier.isEmpty {
            builderResult.cpMultiplier += other.cpMultiplier
        }
        if other.hasMaxEggPlayerLevel {
             maxEggPlayerLevel = other.maxEggPlayerLevel
        }
        if other.hasMaxEncounterPlayerLevel {
             maxEncounterPlayerLevel = other.maxEncounterPlayerLevel
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.Master.PlayerLevelSettings.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.PlayerLevelSettings.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10:
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.rankNum += [try input.readInt32()]
            }
            input.popLimit(limit)

          case 18:
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.requiredExperience += [try input.readInt32()]
            }
            input.popLimit(limit)

          case 26:
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.cpMultiplier += [try input.readFloat()]
            }
            input.popLimit(limit)

          case 32:
            maxEggPlayerLevel = try input.readInt32()

          case 40:
            maxEncounterPlayerLevel = try input.readInt32()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.Master.PlayerLevelSettings.Builder {
        let resultDecodedBuilder = Pogoprotos.Settings.Master.PlayerLevelSettings.Builder()
        if let jsonValueRankNum = jsonMap["rankNum"] as? Array<NSNumber> {
          var jsonArrayRankNum:Array<Int32> = []
          for oneValueRankNum in jsonValueRankNum {
            jsonArrayRankNum += [oneValueRankNum.intValue]
          }
          resultDecodedBuilder.rankNum = jsonArrayRankNum
        }
        if let jsonValueRequiredExperience = jsonMap["requiredExperience"] as? Array<NSNumber> {
          var jsonArrayRequiredExperience:Array<Int32> = []
          for oneValueRequiredExperience in jsonValueRequiredExperience {
            jsonArrayRequiredExperience += [oneValueRequiredExperience.intValue]
          }
          resultDecodedBuilder.requiredExperience = jsonArrayRequiredExperience
        }
        if let jsonValueCpMultiplier = jsonMap["cpMultiplier"] as? Array<NSNumber> {
          var jsonArrayCpMultiplier:Array<Float> = []
          for oneValueCpMultiplier in jsonValueCpMultiplier {
            jsonArrayCpMultiplier += [oneValueCpMultiplier.floatValue]
          }
          resultDecodedBuilder.cpMultiplier = jsonArrayCpMultiplier
        }
        if let jsonValueMaxEggPlayerLevel = jsonMap["maxEggPlayerLevel"] as? NSNumber {
          resultDecodedBuilder.maxEggPlayerLevel = jsonValueMaxEggPlayerLevel.intValue
        }
        if let jsonValueMaxEncounterPlayerLevel = jsonMap["maxEncounterPlayerLevel"] as? NSNumber {
          resultDecodedBuilder.maxEncounterPlayerLevel = jsonValueMaxEncounterPlayerLevel.intValue
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Settings.Master.PlayerLevelSettings.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Settings.Master.PlayerLevelSettings.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
