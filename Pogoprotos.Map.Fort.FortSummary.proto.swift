// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "FortSummary.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Pogoprotos { public struct Map { public struct Fort { }}}

public func == (lhs: Pogoprotos.Map.Fort.FortSummary, rhs: Pogoprotos.Map.Fort.FortSummary) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasFortSummaryId == rhs.hasFortSummaryId) && (!lhs.hasFortSummaryId || lhs.fortSummaryId == rhs.fortSummaryId)
  fieldCheck = fieldCheck && (lhs.hasLastModifiedTimestampMs == rhs.hasLastModifiedTimestampMs) && (!lhs.hasLastModifiedTimestampMs || lhs.lastModifiedTimestampMs == rhs.lastModifiedTimestampMs)
  fieldCheck = fieldCheck && (lhs.hasLatitude == rhs.hasLatitude) && (!lhs.hasLatitude || lhs.latitude == rhs.latitude)
  fieldCheck = fieldCheck && (lhs.hasLongitude == rhs.hasLongitude) && (!lhs.hasLongitude || lhs.longitude == rhs.longitude)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Pogoprotos.Map.Fort {
  public struct FortSummaryRoot {
    public static var sharedInstance : FortSummaryRoot {
     struct Static {
         static let instance : FortSummaryRoot = FortSummaryRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class FortSummary : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasFortSummaryId:Bool = false
    public private(set) var fortSummaryId:Int32 = Int32(0)

    public private(set) var hasLastModifiedTimestampMs:Bool = false
    public private(set) var lastModifiedTimestampMs:Int32 = Int32(0)

    public private(set) var hasLatitude:Bool = false
    public private(set) var latitude:Int32 = Int32(0)

    public private(set) var hasLongitude:Bool = false
    public private(set) var longitude:Int32 = Int32(0)

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasFortSummaryId {
        try output.writeInt32(1, value:fortSummaryId)
      }
      if hasLastModifiedTimestampMs {
        try output.writeInt32(2, value:lastModifiedTimestampMs)
      }
      if hasLatitude {
        try output.writeInt32(3, value:latitude)
      }
      if hasLongitude {
        try output.writeInt32(4, value:longitude)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasFortSummaryId {
        serialize_size += fortSummaryId.computeInt32Size(1)
      }
      if hasLastModifiedTimestampMs {
        serialize_size += lastModifiedTimestampMs.computeInt32Size(2)
      }
      if hasLatitude {
        serialize_size += latitude.computeInt32Size(3)
      }
      if hasLongitude {
        serialize_size += longitude.computeInt32Size(4)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Map.Fort.FortSummary> {
      var mergedArray = Array<Pogoprotos.Map.Fort.FortSummary>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Map.Fort.FortSummary? {
      return try Pogoprotos.Map.Fort.FortSummary.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Map.Fort.FortSummary {
      return try Pogoprotos.Map.Fort.FortSummary.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Map.Fort.FortSummaryRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Map.Fort.FortSummary {
      return try Pogoprotos.Map.Fort.FortSummary.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Map.Fort.FortSummary {
      return try Pogoprotos.Map.Fort.FortSummary.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Map.Fort.FortSummary {
      return try Pogoprotos.Map.Fort.FortSummary.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Map.Fort.FortSummary {
      return try Pogoprotos.Map.Fort.FortSummary.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Map.Fort.FortSummary {
      return try Pogoprotos.Map.Fort.FortSummary.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Map.Fort.FortSummary.Builder {
      return Pogoprotos.Map.Fort.FortSummary.classBuilder() as! Pogoprotos.Map.Fort.FortSummary.Builder
    }
    public func getBuilder() -> Pogoprotos.Map.Fort.FortSummary.Builder {
      return classBuilder() as! Pogoprotos.Map.Fort.FortSummary.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Map.Fort.FortSummary.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Map.Fort.FortSummary.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Map.Fort.FortSummary.Builder {
      return try Pogoprotos.Map.Fort.FortSummary.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Map.Fort.FortSummary) throws -> Pogoprotos.Map.Fort.FortSummary.Builder {
      return try Pogoprotos.Map.Fort.FortSummary.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasFortSummaryId {
        jsonMap["fortSummaryId"] = NSNumber(int:fortSummaryId)
      }
      if hasLastModifiedTimestampMs {
        jsonMap["lastModifiedTimestampMs"] = NSNumber(int:lastModifiedTimestampMs)
      }
      if hasLatitude {
        jsonMap["latitude"] = NSNumber(int:latitude)
      }
      if hasLongitude {
        jsonMap["longitude"] = NSNumber(int:longitude)
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Map.Fort.FortSummary {
      return try Pogoprotos.Map.Fort.FortSummary.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Map.Fort.FortSummary {
      return try Pogoprotos.Map.Fort.FortSummary.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasFortSummaryId {
        output += "\(indent) fortSummaryId: \(fortSummaryId) \n"
      }
      if hasLastModifiedTimestampMs {
        output += "\(indent) lastModifiedTimestampMs: \(lastModifiedTimestampMs) \n"
      }
      if hasLatitude {
        output += "\(indent) latitude: \(latitude) \n"
      }
      if hasLongitude {
        output += "\(indent) longitude: \(longitude) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasFortSummaryId {
               hashCode = (hashCode &* 31) &+ fortSummaryId.hashValue
            }
            if hasLastModifiedTimestampMs {
               hashCode = (hashCode &* 31) &+ lastModifiedTimestampMs.hashValue
            }
            if hasLatitude {
               hashCode = (hashCode &* 31) &+ latitude.hashValue
            }
            if hasLongitude {
               hashCode = (hashCode &* 31) &+ longitude.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Map.Fort.FortSummary"
    }
    override public func className() -> String {
        return "Pogoprotos.Map.Fort.FortSummary"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Map.Fort.FortSummary.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Map.Fort.FortSummary = Pogoprotos.Map.Fort.FortSummary()
      public func getMessage() -> Pogoprotos.Map.Fort.FortSummary {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasFortSummaryId:Bool {
           get {
                return builderResult.hasFortSummaryId
           }
      }
      public var fortSummaryId:Int32 {
           get {
                return builderResult.fortSummaryId
           }
           set (value) {
               builderResult.hasFortSummaryId = true
               builderResult.fortSummaryId = value
           }
      }
      public func setFortSummaryId(value:Int32) -> Pogoprotos.Map.Fort.FortSummary.Builder {
        self.fortSummaryId = value
        return self
      }
      public func clearFortSummaryId() -> Pogoprotos.Map.Fort.FortSummary.Builder{
           builderResult.hasFortSummaryId = false
           builderResult.fortSummaryId = Int32(0)
           return self
      }
      public var hasLastModifiedTimestampMs:Bool {
           get {
                return builderResult.hasLastModifiedTimestampMs
           }
      }
      public var lastModifiedTimestampMs:Int32 {
           get {
                return builderResult.lastModifiedTimestampMs
           }
           set (value) {
               builderResult.hasLastModifiedTimestampMs = true
               builderResult.lastModifiedTimestampMs = value
           }
      }
      public func setLastModifiedTimestampMs(value:Int32) -> Pogoprotos.Map.Fort.FortSummary.Builder {
        self.lastModifiedTimestampMs = value
        return self
      }
      public func clearLastModifiedTimestampMs() -> Pogoprotos.Map.Fort.FortSummary.Builder{
           builderResult.hasLastModifiedTimestampMs = false
           builderResult.lastModifiedTimestampMs = Int32(0)
           return self
      }
      public var hasLatitude:Bool {
           get {
                return builderResult.hasLatitude
           }
      }
      public var latitude:Int32 {
           get {
                return builderResult.latitude
           }
           set (value) {
               builderResult.hasLatitude = true
               builderResult.latitude = value
           }
      }
      public func setLatitude(value:Int32) -> Pogoprotos.Map.Fort.FortSummary.Builder {
        self.latitude = value
        return self
      }
      public func clearLatitude() -> Pogoprotos.Map.Fort.FortSummary.Builder{
           builderResult.hasLatitude = false
           builderResult.latitude = Int32(0)
           return self
      }
      public var hasLongitude:Bool {
           get {
                return builderResult.hasLongitude
           }
      }
      public var longitude:Int32 {
           get {
                return builderResult.longitude
           }
           set (value) {
               builderResult.hasLongitude = true
               builderResult.longitude = value
           }
      }
      public func setLongitude(value:Int32) -> Pogoprotos.Map.Fort.FortSummary.Builder {
        self.longitude = value
        return self
      }
      public func clearLongitude() -> Pogoprotos.Map.Fort.FortSummary.Builder{
           builderResult.hasLongitude = false
           builderResult.longitude = Int32(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Map.Fort.FortSummary.Builder {
        builderResult = Pogoprotos.Map.Fort.FortSummary()
        return self
      }
      override public func clone() throws -> Pogoprotos.Map.Fort.FortSummary.Builder {
        return try Pogoprotos.Map.Fort.FortSummary.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Map.Fort.FortSummary {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Map.Fort.FortSummary {
        let returnMe:Pogoprotos.Map.Fort.FortSummary = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Map.Fort.FortSummary) throws -> Pogoprotos.Map.Fort.FortSummary.Builder {
        if other == Pogoprotos.Map.Fort.FortSummary() {
         return self
        }
        if other.hasFortSummaryId {
             fortSummaryId = other.fortSummaryId
        }
        if other.hasLastModifiedTimestampMs {
             lastModifiedTimestampMs = other.lastModifiedTimestampMs
        }
        if other.hasLatitude {
             latitude = other.latitude
        }
        if other.hasLongitude {
             longitude = other.longitude
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Map.Fort.FortSummary.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Map.Fort.FortSummary.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            fortSummaryId = try input.readInt32()

          case 16:
            lastModifiedTimestampMs = try input.readInt32()

          case 24:
            latitude = try input.readInt32()

          case 32:
            longitude = try input.readInt32()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Map.Fort.FortSummary.Builder {
        let resultDecodedBuilder = Pogoprotos.Map.Fort.FortSummary.Builder()
        if let jsonValueFortSummaryId = jsonMap["fortSummaryId"] as? NSNumber {
          resultDecodedBuilder.fortSummaryId = jsonValueFortSummaryId.intValue
        }
        if let jsonValueLastModifiedTimestampMs = jsonMap["lastModifiedTimestampMs"] as? NSNumber {
          resultDecodedBuilder.lastModifiedTimestampMs = jsonValueLastModifiedTimestampMs.intValue
        }
        if let jsonValueLatitude = jsonMap["latitude"] as? NSNumber {
          resultDecodedBuilder.latitude = jsonValueLatitude.intValue
        }
        if let jsonValueLongitude = jsonMap["longitude"] as? NSNumber {
          resultDecodedBuilder.longitude = jsonValueLongitude.intValue
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Map.Fort.FortSummary.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Map.Fort.FortSummary.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
