// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "GetInventoryMessage.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Pogoprotos { public struct Networking { public struct Requests { public struct Messages { }}}}

public func == (lhs: Pogoprotos.Networking.Requests.Messages.GetInventoryMessage, rhs: Pogoprotos.Networking.Requests.Messages.GetInventoryMessage) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasLastTimestampMs == rhs.hasLastTimestampMs) && (!lhs.hasLastTimestampMs || lhs.lastTimestampMs == rhs.lastTimestampMs)
  fieldCheck = fieldCheck && (lhs.hasItemBeenSeen == rhs.hasItemBeenSeen) && (!lhs.hasItemBeenSeen || lhs.itemBeenSeen == rhs.itemBeenSeen)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Pogoprotos.Networking.Requests.Messages {
  public struct GetInventoryMessageRoot {
    public static var sharedInstance : GetInventoryMessageRoot {
     struct Static {
         static let instance : GetInventoryMessageRoot = GetInventoryMessageRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class GetInventoryMessage : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasLastTimestampMs:Bool = false
    public private(set) var lastTimestampMs:Int64 = Int64(0)

    // TODO: Find out what this is.
    public private(set) var hasItemBeenSeen:Bool = false
    public private(set) var itemBeenSeen:Int32 = Int32(0)

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasLastTimestampMs {
        try output.writeInt64(1, value:lastTimestampMs)
      }
      if hasItemBeenSeen {
        try output.writeInt32(2, value:itemBeenSeen)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasLastTimestampMs {
        serialize_size += lastTimestampMs.computeInt64Size(1)
      }
      if hasItemBeenSeen {
        serialize_size += itemBeenSeen.computeInt32Size(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Networking.Requests.Messages.GetInventoryMessage> {
      var mergedArray = Array<Pogoprotos.Networking.Requests.Messages.GetInventoryMessage>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Requests.Messages.GetInventoryMessage? {
      return try Pogoprotos.Networking.Requests.Messages.GetInventoryMessage.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Networking.Requests.Messages.GetInventoryMessage {
      return try Pogoprotos.Networking.Requests.Messages.GetInventoryMessage.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Networking.Requests.Messages.GetInventoryMessageRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Requests.Messages.GetInventoryMessage {
      return try Pogoprotos.Networking.Requests.Messages.GetInventoryMessage.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Requests.Messages.GetInventoryMessage {
      return try Pogoprotos.Networking.Requests.Messages.GetInventoryMessage.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Requests.Messages.GetInventoryMessage {
      return try Pogoprotos.Networking.Requests.Messages.GetInventoryMessage.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Requests.Messages.GetInventoryMessage {
      return try Pogoprotos.Networking.Requests.Messages.GetInventoryMessage.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Requests.Messages.GetInventoryMessage {
      return try Pogoprotos.Networking.Requests.Messages.GetInventoryMessage.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Networking.Requests.Messages.GetInventoryMessage.Builder {
      return Pogoprotos.Networking.Requests.Messages.GetInventoryMessage.classBuilder() as! Pogoprotos.Networking.Requests.Messages.GetInventoryMessage.Builder
    }
    public func getBuilder() -> Pogoprotos.Networking.Requests.Messages.GetInventoryMessage.Builder {
      return classBuilder() as! Pogoprotos.Networking.Requests.Messages.GetInventoryMessage.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Networking.Requests.Messages.GetInventoryMessage.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Networking.Requests.Messages.GetInventoryMessage.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Networking.Requests.Messages.GetInventoryMessage.Builder {
      return try Pogoprotos.Networking.Requests.Messages.GetInventoryMessage.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Networking.Requests.Messages.GetInventoryMessage) throws -> Pogoprotos.Networking.Requests.Messages.GetInventoryMessage.Builder {
      return try Pogoprotos.Networking.Requests.Messages.GetInventoryMessage.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasLastTimestampMs {
        jsonMap["lastTimestampMs"] = "\(lastTimestampMs)"
      }
      if hasItemBeenSeen {
        jsonMap["itemBeenSeen"] = NSNumber(int:itemBeenSeen)
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Requests.Messages.GetInventoryMessage {
      return try Pogoprotos.Networking.Requests.Messages.GetInventoryMessage.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Networking.Requests.Messages.GetInventoryMessage {
      return try Pogoprotos.Networking.Requests.Messages.GetInventoryMessage.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasLastTimestampMs {
        output += "\(indent) lastTimestampMs: \(lastTimestampMs) \n"
      }
      if hasItemBeenSeen {
        output += "\(indent) itemBeenSeen: \(itemBeenSeen) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasLastTimestampMs {
               hashCode = (hashCode &* 31) &+ lastTimestampMs.hashValue
            }
            if hasItemBeenSeen {
               hashCode = (hashCode &* 31) &+ itemBeenSeen.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Networking.Requests.Messages.GetInventoryMessage"
    }
    override public func className() -> String {
        return "Pogoprotos.Networking.Requests.Messages.GetInventoryMessage"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Networking.Requests.Messages.GetInventoryMessage.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Networking.Requests.Messages.GetInventoryMessage = Pogoprotos.Networking.Requests.Messages.GetInventoryMessage()
      public func getMessage() -> Pogoprotos.Networking.Requests.Messages.GetInventoryMessage {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasLastTimestampMs:Bool {
           get {
                return builderResult.hasLastTimestampMs
           }
      }
      public var lastTimestampMs:Int64 {
           get {
                return builderResult.lastTimestampMs
           }
           set (value) {
               builderResult.hasLastTimestampMs = true
               builderResult.lastTimestampMs = value
           }
      }
      public func setLastTimestampMs(value:Int64) -> Pogoprotos.Networking.Requests.Messages.GetInventoryMessage.Builder {
        self.lastTimestampMs = value
        return self
      }
      public func clearLastTimestampMs() -> Pogoprotos.Networking.Requests.Messages.GetInventoryMessage.Builder{
           builderResult.hasLastTimestampMs = false
           builderResult.lastTimestampMs = Int64(0)
           return self
      }
      public var hasItemBeenSeen:Bool {
           get {
                return builderResult.hasItemBeenSeen
           }
      }
      public var itemBeenSeen:Int32 {
           get {
                return builderResult.itemBeenSeen
           }
           set (value) {
               builderResult.hasItemBeenSeen = true
               builderResult.itemBeenSeen = value
           }
      }
      public func setItemBeenSeen(value:Int32) -> Pogoprotos.Networking.Requests.Messages.GetInventoryMessage.Builder {
        self.itemBeenSeen = value
        return self
      }
      public func clearItemBeenSeen() -> Pogoprotos.Networking.Requests.Messages.GetInventoryMessage.Builder{
           builderResult.hasItemBeenSeen = false
           builderResult.itemBeenSeen = Int32(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Networking.Requests.Messages.GetInventoryMessage.Builder {
        builderResult = Pogoprotos.Networking.Requests.Messages.GetInventoryMessage()
        return self
      }
      override public func clone() throws -> Pogoprotos.Networking.Requests.Messages.GetInventoryMessage.Builder {
        return try Pogoprotos.Networking.Requests.Messages.GetInventoryMessage.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Networking.Requests.Messages.GetInventoryMessage {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Networking.Requests.Messages.GetInventoryMessage {
        let returnMe:Pogoprotos.Networking.Requests.Messages.GetInventoryMessage = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Networking.Requests.Messages.GetInventoryMessage) throws -> Pogoprotos.Networking.Requests.Messages.GetInventoryMessage.Builder {
        if other == Pogoprotos.Networking.Requests.Messages.GetInventoryMessage() {
         return self
        }
        if other.hasLastTimestampMs {
             lastTimestampMs = other.lastTimestampMs
        }
        if other.hasItemBeenSeen {
             itemBeenSeen = other.itemBeenSeen
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Requests.Messages.GetInventoryMessage.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Requests.Messages.GetInventoryMessage.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            lastTimestampMs = try input.readInt64()

          case 16:
            itemBeenSeen = try input.readInt32()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Requests.Messages.GetInventoryMessage.Builder {
        let resultDecodedBuilder = Pogoprotos.Networking.Requests.Messages.GetInventoryMessage.Builder()
        if let jsonValueLastTimestampMs = jsonMap["lastTimestampMs"] as? String {
          resultDecodedBuilder.lastTimestampMs = Int64(jsonValueLastTimestampMs)!
        }
        if let jsonValueItemBeenSeen = jsonMap["itemBeenSeen"] as? NSNumber {
          resultDecodedBuilder.itemBeenSeen = jsonValueItemBeenSeen.intValue
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Networking.Requests.Messages.GetInventoryMessage.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Networking.Requests.Messages.GetInventoryMessage.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
