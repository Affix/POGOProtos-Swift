// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "DownloadItemTemplatesResponse.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Pogoprotos { public struct Networking { public struct Responses { }}}

public func == (lhs: Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse, rhs: Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasSuccess == rhs.hasSuccess) && (!lhs.hasSuccess || lhs.success == rhs.success)
  fieldCheck = fieldCheck && (lhs.itemTemplates == rhs.itemTemplates)
  fieldCheck = fieldCheck && (lhs.hasTimestampMs == rhs.hasTimestampMs) && (!lhs.hasTimestampMs || lhs.timestampMs == rhs.timestampMs)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate, rhs: Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasTemplateId == rhs.hasTemplateId) && (!lhs.hasTemplateId || lhs.templateId == rhs.templateId)
  fieldCheck = fieldCheck && (lhs.hasPokemonSettings == rhs.hasPokemonSettings) && (!lhs.hasPokemonSettings || lhs.pokemonSettings == rhs.pokemonSettings)
  fieldCheck = fieldCheck && (lhs.hasItemSettings == rhs.hasItemSettings) && (!lhs.hasItemSettings || lhs.itemSettings == rhs.itemSettings)
  fieldCheck = fieldCheck && (lhs.hasMoveSettings == rhs.hasMoveSettings) && (!lhs.hasMoveSettings || lhs.moveSettings == rhs.moveSettings)
  fieldCheck = fieldCheck && (lhs.hasMoveSequenceSettings == rhs.hasMoveSequenceSettings) && (!lhs.hasMoveSequenceSettings || lhs.moveSequenceSettings == rhs.moveSequenceSettings)
  fieldCheck = fieldCheck && (lhs.hasTypeEffective == rhs.hasTypeEffective) && (!lhs.hasTypeEffective || lhs.typeEffective == rhs.typeEffective)
  fieldCheck = fieldCheck && (lhs.hasBadgeSettings == rhs.hasBadgeSettings) && (!lhs.hasBadgeSettings || lhs.badgeSettings == rhs.badgeSettings)
  fieldCheck = fieldCheck && (lhs.hasCamera == rhs.hasCamera) && (!lhs.hasCamera || lhs.camera == rhs.camera)
  fieldCheck = fieldCheck && (lhs.hasPlayerLevel == rhs.hasPlayerLevel) && (!lhs.hasPlayerLevel || lhs.playerLevel == rhs.playerLevel)
  fieldCheck = fieldCheck && (lhs.hasGymLevel == rhs.hasGymLevel) && (!lhs.hasGymLevel || lhs.gymLevel == rhs.gymLevel)
  fieldCheck = fieldCheck && (lhs.hasBattleSettings == rhs.hasBattleSettings) && (!lhs.hasBattleSettings || lhs.battleSettings == rhs.battleSettings)
  fieldCheck = fieldCheck && (lhs.hasEncounterSettings == rhs.hasEncounterSettings) && (!lhs.hasEncounterSettings || lhs.encounterSettings == rhs.encounterSettings)
  fieldCheck = fieldCheck && (lhs.hasIapItemDisplay == rhs.hasIapItemDisplay) && (!lhs.hasIapItemDisplay || lhs.iapItemDisplay == rhs.iapItemDisplay)
  fieldCheck = fieldCheck && (lhs.hasIapSettings == rhs.hasIapSettings) && (!lhs.hasIapSettings || lhs.iapSettings == rhs.iapSettings)
  fieldCheck = fieldCheck && (lhs.hasPokemonUpgrades == rhs.hasPokemonUpgrades) && (!lhs.hasPokemonUpgrades || lhs.pokemonUpgrades == rhs.pokemonUpgrades)
  fieldCheck = fieldCheck && (lhs.hasEquippedBadges == rhs.hasEquippedBadges) && (!lhs.hasEquippedBadges || lhs.equippedBadges == rhs.equippedBadges)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Pogoprotos.Networking.Responses {
  public struct DownloadItemTemplatesResponseRoot {
    public static var sharedInstance : DownloadItemTemplatesResponseRoot {
     struct Static {
         static let instance : DownloadItemTemplatesResponseRoot = DownloadItemTemplatesResponseRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Pogoprotos.Settings.Master.ItemSettingsRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Settings.Master.MoveSettingsRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Settings.Master.BadgeSettingsRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Settings.Master.PokemonSettingsRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Settings.Master.MoveSequenceSettingsRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Settings.Master.TypeEffectiveSettingsRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Settings.Master.CameraSettingsRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Settings.Master.PlayerLevelSettingsRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Settings.Master.GymLevelSettingsRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Settings.Master.GymBattleSettingsRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Settings.Master.EncounterSettingsRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Settings.Master.IapItemDisplayRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Settings.Master.IapSettingsRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Settings.Master.PokemonUpgradeSettingsRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Settings.Master.EquippedBadgeSettingsRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class DownloadItemTemplatesResponse : GeneratedMessage, GeneratedMessageProtocol {


    //Nested type declaration start

      final public class ItemTemplate : GeneratedMessage, GeneratedMessageProtocol {
        public private(set) var hasTemplateId:Bool = false
        public private(set) var templateId:String = ""

        public private(set) var hasPokemonSettings:Bool = false
        public private(set) var pokemonSettings:Pogoprotos.Settings.Master.PokemonSettings!
        public private(set) var hasItemSettings:Bool = false
        public private(set) var itemSettings:Pogoprotos.Settings.Master.ItemSettings!
        public private(set) var hasMoveSettings:Bool = false
        public private(set) var moveSettings:Pogoprotos.Settings.Master.MoveSettings!
        public private(set) var hasMoveSequenceSettings:Bool = false
        public private(set) var moveSequenceSettings:Pogoprotos.Settings.Master.MoveSequenceSettings!
        public private(set) var hasTypeEffective:Bool = false
        public private(set) var typeEffective:Pogoprotos.Settings.Master.TypeEffectiveSettings!
        public private(set) var hasBadgeSettings:Bool = false
        public private(set) var badgeSettings:Pogoprotos.Settings.Master.BadgeSettings!
        public private(set) var hasCamera:Bool = false
        public private(set) var camera:Pogoprotos.Settings.Master.CameraSettings!
        public private(set) var hasPlayerLevel:Bool = false
        public private(set) var playerLevel:Pogoprotos.Settings.Master.PlayerLevelSettings!
        public private(set) var hasGymLevel:Bool = false
        public private(set) var gymLevel:Pogoprotos.Settings.Master.GymLevelSettings!
        public private(set) var hasBattleSettings:Bool = false
        public private(set) var battleSettings:Pogoprotos.Settings.Master.GymBattleSettings!
        public private(set) var hasEncounterSettings:Bool = false
        public private(set) var encounterSettings:Pogoprotos.Settings.Master.EncounterSettings!
        public private(set) var hasIapItemDisplay:Bool = false
        public private(set) var iapItemDisplay:Pogoprotos.Settings.Master.IapItemDisplay!
        public private(set) var hasIapSettings:Bool = false
        public private(set) var iapSettings:Pogoprotos.Settings.Master.IapSettings!
        public private(set) var hasPokemonUpgrades:Bool = false
        public private(set) var pokemonUpgrades:Pogoprotos.Settings.Master.PokemonUpgradeSettings!
        public private(set) var hasEquippedBadges:Bool = false
        public private(set) var equippedBadges:Pogoprotos.Settings.Master.EquippedBadgeSettings!
        required public init() {
             super.init()
        }
        override public func isInitialized() -> Bool {
         return true
        }
        override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
          if hasTemplateId {
            try output.writeString(1, value:templateId)
          }
          if hasPokemonSettings {
            try output.writeMessage(2, value:pokemonSettings)
          }
          if hasItemSettings {
            try output.writeMessage(3, value:itemSettings)
          }
          if hasMoveSettings {
            try output.writeMessage(4, value:moveSettings)
          }
          if hasMoveSequenceSettings {
            try output.writeMessage(5, value:moveSequenceSettings)
          }
          if hasTypeEffective {
            try output.writeMessage(8, value:typeEffective)
          }
          if hasBadgeSettings {
            try output.writeMessage(10, value:badgeSettings)
          }
          if hasCamera {
            try output.writeMessage(11, value:camera)
          }
          if hasPlayerLevel {
            try output.writeMessage(12, value:playerLevel)
          }
          if hasGymLevel {
            try output.writeMessage(13, value:gymLevel)
          }
          if hasBattleSettings {
            try output.writeMessage(14, value:battleSettings)
          }
          if hasEncounterSettings {
            try output.writeMessage(15, value:encounterSettings)
          }
          if hasIapItemDisplay {
            try output.writeMessage(16, value:iapItemDisplay)
          }
          if hasIapSettings {
            try output.writeMessage(17, value:iapSettings)
          }
          if hasPokemonUpgrades {
            try output.writeMessage(18, value:pokemonUpgrades)
          }
          if hasEquippedBadges {
            try output.writeMessage(19, value:equippedBadges)
          }
          try unknownFields.writeToCodedOutputStream(output)
        }
        override public func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasTemplateId {
            serialize_size += templateId.computeStringSize(1)
          }
          if hasPokemonSettings {
              if let varSizepokemonSettings = pokemonSettings?.computeMessageSize(2) {
                  serialize_size += varSizepokemonSettings
              }
          }
          if hasItemSettings {
              if let varSizeitemSettings = itemSettings?.computeMessageSize(3) {
                  serialize_size += varSizeitemSettings
              }
          }
          if hasMoveSettings {
              if let varSizemoveSettings = moveSettings?.computeMessageSize(4) {
                  serialize_size += varSizemoveSettings
              }
          }
          if hasMoveSequenceSettings {
              if let varSizemoveSequenceSettings = moveSequenceSettings?.computeMessageSize(5) {
                  serialize_size += varSizemoveSequenceSettings
              }
          }
          if hasTypeEffective {
              if let varSizetypeEffective = typeEffective?.computeMessageSize(8) {
                  serialize_size += varSizetypeEffective
              }
          }
          if hasBadgeSettings {
              if let varSizebadgeSettings = badgeSettings?.computeMessageSize(10) {
                  serialize_size += varSizebadgeSettings
              }
          }
          if hasCamera {
              if let varSizecamera = camera?.computeMessageSize(11) {
                  serialize_size += varSizecamera
              }
          }
          if hasPlayerLevel {
              if let varSizeplayerLevel = playerLevel?.computeMessageSize(12) {
                  serialize_size += varSizeplayerLevel
              }
          }
          if hasGymLevel {
              if let varSizegymLevel = gymLevel?.computeMessageSize(13) {
                  serialize_size += varSizegymLevel
              }
          }
          if hasBattleSettings {
              if let varSizebattleSettings = battleSettings?.computeMessageSize(14) {
                  serialize_size += varSizebattleSettings
              }
          }
          if hasEncounterSettings {
              if let varSizeencounterSettings = encounterSettings?.computeMessageSize(15) {
                  serialize_size += varSizeencounterSettings
              }
          }
          if hasIapItemDisplay {
              if let varSizeiapItemDisplay = iapItemDisplay?.computeMessageSize(16) {
                  serialize_size += varSizeiapItemDisplay
              }
          }
          if hasIapSettings {
              if let varSizeiapSettings = iapSettings?.computeMessageSize(17) {
                  serialize_size += varSizeiapSettings
              }
          }
          if hasPokemonUpgrades {
              if let varSizepokemonUpgrades = pokemonUpgrades?.computeMessageSize(18) {
                  serialize_size += varSizepokemonUpgrades
              }
          }
          if hasEquippedBadges {
              if let varSizeequippedBadges = equippedBadges?.computeMessageSize(19) {
                  serialize_size += varSizeequippedBadges
              }
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate> {
          var mergedArray = Array<Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate>()
          while let value = try parseFromDelimitedFromInputStream(input) {
            mergedArray += [value]
          }
          return mergedArray
        }
        public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate? {
          return try Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder().mergeDelimitedFromInputStream(input)?.build()
        }
        public class func parseFromData(data:NSData) throws -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate {
          return try Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Networking.Responses.DownloadItemTemplatesResponseRoot.sharedInstance.extensionRegistry).build()
        }
        public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate {
          return try Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate {
          return try Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder().mergeFromInputStream(input).build()
        }
        public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate {
          return try Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate {
          return try Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder().mergeFromCodedInputStream(input).build()
        }
        public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate {
          return try Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func getBuilder() -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder {
          return Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.classBuilder() as! Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder
        }
        public func getBuilder() -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder {
          return classBuilder() as! Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder
        }
        override public class func classBuilder() -> MessageBuilder {
          return Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder()
        }
        override public func classBuilder() -> MessageBuilder {
          return Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder()
        }
        public func toBuilder() throws -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder {
          return try Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.builderWithPrototype(self)
        }
        public class func builderWithPrototype(prototype:Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate) throws -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder {
          return try Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder().mergeFrom(prototype)
        }
        override public func encode() throws -> Dictionary<String,AnyObject> {
          guard isInitialized() else {
            throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
          }

          var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
          if hasTemplateId {
            jsonMap["templateId"] = templateId
          }
          if hasPokemonSettings {
            jsonMap["pokemonSettings"] = try pokemonSettings.encode()
          }
          if hasItemSettings {
            jsonMap["itemSettings"] = try itemSettings.encode()
          }
          if hasMoveSettings {
            jsonMap["moveSettings"] = try moveSettings.encode()
          }
          if hasMoveSequenceSettings {
            jsonMap["moveSequenceSettings"] = try moveSequenceSettings.encode()
          }
          if hasTypeEffective {
            jsonMap["typeEffective"] = try typeEffective.encode()
          }
          if hasBadgeSettings {
            jsonMap["badgeSettings"] = try badgeSettings.encode()
          }
          if hasCamera {
            jsonMap["camera"] = try camera.encode()
          }
          if hasPlayerLevel {
            jsonMap["playerLevel"] = try playerLevel.encode()
          }
          if hasGymLevel {
            jsonMap["gymLevel"] = try gymLevel.encode()
          }
          if hasBattleSettings {
            jsonMap["battleSettings"] = try battleSettings.encode()
          }
          if hasEncounterSettings {
            jsonMap["encounterSettings"] = try encounterSettings.encode()
          }
          if hasIapItemDisplay {
            jsonMap["iapItemDisplay"] = try iapItemDisplay.encode()
          }
          if hasIapSettings {
            jsonMap["iapSettings"] = try iapSettings.encode()
          }
          if hasPokemonUpgrades {
            jsonMap["pokemonUpgrades"] = try pokemonUpgrades.encode()
          }
          if hasEquippedBadges {
            jsonMap["equippedBadges"] = try equippedBadges.encode()
          }
          return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate {
          return try Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder.decodeToBuilder(jsonMap).build()
        }
        override class public func fromJSON(data:NSData) throws -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate {
          return try Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder.fromJSONToBuilder(data).build()
        }
        override public func getDescription(indent:String) throws -> String {
          var output = ""
          if hasTemplateId {
            output += "\(indent) templateId: \(templateId) \n"
          }
          if hasPokemonSettings {
            output += "\(indent) pokemonSettings {\n"
            if let outDescPokemonSettings = pokemonSettings {
              output += try outDescPokemonSettings.getDescription("\(indent)  ")
            }
            output += "\(indent) }\n"
          }
          if hasItemSettings {
            output += "\(indent) itemSettings {\n"
            if let outDescItemSettings = itemSettings {
              output += try outDescItemSettings.getDescription("\(indent)  ")
            }
            output += "\(indent) }\n"
          }
          if hasMoveSettings {
            output += "\(indent) moveSettings {\n"
            if let outDescMoveSettings = moveSettings {
              output += try outDescMoveSettings.getDescription("\(indent)  ")
            }
            output += "\(indent) }\n"
          }
          if hasMoveSequenceSettings {
            output += "\(indent) moveSequenceSettings {\n"
            if let outDescMoveSequenceSettings = moveSequenceSettings {
              output += try outDescMoveSequenceSettings.getDescription("\(indent)  ")
            }
            output += "\(indent) }\n"
          }
          if hasTypeEffective {
            output += "\(indent) typeEffective {\n"
            if let outDescTypeEffective = typeEffective {
              output += try outDescTypeEffective.getDescription("\(indent)  ")
            }
            output += "\(indent) }\n"
          }
          if hasBadgeSettings {
            output += "\(indent) badgeSettings {\n"
            if let outDescBadgeSettings = badgeSettings {
              output += try outDescBadgeSettings.getDescription("\(indent)  ")
            }
            output += "\(indent) }\n"
          }
          if hasCamera {
            output += "\(indent) camera {\n"
            if let outDescCamera = camera {
              output += try outDescCamera.getDescription("\(indent)  ")
            }
            output += "\(indent) }\n"
          }
          if hasPlayerLevel {
            output += "\(indent) playerLevel {\n"
            if let outDescPlayerLevel = playerLevel {
              output += try outDescPlayerLevel.getDescription("\(indent)  ")
            }
            output += "\(indent) }\n"
          }
          if hasGymLevel {
            output += "\(indent) gymLevel {\n"
            if let outDescGymLevel = gymLevel {
              output += try outDescGymLevel.getDescription("\(indent)  ")
            }
            output += "\(indent) }\n"
          }
          if hasBattleSettings {
            output += "\(indent) battleSettings {\n"
            if let outDescBattleSettings = battleSettings {
              output += try outDescBattleSettings.getDescription("\(indent)  ")
            }
            output += "\(indent) }\n"
          }
          if hasEncounterSettings {
            output += "\(indent) encounterSettings {\n"
            if let outDescEncounterSettings = encounterSettings {
              output += try outDescEncounterSettings.getDescription("\(indent)  ")
            }
            output += "\(indent) }\n"
          }
          if hasIapItemDisplay {
            output += "\(indent) iapItemDisplay {\n"
            if let outDescIapItemDisplay = iapItemDisplay {
              output += try outDescIapItemDisplay.getDescription("\(indent)  ")
            }
            output += "\(indent) }\n"
          }
          if hasIapSettings {
            output += "\(indent) iapSettings {\n"
            if let outDescIapSettings = iapSettings {
              output += try outDescIapSettings.getDescription("\(indent)  ")
            }
            output += "\(indent) }\n"
          }
          if hasPokemonUpgrades {
            output += "\(indent) pokemonUpgrades {\n"
            if let outDescPokemonUpgrades = pokemonUpgrades {
              output += try outDescPokemonUpgrades.getDescription("\(indent)  ")
            }
            output += "\(indent) }\n"
          }
          if hasEquippedBadges {
            output += "\(indent) equippedBadges {\n"
            if let outDescEquippedBadges = equippedBadges {
              output += try outDescEquippedBadges.getDescription("\(indent)  ")
            }
            output += "\(indent) }\n"
          }
          output += unknownFields.getDescription(indent)
          return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasTemplateId {
                   hashCode = (hashCode &* 31) &+ templateId.hashValue
                }
                if hasPokemonSettings {
                    if let hashValuepokemonSettings = pokemonSettings?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValuepokemonSettings
                    }
                }
                if hasItemSettings {
                    if let hashValueitemSettings = itemSettings?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValueitemSettings
                    }
                }
                if hasMoveSettings {
                    if let hashValuemoveSettings = moveSettings?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValuemoveSettings
                    }
                }
                if hasMoveSequenceSettings {
                    if let hashValuemoveSequenceSettings = moveSequenceSettings?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValuemoveSequenceSettings
                    }
                }
                if hasTypeEffective {
                    if let hashValuetypeEffective = typeEffective?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValuetypeEffective
                    }
                }
                if hasBadgeSettings {
                    if let hashValuebadgeSettings = badgeSettings?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValuebadgeSettings
                    }
                }
                if hasCamera {
                    if let hashValuecamera = camera?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValuecamera
                    }
                }
                if hasPlayerLevel {
                    if let hashValueplayerLevel = playerLevel?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValueplayerLevel
                    }
                }
                if hasGymLevel {
                    if let hashValuegymLevel = gymLevel?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValuegymLevel
                    }
                }
                if hasBattleSettings {
                    if let hashValuebattleSettings = battleSettings?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValuebattleSettings
                    }
                }
                if hasEncounterSettings {
                    if let hashValueencounterSettings = encounterSettings?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValueencounterSettings
                    }
                }
                if hasIapItemDisplay {
                    if let hashValueiapItemDisplay = iapItemDisplay?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValueiapItemDisplay
                    }
                }
                if hasIapSettings {
                    if let hashValueiapSettings = iapSettings?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValueiapSettings
                    }
                }
                if hasPokemonUpgrades {
                    if let hashValuepokemonUpgrades = pokemonUpgrades?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValuepokemonUpgrades
                    }
                }
                if hasEquippedBadges {
                    if let hashValueequippedBadges = equippedBadges?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValueequippedBadges
                    }
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate"
        }
        override public func className() -> String {
            return "Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate"
        }
        override public func classMetaType() -> GeneratedMessage.Type {
            return Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.self
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
          private var builderResult:Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate = Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate()
          public func getMessage() -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate {
              return builderResult
          }

          required override public init () {
             super.init()
          }
          public var hasTemplateId:Bool {
               get {
                    return builderResult.hasTemplateId
               }
          }
          public var templateId:String {
               get {
                    return builderResult.templateId
               }
               set (value) {
                   builderResult.hasTemplateId = true
                   builderResult.templateId = value
               }
          }
          public func setTemplateId(value:String) -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder {
            self.templateId = value
            return self
          }
          public func clearTemplateId() -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder{
               builderResult.hasTemplateId = false
               builderResult.templateId = ""
               return self
          }
          public var hasPokemonSettings:Bool {
               get {
                   return builderResult.hasPokemonSettings
               }
          }
          public var pokemonSettings:Pogoprotos.Settings.Master.PokemonSettings! {
               get {
                   if pokemonSettingsBuilder_ != nil {
                      builderResult.pokemonSettings = pokemonSettingsBuilder_.getMessage()
                   }
                   return builderResult.pokemonSettings
               }
               set (value) {
                   builderResult.hasPokemonSettings = true
                   builderResult.pokemonSettings = value
               }
          }
          private var pokemonSettingsBuilder_:Pogoprotos.Settings.Master.PokemonSettings.Builder! {
               didSet {
                  builderResult.hasPokemonSettings = true
               }
          }
          public func getPokemonSettingsBuilder() -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
            if pokemonSettingsBuilder_ == nil {
               pokemonSettingsBuilder_ = Pogoprotos.Settings.Master.PokemonSettings.Builder()
               builderResult.pokemonSettings = pokemonSettingsBuilder_.getMessage()
               if pokemonSettings != nil {
                  try! pokemonSettingsBuilder_.mergeFrom(pokemonSettings)
               }
            }
            return pokemonSettingsBuilder_
          }
          public func setPokemonSettings(value:Pogoprotos.Settings.Master.PokemonSettings!) -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder {
            self.pokemonSettings = value
            return self
          }
          public func mergePokemonSettings(value:Pogoprotos.Settings.Master.PokemonSettings) throws -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder {
            if builderResult.hasPokemonSettings {
              builderResult.pokemonSettings = try Pogoprotos.Settings.Master.PokemonSettings.builderWithPrototype(builderResult.pokemonSettings).mergeFrom(value).buildPartial()
            } else {
              builderResult.pokemonSettings = value
            }
            builderResult.hasPokemonSettings = true
            return self
          }
          public func clearPokemonSettings() -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder {
            pokemonSettingsBuilder_ = nil
            builderResult.hasPokemonSettings = false
            builderResult.pokemonSettings = nil
            return self
          }
          public var hasItemSettings:Bool {
               get {
                   return builderResult.hasItemSettings
               }
          }
          public var itemSettings:Pogoprotos.Settings.Master.ItemSettings! {
               get {
                   if itemSettingsBuilder_ != nil {
                      builderResult.itemSettings = itemSettingsBuilder_.getMessage()
                   }
                   return builderResult.itemSettings
               }
               set (value) {
                   builderResult.hasItemSettings = true
                   builderResult.itemSettings = value
               }
          }
          private var itemSettingsBuilder_:Pogoprotos.Settings.Master.ItemSettings.Builder! {
               didSet {
                  builderResult.hasItemSettings = true
               }
          }
          public func getItemSettingsBuilder() -> Pogoprotos.Settings.Master.ItemSettings.Builder {
            if itemSettingsBuilder_ == nil {
               itemSettingsBuilder_ = Pogoprotos.Settings.Master.ItemSettings.Builder()
               builderResult.itemSettings = itemSettingsBuilder_.getMessage()
               if itemSettings != nil {
                  try! itemSettingsBuilder_.mergeFrom(itemSettings)
               }
            }
            return itemSettingsBuilder_
          }
          public func setItemSettings(value:Pogoprotos.Settings.Master.ItemSettings!) -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder {
            self.itemSettings = value
            return self
          }
          public func mergeItemSettings(value:Pogoprotos.Settings.Master.ItemSettings) throws -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder {
            if builderResult.hasItemSettings {
              builderResult.itemSettings = try Pogoprotos.Settings.Master.ItemSettings.builderWithPrototype(builderResult.itemSettings).mergeFrom(value).buildPartial()
            } else {
              builderResult.itemSettings = value
            }
            builderResult.hasItemSettings = true
            return self
          }
          public func clearItemSettings() -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder {
            itemSettingsBuilder_ = nil
            builderResult.hasItemSettings = false
            builderResult.itemSettings = nil
            return self
          }
          public var hasMoveSettings:Bool {
               get {
                   return builderResult.hasMoveSettings
               }
          }
          public var moveSettings:Pogoprotos.Settings.Master.MoveSettings! {
               get {
                   if moveSettingsBuilder_ != nil {
                      builderResult.moveSettings = moveSettingsBuilder_.getMessage()
                   }
                   return builderResult.moveSettings
               }
               set (value) {
                   builderResult.hasMoveSettings = true
                   builderResult.moveSettings = value
               }
          }
          private var moveSettingsBuilder_:Pogoprotos.Settings.Master.MoveSettings.Builder! {
               didSet {
                  builderResult.hasMoveSettings = true
               }
          }
          public func getMoveSettingsBuilder() -> Pogoprotos.Settings.Master.MoveSettings.Builder {
            if moveSettingsBuilder_ == nil {
               moveSettingsBuilder_ = Pogoprotos.Settings.Master.MoveSettings.Builder()
               builderResult.moveSettings = moveSettingsBuilder_.getMessage()
               if moveSettings != nil {
                  try! moveSettingsBuilder_.mergeFrom(moveSettings)
               }
            }
            return moveSettingsBuilder_
          }
          public func setMoveSettings(value:Pogoprotos.Settings.Master.MoveSettings!) -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder {
            self.moveSettings = value
            return self
          }
          public func mergeMoveSettings(value:Pogoprotos.Settings.Master.MoveSettings) throws -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder {
            if builderResult.hasMoveSettings {
              builderResult.moveSettings = try Pogoprotos.Settings.Master.MoveSettings.builderWithPrototype(builderResult.moveSettings).mergeFrom(value).buildPartial()
            } else {
              builderResult.moveSettings = value
            }
            builderResult.hasMoveSettings = true
            return self
          }
          public func clearMoveSettings() -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder {
            moveSettingsBuilder_ = nil
            builderResult.hasMoveSettings = false
            builderResult.moveSettings = nil
            return self
          }
          public var hasMoveSequenceSettings:Bool {
               get {
                   return builderResult.hasMoveSequenceSettings
               }
          }
          public var moveSequenceSettings:Pogoprotos.Settings.Master.MoveSequenceSettings! {
               get {
                   if moveSequenceSettingsBuilder_ != nil {
                      builderResult.moveSequenceSettings = moveSequenceSettingsBuilder_.getMessage()
                   }
                   return builderResult.moveSequenceSettings
               }
               set (value) {
                   builderResult.hasMoveSequenceSettings = true
                   builderResult.moveSequenceSettings = value
               }
          }
          private var moveSequenceSettingsBuilder_:Pogoprotos.Settings.Master.MoveSequenceSettings.Builder! {
               didSet {
                  builderResult.hasMoveSequenceSettings = true
               }
          }
          public func getMoveSequenceSettingsBuilder() -> Pogoprotos.Settings.Master.MoveSequenceSettings.Builder {
            if moveSequenceSettingsBuilder_ == nil {
               moveSequenceSettingsBuilder_ = Pogoprotos.Settings.Master.MoveSequenceSettings.Builder()
               builderResult.moveSequenceSettings = moveSequenceSettingsBuilder_.getMessage()
               if moveSequenceSettings != nil {
                  try! moveSequenceSettingsBuilder_.mergeFrom(moveSequenceSettings)
               }
            }
            return moveSequenceSettingsBuilder_
          }
          public func setMoveSequenceSettings(value:Pogoprotos.Settings.Master.MoveSequenceSettings!) -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder {
            self.moveSequenceSettings = value
            return self
          }
          public func mergeMoveSequenceSettings(value:Pogoprotos.Settings.Master.MoveSequenceSettings) throws -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder {
            if builderResult.hasMoveSequenceSettings {
              builderResult.moveSequenceSettings = try Pogoprotos.Settings.Master.MoveSequenceSettings.builderWithPrototype(builderResult.moveSequenceSettings).mergeFrom(value).buildPartial()
            } else {
              builderResult.moveSequenceSettings = value
            }
            builderResult.hasMoveSequenceSettings = true
            return self
          }
          public func clearMoveSequenceSettings() -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder {
            moveSequenceSettingsBuilder_ = nil
            builderResult.hasMoveSequenceSettings = false
            builderResult.moveSequenceSettings = nil
            return self
          }
          public var hasTypeEffective:Bool {
               get {
                   return builderResult.hasTypeEffective
               }
          }
          public var typeEffective:Pogoprotos.Settings.Master.TypeEffectiveSettings! {
               get {
                   if typeEffectiveBuilder_ != nil {
                      builderResult.typeEffective = typeEffectiveBuilder_.getMessage()
                   }
                   return builderResult.typeEffective
               }
               set (value) {
                   builderResult.hasTypeEffective = true
                   builderResult.typeEffective = value
               }
          }
          private var typeEffectiveBuilder_:Pogoprotos.Settings.Master.TypeEffectiveSettings.Builder! {
               didSet {
                  builderResult.hasTypeEffective = true
               }
          }
          public func getTypeEffectiveBuilder() -> Pogoprotos.Settings.Master.TypeEffectiveSettings.Builder {
            if typeEffectiveBuilder_ == nil {
               typeEffectiveBuilder_ = Pogoprotos.Settings.Master.TypeEffectiveSettings.Builder()
               builderResult.typeEffective = typeEffectiveBuilder_.getMessage()
               if typeEffective != nil {
                  try! typeEffectiveBuilder_.mergeFrom(typeEffective)
               }
            }
            return typeEffectiveBuilder_
          }
          public func setTypeEffective(value:Pogoprotos.Settings.Master.TypeEffectiveSettings!) -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder {
            self.typeEffective = value
            return self
          }
          public func mergeTypeEffective(value:Pogoprotos.Settings.Master.TypeEffectiveSettings) throws -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder {
            if builderResult.hasTypeEffective {
              builderResult.typeEffective = try Pogoprotos.Settings.Master.TypeEffectiveSettings.builderWithPrototype(builderResult.typeEffective).mergeFrom(value).buildPartial()
            } else {
              builderResult.typeEffective = value
            }
            builderResult.hasTypeEffective = true
            return self
          }
          public func clearTypeEffective() -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder {
            typeEffectiveBuilder_ = nil
            builderResult.hasTypeEffective = false
            builderResult.typeEffective = nil
            return self
          }
          public var hasBadgeSettings:Bool {
               get {
                   return builderResult.hasBadgeSettings
               }
          }
          public var badgeSettings:Pogoprotos.Settings.Master.BadgeSettings! {
               get {
                   if badgeSettingsBuilder_ != nil {
                      builderResult.badgeSettings = badgeSettingsBuilder_.getMessage()
                   }
                   return builderResult.badgeSettings
               }
               set (value) {
                   builderResult.hasBadgeSettings = true
                   builderResult.badgeSettings = value
               }
          }
          private var badgeSettingsBuilder_:Pogoprotos.Settings.Master.BadgeSettings.Builder! {
               didSet {
                  builderResult.hasBadgeSettings = true
               }
          }
          public func getBadgeSettingsBuilder() -> Pogoprotos.Settings.Master.BadgeSettings.Builder {
            if badgeSettingsBuilder_ == nil {
               badgeSettingsBuilder_ = Pogoprotos.Settings.Master.BadgeSettings.Builder()
               builderResult.badgeSettings = badgeSettingsBuilder_.getMessage()
               if badgeSettings != nil {
                  try! badgeSettingsBuilder_.mergeFrom(badgeSettings)
               }
            }
            return badgeSettingsBuilder_
          }
          public func setBadgeSettings(value:Pogoprotos.Settings.Master.BadgeSettings!) -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder {
            self.badgeSettings = value
            return self
          }
          public func mergeBadgeSettings(value:Pogoprotos.Settings.Master.BadgeSettings) throws -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder {
            if builderResult.hasBadgeSettings {
              builderResult.badgeSettings = try Pogoprotos.Settings.Master.BadgeSettings.builderWithPrototype(builderResult.badgeSettings).mergeFrom(value).buildPartial()
            } else {
              builderResult.badgeSettings = value
            }
            builderResult.hasBadgeSettings = true
            return self
          }
          public func clearBadgeSettings() -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder {
            badgeSettingsBuilder_ = nil
            builderResult.hasBadgeSettings = false
            builderResult.badgeSettings = nil
            return self
          }
          public var hasCamera:Bool {
               get {
                   return builderResult.hasCamera
               }
          }
          public var camera:Pogoprotos.Settings.Master.CameraSettings! {
               get {
                   if cameraBuilder_ != nil {
                      builderResult.camera = cameraBuilder_.getMessage()
                   }
                   return builderResult.camera
               }
               set (value) {
                   builderResult.hasCamera = true
                   builderResult.camera = value
               }
          }
          private var cameraBuilder_:Pogoprotos.Settings.Master.CameraSettings.Builder! {
               didSet {
                  builderResult.hasCamera = true
               }
          }
          public func getCameraBuilder() -> Pogoprotos.Settings.Master.CameraSettings.Builder {
            if cameraBuilder_ == nil {
               cameraBuilder_ = Pogoprotos.Settings.Master.CameraSettings.Builder()
               builderResult.camera = cameraBuilder_.getMessage()
               if camera != nil {
                  try! cameraBuilder_.mergeFrom(camera)
               }
            }
            return cameraBuilder_
          }
          public func setCamera(value:Pogoprotos.Settings.Master.CameraSettings!) -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder {
            self.camera = value
            return self
          }
          public func mergeCamera(value:Pogoprotos.Settings.Master.CameraSettings) throws -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder {
            if builderResult.hasCamera {
              builderResult.camera = try Pogoprotos.Settings.Master.CameraSettings.builderWithPrototype(builderResult.camera).mergeFrom(value).buildPartial()
            } else {
              builderResult.camera = value
            }
            builderResult.hasCamera = true
            return self
          }
          public func clearCamera() -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder {
            cameraBuilder_ = nil
            builderResult.hasCamera = false
            builderResult.camera = nil
            return self
          }
          public var hasPlayerLevel:Bool {
               get {
                   return builderResult.hasPlayerLevel
               }
          }
          public var playerLevel:Pogoprotos.Settings.Master.PlayerLevelSettings! {
               get {
                   if playerLevelBuilder_ != nil {
                      builderResult.playerLevel = playerLevelBuilder_.getMessage()
                   }
                   return builderResult.playerLevel
               }
               set (value) {
                   builderResult.hasPlayerLevel = true
                   builderResult.playerLevel = value
               }
          }
          private var playerLevelBuilder_:Pogoprotos.Settings.Master.PlayerLevelSettings.Builder! {
               didSet {
                  builderResult.hasPlayerLevel = true
               }
          }
          public func getPlayerLevelBuilder() -> Pogoprotos.Settings.Master.PlayerLevelSettings.Builder {
            if playerLevelBuilder_ == nil {
               playerLevelBuilder_ = Pogoprotos.Settings.Master.PlayerLevelSettings.Builder()
               builderResult.playerLevel = playerLevelBuilder_.getMessage()
               if playerLevel != nil {
                  try! playerLevelBuilder_.mergeFrom(playerLevel)
               }
            }
            return playerLevelBuilder_
          }
          public func setPlayerLevel(value:Pogoprotos.Settings.Master.PlayerLevelSettings!) -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder {
            self.playerLevel = value
            return self
          }
          public func mergePlayerLevel(value:Pogoprotos.Settings.Master.PlayerLevelSettings) throws -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder {
            if builderResult.hasPlayerLevel {
              builderResult.playerLevel = try Pogoprotos.Settings.Master.PlayerLevelSettings.builderWithPrototype(builderResult.playerLevel).mergeFrom(value).buildPartial()
            } else {
              builderResult.playerLevel = value
            }
            builderResult.hasPlayerLevel = true
            return self
          }
          public func clearPlayerLevel() -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder {
            playerLevelBuilder_ = nil
            builderResult.hasPlayerLevel = false
            builderResult.playerLevel = nil
            return self
          }
          public var hasGymLevel:Bool {
               get {
                   return builderResult.hasGymLevel
               }
          }
          public var gymLevel:Pogoprotos.Settings.Master.GymLevelSettings! {
               get {
                   if gymLevelBuilder_ != nil {
                      builderResult.gymLevel = gymLevelBuilder_.getMessage()
                   }
                   return builderResult.gymLevel
               }
               set (value) {
                   builderResult.hasGymLevel = true
                   builderResult.gymLevel = value
               }
          }
          private var gymLevelBuilder_:Pogoprotos.Settings.Master.GymLevelSettings.Builder! {
               didSet {
                  builderResult.hasGymLevel = true
               }
          }
          public func getGymLevelBuilder() -> Pogoprotos.Settings.Master.GymLevelSettings.Builder {
            if gymLevelBuilder_ == nil {
               gymLevelBuilder_ = Pogoprotos.Settings.Master.GymLevelSettings.Builder()
               builderResult.gymLevel = gymLevelBuilder_.getMessage()
               if gymLevel != nil {
                  try! gymLevelBuilder_.mergeFrom(gymLevel)
               }
            }
            return gymLevelBuilder_
          }
          public func setGymLevel(value:Pogoprotos.Settings.Master.GymLevelSettings!) -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder {
            self.gymLevel = value
            return self
          }
          public func mergeGymLevel(value:Pogoprotos.Settings.Master.GymLevelSettings) throws -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder {
            if builderResult.hasGymLevel {
              builderResult.gymLevel = try Pogoprotos.Settings.Master.GymLevelSettings.builderWithPrototype(builderResult.gymLevel).mergeFrom(value).buildPartial()
            } else {
              builderResult.gymLevel = value
            }
            builderResult.hasGymLevel = true
            return self
          }
          public func clearGymLevel() -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder {
            gymLevelBuilder_ = nil
            builderResult.hasGymLevel = false
            builderResult.gymLevel = nil
            return self
          }
          public var hasBattleSettings:Bool {
               get {
                   return builderResult.hasBattleSettings
               }
          }
          public var battleSettings:Pogoprotos.Settings.Master.GymBattleSettings! {
               get {
                   if battleSettingsBuilder_ != nil {
                      builderResult.battleSettings = battleSettingsBuilder_.getMessage()
                   }
                   return builderResult.battleSettings
               }
               set (value) {
                   builderResult.hasBattleSettings = true
                   builderResult.battleSettings = value
               }
          }
          private var battleSettingsBuilder_:Pogoprotos.Settings.Master.GymBattleSettings.Builder! {
               didSet {
                  builderResult.hasBattleSettings = true
               }
          }
          public func getBattleSettingsBuilder() -> Pogoprotos.Settings.Master.GymBattleSettings.Builder {
            if battleSettingsBuilder_ == nil {
               battleSettingsBuilder_ = Pogoprotos.Settings.Master.GymBattleSettings.Builder()
               builderResult.battleSettings = battleSettingsBuilder_.getMessage()
               if battleSettings != nil {
                  try! battleSettingsBuilder_.mergeFrom(battleSettings)
               }
            }
            return battleSettingsBuilder_
          }
          public func setBattleSettings(value:Pogoprotos.Settings.Master.GymBattleSettings!) -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder {
            self.battleSettings = value
            return self
          }
          public func mergeBattleSettings(value:Pogoprotos.Settings.Master.GymBattleSettings) throws -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder {
            if builderResult.hasBattleSettings {
              builderResult.battleSettings = try Pogoprotos.Settings.Master.GymBattleSettings.builderWithPrototype(builderResult.battleSettings).mergeFrom(value).buildPartial()
            } else {
              builderResult.battleSettings = value
            }
            builderResult.hasBattleSettings = true
            return self
          }
          public func clearBattleSettings() -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder {
            battleSettingsBuilder_ = nil
            builderResult.hasBattleSettings = false
            builderResult.battleSettings = nil
            return self
          }
          public var hasEncounterSettings:Bool {
               get {
                   return builderResult.hasEncounterSettings
               }
          }
          public var encounterSettings:Pogoprotos.Settings.Master.EncounterSettings! {
               get {
                   if encounterSettingsBuilder_ != nil {
                      builderResult.encounterSettings = encounterSettingsBuilder_.getMessage()
                   }
                   return builderResult.encounterSettings
               }
               set (value) {
                   builderResult.hasEncounterSettings = true
                   builderResult.encounterSettings = value
               }
          }
          private var encounterSettingsBuilder_:Pogoprotos.Settings.Master.EncounterSettings.Builder! {
               didSet {
                  builderResult.hasEncounterSettings = true
               }
          }
          public func getEncounterSettingsBuilder() -> Pogoprotos.Settings.Master.EncounterSettings.Builder {
            if encounterSettingsBuilder_ == nil {
               encounterSettingsBuilder_ = Pogoprotos.Settings.Master.EncounterSettings.Builder()
               builderResult.encounterSettings = encounterSettingsBuilder_.getMessage()
               if encounterSettings != nil {
                  try! encounterSettingsBuilder_.mergeFrom(encounterSettings)
               }
            }
            return encounterSettingsBuilder_
          }
          public func setEncounterSettings(value:Pogoprotos.Settings.Master.EncounterSettings!) -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder {
            self.encounterSettings = value
            return self
          }
          public func mergeEncounterSettings(value:Pogoprotos.Settings.Master.EncounterSettings) throws -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder {
            if builderResult.hasEncounterSettings {
              builderResult.encounterSettings = try Pogoprotos.Settings.Master.EncounterSettings.builderWithPrototype(builderResult.encounterSettings).mergeFrom(value).buildPartial()
            } else {
              builderResult.encounterSettings = value
            }
            builderResult.hasEncounterSettings = true
            return self
          }
          public func clearEncounterSettings() -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder {
            encounterSettingsBuilder_ = nil
            builderResult.hasEncounterSettings = false
            builderResult.encounterSettings = nil
            return self
          }
          public var hasIapItemDisplay:Bool {
               get {
                   return builderResult.hasIapItemDisplay
               }
          }
          public var iapItemDisplay:Pogoprotos.Settings.Master.IapItemDisplay! {
               get {
                   if iapItemDisplayBuilder_ != nil {
                      builderResult.iapItemDisplay = iapItemDisplayBuilder_.getMessage()
                   }
                   return builderResult.iapItemDisplay
               }
               set (value) {
                   builderResult.hasIapItemDisplay = true
                   builderResult.iapItemDisplay = value
               }
          }
          private var iapItemDisplayBuilder_:Pogoprotos.Settings.Master.IapItemDisplay.Builder! {
               didSet {
                  builderResult.hasIapItemDisplay = true
               }
          }
          public func getIapItemDisplayBuilder() -> Pogoprotos.Settings.Master.IapItemDisplay.Builder {
            if iapItemDisplayBuilder_ == nil {
               iapItemDisplayBuilder_ = Pogoprotos.Settings.Master.IapItemDisplay.Builder()
               builderResult.iapItemDisplay = iapItemDisplayBuilder_.getMessage()
               if iapItemDisplay != nil {
                  try! iapItemDisplayBuilder_.mergeFrom(iapItemDisplay)
               }
            }
            return iapItemDisplayBuilder_
          }
          public func setIapItemDisplay(value:Pogoprotos.Settings.Master.IapItemDisplay!) -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder {
            self.iapItemDisplay = value
            return self
          }
          public func mergeIapItemDisplay(value:Pogoprotos.Settings.Master.IapItemDisplay) throws -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder {
            if builderResult.hasIapItemDisplay {
              builderResult.iapItemDisplay = try Pogoprotos.Settings.Master.IapItemDisplay.builderWithPrototype(builderResult.iapItemDisplay).mergeFrom(value).buildPartial()
            } else {
              builderResult.iapItemDisplay = value
            }
            builderResult.hasIapItemDisplay = true
            return self
          }
          public func clearIapItemDisplay() -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder {
            iapItemDisplayBuilder_ = nil
            builderResult.hasIapItemDisplay = false
            builderResult.iapItemDisplay = nil
            return self
          }
          public var hasIapSettings:Bool {
               get {
                   return builderResult.hasIapSettings
               }
          }
          public var iapSettings:Pogoprotos.Settings.Master.IapSettings! {
               get {
                   if iapSettingsBuilder_ != nil {
                      builderResult.iapSettings = iapSettingsBuilder_.getMessage()
                   }
                   return builderResult.iapSettings
               }
               set (value) {
                   builderResult.hasIapSettings = true
                   builderResult.iapSettings = value
               }
          }
          private var iapSettingsBuilder_:Pogoprotos.Settings.Master.IapSettings.Builder! {
               didSet {
                  builderResult.hasIapSettings = true
               }
          }
          public func getIapSettingsBuilder() -> Pogoprotos.Settings.Master.IapSettings.Builder {
            if iapSettingsBuilder_ == nil {
               iapSettingsBuilder_ = Pogoprotos.Settings.Master.IapSettings.Builder()
               builderResult.iapSettings = iapSettingsBuilder_.getMessage()
               if iapSettings != nil {
                  try! iapSettingsBuilder_.mergeFrom(iapSettings)
               }
            }
            return iapSettingsBuilder_
          }
          public func setIapSettings(value:Pogoprotos.Settings.Master.IapSettings!) -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder {
            self.iapSettings = value
            return self
          }
          public func mergeIapSettings(value:Pogoprotos.Settings.Master.IapSettings) throws -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder {
            if builderResult.hasIapSettings {
              builderResult.iapSettings = try Pogoprotos.Settings.Master.IapSettings.builderWithPrototype(builderResult.iapSettings).mergeFrom(value).buildPartial()
            } else {
              builderResult.iapSettings = value
            }
            builderResult.hasIapSettings = true
            return self
          }
          public func clearIapSettings() -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder {
            iapSettingsBuilder_ = nil
            builderResult.hasIapSettings = false
            builderResult.iapSettings = nil
            return self
          }
          public var hasPokemonUpgrades:Bool {
               get {
                   return builderResult.hasPokemonUpgrades
               }
          }
          public var pokemonUpgrades:Pogoprotos.Settings.Master.PokemonUpgradeSettings! {
               get {
                   if pokemonUpgradesBuilder_ != nil {
                      builderResult.pokemonUpgrades = pokemonUpgradesBuilder_.getMessage()
                   }
                   return builderResult.pokemonUpgrades
               }
               set (value) {
                   builderResult.hasPokemonUpgrades = true
                   builderResult.pokemonUpgrades = value
               }
          }
          private var pokemonUpgradesBuilder_:Pogoprotos.Settings.Master.PokemonUpgradeSettings.Builder! {
               didSet {
                  builderResult.hasPokemonUpgrades = true
               }
          }
          public func getPokemonUpgradesBuilder() -> Pogoprotos.Settings.Master.PokemonUpgradeSettings.Builder {
            if pokemonUpgradesBuilder_ == nil {
               pokemonUpgradesBuilder_ = Pogoprotos.Settings.Master.PokemonUpgradeSettings.Builder()
               builderResult.pokemonUpgrades = pokemonUpgradesBuilder_.getMessage()
               if pokemonUpgrades != nil {
                  try! pokemonUpgradesBuilder_.mergeFrom(pokemonUpgrades)
               }
            }
            return pokemonUpgradesBuilder_
          }
          public func setPokemonUpgrades(value:Pogoprotos.Settings.Master.PokemonUpgradeSettings!) -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder {
            self.pokemonUpgrades = value
            return self
          }
          public func mergePokemonUpgrades(value:Pogoprotos.Settings.Master.PokemonUpgradeSettings) throws -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder {
            if builderResult.hasPokemonUpgrades {
              builderResult.pokemonUpgrades = try Pogoprotos.Settings.Master.PokemonUpgradeSettings.builderWithPrototype(builderResult.pokemonUpgrades).mergeFrom(value).buildPartial()
            } else {
              builderResult.pokemonUpgrades = value
            }
            builderResult.hasPokemonUpgrades = true
            return self
          }
          public func clearPokemonUpgrades() -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder {
            pokemonUpgradesBuilder_ = nil
            builderResult.hasPokemonUpgrades = false
            builderResult.pokemonUpgrades = nil
            return self
          }
          public var hasEquippedBadges:Bool {
               get {
                   return builderResult.hasEquippedBadges
               }
          }
          public var equippedBadges:Pogoprotos.Settings.Master.EquippedBadgeSettings! {
               get {
                   if equippedBadgesBuilder_ != nil {
                      builderResult.equippedBadges = equippedBadgesBuilder_.getMessage()
                   }
                   return builderResult.equippedBadges
               }
               set (value) {
                   builderResult.hasEquippedBadges = true
                   builderResult.equippedBadges = value
               }
          }
          private var equippedBadgesBuilder_:Pogoprotos.Settings.Master.EquippedBadgeSettings.Builder! {
               didSet {
                  builderResult.hasEquippedBadges = true
               }
          }
          public func getEquippedBadgesBuilder() -> Pogoprotos.Settings.Master.EquippedBadgeSettings.Builder {
            if equippedBadgesBuilder_ == nil {
               equippedBadgesBuilder_ = Pogoprotos.Settings.Master.EquippedBadgeSettings.Builder()
               builderResult.equippedBadges = equippedBadgesBuilder_.getMessage()
               if equippedBadges != nil {
                  try! equippedBadgesBuilder_.mergeFrom(equippedBadges)
               }
            }
            return equippedBadgesBuilder_
          }
          public func setEquippedBadges(value:Pogoprotos.Settings.Master.EquippedBadgeSettings!) -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder {
            self.equippedBadges = value
            return self
          }
          public func mergeEquippedBadges(value:Pogoprotos.Settings.Master.EquippedBadgeSettings) throws -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder {
            if builderResult.hasEquippedBadges {
              builderResult.equippedBadges = try Pogoprotos.Settings.Master.EquippedBadgeSettings.builderWithPrototype(builderResult.equippedBadges).mergeFrom(value).buildPartial()
            } else {
              builderResult.equippedBadges = value
            }
            builderResult.hasEquippedBadges = true
            return self
          }
          public func clearEquippedBadges() -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder {
            equippedBadgesBuilder_ = nil
            builderResult.hasEquippedBadges = false
            builderResult.equippedBadges = nil
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          override public func clear() -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder {
            builderResult = Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate()
            return self
          }
          override public func clone() throws -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder {
            return try Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.builderWithPrototype(builderResult)
          }
          override public func build() throws -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate {
               try checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate {
            let returnMe:Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate = builderResult
            return returnMe
          }
          public func mergeFrom(other:Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate) throws -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder {
            if other == Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate() {
             return self
            }
            if other.hasTemplateId {
                 templateId = other.templateId
            }
            if (other.hasPokemonSettings) {
                try mergePokemonSettings(other.pokemonSettings)
            }
            if (other.hasItemSettings) {
                try mergeItemSettings(other.itemSettings)
            }
            if (other.hasMoveSettings) {
                try mergeMoveSettings(other.moveSettings)
            }
            if (other.hasMoveSequenceSettings) {
                try mergeMoveSequenceSettings(other.moveSequenceSettings)
            }
            if (other.hasTypeEffective) {
                try mergeTypeEffective(other.typeEffective)
            }
            if (other.hasBadgeSettings) {
                try mergeBadgeSettings(other.badgeSettings)
            }
            if (other.hasCamera) {
                try mergeCamera(other.camera)
            }
            if (other.hasPlayerLevel) {
                try mergePlayerLevel(other.playerLevel)
            }
            if (other.hasGymLevel) {
                try mergeGymLevel(other.gymLevel)
            }
            if (other.hasBattleSettings) {
                try mergeBattleSettings(other.battleSettings)
            }
            if (other.hasEncounterSettings) {
                try mergeEncounterSettings(other.encounterSettings)
            }
            if (other.hasIapItemDisplay) {
                try mergeIapItemDisplay(other.iapItemDisplay)
            }
            if (other.hasIapSettings) {
                try mergeIapSettings(other.iapSettings)
            }
            if (other.hasPokemonUpgrades) {
                try mergePokemonUpgrades(other.pokemonUpgrades)
            }
            if (other.hasEquippedBadges) {
                try mergeEquippedBadges(other.equippedBadges)
            }
            try mergeUnknownFields(other.unknownFields)
            return self
          }
          override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder {
               return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              let protobufTag = try input.readTag()
              switch protobufTag {
              case 0: 
                self.unknownFields = try unknownFieldsBuilder.build()
                return self

              case 10:
                templateId = try input.readString()

              case 18:
                let subBuilder:Pogoprotos.Settings.Master.PokemonSettings.Builder = Pogoprotos.Settings.Master.PokemonSettings.Builder()
                if hasPokemonSettings {
                  try subBuilder.mergeFrom(pokemonSettings)
                }
                try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                pokemonSettings = subBuilder.buildPartial()

              case 26:
                let subBuilder:Pogoprotos.Settings.Master.ItemSettings.Builder = Pogoprotos.Settings.Master.ItemSettings.Builder()
                if hasItemSettings {
                  try subBuilder.mergeFrom(itemSettings)
                }
                try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                itemSettings = subBuilder.buildPartial()

              case 34:
                let subBuilder:Pogoprotos.Settings.Master.MoveSettings.Builder = Pogoprotos.Settings.Master.MoveSettings.Builder()
                if hasMoveSettings {
                  try subBuilder.mergeFrom(moveSettings)
                }
                try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                moveSettings = subBuilder.buildPartial()

              case 42:
                let subBuilder:Pogoprotos.Settings.Master.MoveSequenceSettings.Builder = Pogoprotos.Settings.Master.MoveSequenceSettings.Builder()
                if hasMoveSequenceSettings {
                  try subBuilder.mergeFrom(moveSequenceSettings)
                }
                try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                moveSequenceSettings = subBuilder.buildPartial()

              case 66:
                let subBuilder:Pogoprotos.Settings.Master.TypeEffectiveSettings.Builder = Pogoprotos.Settings.Master.TypeEffectiveSettings.Builder()
                if hasTypeEffective {
                  try subBuilder.mergeFrom(typeEffective)
                }
                try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                typeEffective = subBuilder.buildPartial()

              case 82:
                let subBuilder:Pogoprotos.Settings.Master.BadgeSettings.Builder = Pogoprotos.Settings.Master.BadgeSettings.Builder()
                if hasBadgeSettings {
                  try subBuilder.mergeFrom(badgeSettings)
                }
                try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                badgeSettings = subBuilder.buildPartial()

              case 90:
                let subBuilder:Pogoprotos.Settings.Master.CameraSettings.Builder = Pogoprotos.Settings.Master.CameraSettings.Builder()
                if hasCamera {
                  try subBuilder.mergeFrom(camera)
                }
                try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                camera = subBuilder.buildPartial()

              case 98:
                let subBuilder:Pogoprotos.Settings.Master.PlayerLevelSettings.Builder = Pogoprotos.Settings.Master.PlayerLevelSettings.Builder()
                if hasPlayerLevel {
                  try subBuilder.mergeFrom(playerLevel)
                }
                try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                playerLevel = subBuilder.buildPartial()

              case 106:
                let subBuilder:Pogoprotos.Settings.Master.GymLevelSettings.Builder = Pogoprotos.Settings.Master.GymLevelSettings.Builder()
                if hasGymLevel {
                  try subBuilder.mergeFrom(gymLevel)
                }
                try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                gymLevel = subBuilder.buildPartial()

              case 114:
                let subBuilder:Pogoprotos.Settings.Master.GymBattleSettings.Builder = Pogoprotos.Settings.Master.GymBattleSettings.Builder()
                if hasBattleSettings {
                  try subBuilder.mergeFrom(battleSettings)
                }
                try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                battleSettings = subBuilder.buildPartial()

              case 122:
                let subBuilder:Pogoprotos.Settings.Master.EncounterSettings.Builder = Pogoprotos.Settings.Master.EncounterSettings.Builder()
                if hasEncounterSettings {
                  try subBuilder.mergeFrom(encounterSettings)
                }
                try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                encounterSettings = subBuilder.buildPartial()

              case 130:
                let subBuilder:Pogoprotos.Settings.Master.IapItemDisplay.Builder = Pogoprotos.Settings.Master.IapItemDisplay.Builder()
                if hasIapItemDisplay {
                  try subBuilder.mergeFrom(iapItemDisplay)
                }
                try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                iapItemDisplay = subBuilder.buildPartial()

              case 138:
                let subBuilder:Pogoprotos.Settings.Master.IapSettings.Builder = Pogoprotos.Settings.Master.IapSettings.Builder()
                if hasIapSettings {
                  try subBuilder.mergeFrom(iapSettings)
                }
                try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                iapSettings = subBuilder.buildPartial()

              case 146:
                let subBuilder:Pogoprotos.Settings.Master.PokemonUpgradeSettings.Builder = Pogoprotos.Settings.Master.PokemonUpgradeSettings.Builder()
                if hasPokemonUpgrades {
                  try subBuilder.mergeFrom(pokemonUpgrades)
                }
                try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                pokemonUpgrades = subBuilder.buildPartial()

              case 154:
                let subBuilder:Pogoprotos.Settings.Master.EquippedBadgeSettings.Builder = Pogoprotos.Settings.Master.EquippedBadgeSettings.Builder()
                if hasEquippedBadges {
                  try subBuilder.mergeFrom(equippedBadges)
                }
                try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                equippedBadges = subBuilder.buildPartial()

              default:
                if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                   unknownFields = try unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
          override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder {
            let resultDecodedBuilder = Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder()
            if let jsonValueTemplateId = jsonMap["templateId"] as? String {
              resultDecodedBuilder.templateId = jsonValueTemplateId
            }
            if let jsonValuePokemonSettings = jsonMap["pokemonSettings"] as? Dictionary<String,AnyObject> {
              resultDecodedBuilder.pokemonSettings = try Pogoprotos.Settings.Master.PokemonSettings.Builder.decodeToBuilder(jsonValuePokemonSettings).build()

            }
            if let jsonValueItemSettings = jsonMap["itemSettings"] as? Dictionary<String,AnyObject> {
              resultDecodedBuilder.itemSettings = try Pogoprotos.Settings.Master.ItemSettings.Builder.decodeToBuilder(jsonValueItemSettings).build()

            }
            if let jsonValueMoveSettings = jsonMap["moveSettings"] as? Dictionary<String,AnyObject> {
              resultDecodedBuilder.moveSettings = try Pogoprotos.Settings.Master.MoveSettings.Builder.decodeToBuilder(jsonValueMoveSettings).build()

            }
            if let jsonValueMoveSequenceSettings = jsonMap["moveSequenceSettings"] as? Dictionary<String,AnyObject> {
              resultDecodedBuilder.moveSequenceSettings = try Pogoprotos.Settings.Master.MoveSequenceSettings.Builder.decodeToBuilder(jsonValueMoveSequenceSettings).build()

            }
            if let jsonValueTypeEffective = jsonMap["typeEffective"] as? Dictionary<String,AnyObject> {
              resultDecodedBuilder.typeEffective = try Pogoprotos.Settings.Master.TypeEffectiveSettings.Builder.decodeToBuilder(jsonValueTypeEffective).build()

            }
            if let jsonValueBadgeSettings = jsonMap["badgeSettings"] as? Dictionary<String,AnyObject> {
              resultDecodedBuilder.badgeSettings = try Pogoprotos.Settings.Master.BadgeSettings.Builder.decodeToBuilder(jsonValueBadgeSettings).build()

            }
            if let jsonValueCamera = jsonMap["camera"] as? Dictionary<String,AnyObject> {
              resultDecodedBuilder.camera = try Pogoprotos.Settings.Master.CameraSettings.Builder.decodeToBuilder(jsonValueCamera).build()

            }
            if let jsonValuePlayerLevel = jsonMap["playerLevel"] as? Dictionary<String,AnyObject> {
              resultDecodedBuilder.playerLevel = try Pogoprotos.Settings.Master.PlayerLevelSettings.Builder.decodeToBuilder(jsonValuePlayerLevel).build()

            }
            if let jsonValueGymLevel = jsonMap["gymLevel"] as? Dictionary<String,AnyObject> {
              resultDecodedBuilder.gymLevel = try Pogoprotos.Settings.Master.GymLevelSettings.Builder.decodeToBuilder(jsonValueGymLevel).build()

            }
            if let jsonValueBattleSettings = jsonMap["battleSettings"] as? Dictionary<String,AnyObject> {
              resultDecodedBuilder.battleSettings = try Pogoprotos.Settings.Master.GymBattleSettings.Builder.decodeToBuilder(jsonValueBattleSettings).build()

            }
            if let jsonValueEncounterSettings = jsonMap["encounterSettings"] as? Dictionary<String,AnyObject> {
              resultDecodedBuilder.encounterSettings = try Pogoprotos.Settings.Master.EncounterSettings.Builder.decodeToBuilder(jsonValueEncounterSettings).build()

            }
            if let jsonValueIapItemDisplay = jsonMap["iapItemDisplay"] as? Dictionary<String,AnyObject> {
              resultDecodedBuilder.iapItemDisplay = try Pogoprotos.Settings.Master.IapItemDisplay.Builder.decodeToBuilder(jsonValueIapItemDisplay).build()

            }
            if let jsonValueIapSettings = jsonMap["iapSettings"] as? Dictionary<String,AnyObject> {
              resultDecodedBuilder.iapSettings = try Pogoprotos.Settings.Master.IapSettings.Builder.decodeToBuilder(jsonValueIapSettings).build()

            }
            if let jsonValuePokemonUpgrades = jsonMap["pokemonUpgrades"] as? Dictionary<String,AnyObject> {
              resultDecodedBuilder.pokemonUpgrades = try Pogoprotos.Settings.Master.PokemonUpgradeSettings.Builder.decodeToBuilder(jsonValuePokemonUpgrades).build()

            }
            if let jsonValueEquippedBadges = jsonMap["equippedBadges"] as? Dictionary<String,AnyObject> {
              resultDecodedBuilder.equippedBadges = try Pogoprotos.Settings.Master.EquippedBadgeSettings.Builder.decodeToBuilder(jsonValueEquippedBadges).build()

            }
            return resultDecodedBuilder
          }
          override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder {
            let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
              throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
            }
            return try Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder.decodeToBuilder(jsDataCast)
          }
        }

      }

    //Nested type declaration end

    public private(set) var hasSuccess:Bool = false
    public private(set) var success:Bool = false

    public private(set) var itemTemplates:Array<Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate>  = Array<Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate>()
    public private(set) var hasTimestampMs:Bool = false
    public private(set) var timestampMs:UInt64 = UInt64(0)

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasSuccess {
        try output.writeBool(1, value:success)
      }
      for oneElementItemTemplates in itemTemplates {
          try output.writeMessage(2, value:oneElementItemTemplates)
      }
      if hasTimestampMs {
        try output.writeUInt64(3, value:timestampMs)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasSuccess {
        serialize_size += success.computeBoolSize(1)
      }
      for oneElementItemTemplates in itemTemplates {
          serialize_size += oneElementItemTemplates.computeMessageSize(2)
      }
      if hasTimestampMs {
        serialize_size += timestampMs.computeUInt64Size(3)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse> {
      var mergedArray = Array<Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse? {
      return try Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse {
      return try Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Networking.Responses.DownloadItemTemplatesResponseRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse {
      return try Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse {
      return try Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse {
      return try Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse {
      return try Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse {
      return try Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.Builder {
      return Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.classBuilder() as! Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.Builder
    }
    public func getBuilder() -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.Builder {
      return classBuilder() as! Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.Builder {
      return try Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse) throws -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.Builder {
      return try Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasSuccess {
        jsonMap["success"] = success
      }
      if !itemTemplates.isEmpty {
        var jsonArrayItemTemplates:Array<Dictionary<String,AnyObject>> = []
          for oneValueItemTemplates in itemTemplates {
            let ecodedMessageItemTemplates = try oneValueItemTemplates.encode()
            jsonArrayItemTemplates += [ecodedMessageItemTemplates]
          }
        jsonMap["itemTemplates"] = jsonArrayItemTemplates
      }
      if hasTimestampMs {
        jsonMap["timestampMs"] = "\(timestampMs)"
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse {
      return try Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse {
      return try Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasSuccess {
        output += "\(indent) success: \(success) \n"
      }
      var itemTemplatesElementIndex:Int = 0
      for oneElementItemTemplates in itemTemplates {
          output += "\(indent) itemTemplates[\(itemTemplatesElementIndex)] {\n"
          output += try oneElementItemTemplates.getDescription("\(indent)  ")
          output += "\(indent)}\n"
          itemTemplatesElementIndex += 1
      }
      if hasTimestampMs {
        output += "\(indent) timestampMs: \(timestampMs) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasSuccess {
               hashCode = (hashCode &* 31) &+ success.hashValue
            }
            for oneElementItemTemplates in itemTemplates {
                hashCode = (hashCode &* 31) &+ oneElementItemTemplates.hashValue
            }
            if hasTimestampMs {
               hashCode = (hashCode &* 31) &+ timestampMs.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse"
    }
    override public func className() -> String {
        return "Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse = Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse()
      public func getMessage() -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasSuccess:Bool {
           get {
                return builderResult.hasSuccess
           }
      }
      public var success:Bool {
           get {
                return builderResult.success
           }
           set (value) {
               builderResult.hasSuccess = true
               builderResult.success = value
           }
      }
      public func setSuccess(value:Bool) -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.Builder {
        self.success = value
        return self
      }
      public func clearSuccess() -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.Builder{
           builderResult.hasSuccess = false
           builderResult.success = false
           return self
      }
      public var itemTemplates:Array<Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate> {
           get {
               return builderResult.itemTemplates
           }
           set (value) {
               builderResult.itemTemplates = value
           }
      }
      public func setItemTemplates(value:Array<Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate>) -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.Builder {
        self.itemTemplates = value
        return self
      }
      public func clearItemTemplates() -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.Builder {
        builderResult.itemTemplates.removeAll(keepCapacity: false)
        return self
      }
      public var hasTimestampMs:Bool {
           get {
                return builderResult.hasTimestampMs
           }
      }
      public var timestampMs:UInt64 {
           get {
                return builderResult.timestampMs
           }
           set (value) {
               builderResult.hasTimestampMs = true
               builderResult.timestampMs = value
           }
      }
      public func setTimestampMs(value:UInt64) -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.Builder {
        self.timestampMs = value
        return self
      }
      public func clearTimestampMs() -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.Builder{
           builderResult.hasTimestampMs = false
           builderResult.timestampMs = UInt64(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.Builder {
        builderResult = Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse()
        return self
      }
      override public func clone() throws -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.Builder {
        return try Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse {
        let returnMe:Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse) throws -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.Builder {
        if other == Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse() {
         return self
        }
        if other.hasSuccess {
             success = other.success
        }
        if !other.itemTemplates.isEmpty  {
           builderResult.itemTemplates += other.itemTemplates
        }
        if other.hasTimestampMs {
             timestampMs = other.timestampMs
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            success = try input.readBool()

          case 18:
            let subBuilder = Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            itemTemplates += [subBuilder.buildPartial()]

          case 24:
            timestampMs = try input.readUInt64()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.Builder {
        let resultDecodedBuilder = Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.Builder()
        if let jsonValueSuccess = jsonMap["success"] as? Bool {
          resultDecodedBuilder.success = jsonValueSuccess
        }
        if let jsonValueItemTemplates = jsonMap["itemTemplates"] as? Array<Dictionary<String,AnyObject>> {
          var jsonArrayItemTemplates:Array<Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate> = []
          for oneValueItemTemplates in jsonValueItemTemplates {
            let messageFromStringItemTemplates = try Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.ItemTemplate.Builder.decodeToBuilder(oneValueItemTemplates).build()

            jsonArrayItemTemplates += [messageFromStringItemTemplates]
          }
          resultDecodedBuilder.itemTemplates = jsonArrayItemTemplates
        }
        if let jsonValueTimestampMs = jsonMap["timestampMs"] as? String {
          resultDecodedBuilder.timestampMs = UInt64(jsonValueTimestampMs)!
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Networking.Responses.DownloadItemTemplatesResponse.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
