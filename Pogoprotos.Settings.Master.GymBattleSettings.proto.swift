// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "GymBattleSettings.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Pogoprotos { public struct Settings { public struct Master { }}}

public func == (lhs: Pogoprotos.Settings.Master.GymBattleSettings, rhs: Pogoprotos.Settings.Master.GymBattleSettings) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasEnergyPerSec == rhs.hasEnergyPerSec) && (!lhs.hasEnergyPerSec || lhs.energyPerSec == rhs.energyPerSec)
  fieldCheck = fieldCheck && (lhs.hasDodgeEnergyCost == rhs.hasDodgeEnergyCost) && (!lhs.hasDodgeEnergyCost || lhs.dodgeEnergyCost == rhs.dodgeEnergyCost)
  fieldCheck = fieldCheck && (lhs.hasRetargetSeconds == rhs.hasRetargetSeconds) && (!lhs.hasRetargetSeconds || lhs.retargetSeconds == rhs.retargetSeconds)
  fieldCheck = fieldCheck && (lhs.hasEnemyAttackInterval == rhs.hasEnemyAttackInterval) && (!lhs.hasEnemyAttackInterval || lhs.enemyAttackInterval == rhs.enemyAttackInterval)
  fieldCheck = fieldCheck && (lhs.hasAttackServerInterval == rhs.hasAttackServerInterval) && (!lhs.hasAttackServerInterval || lhs.attackServerInterval == rhs.attackServerInterval)
  fieldCheck = fieldCheck && (lhs.hasRoundDurationSeconds == rhs.hasRoundDurationSeconds) && (!lhs.hasRoundDurationSeconds || lhs.roundDurationSeconds == rhs.roundDurationSeconds)
  fieldCheck = fieldCheck && (lhs.hasBonusTimePerAllySeconds == rhs.hasBonusTimePerAllySeconds) && (!lhs.hasBonusTimePerAllySeconds || lhs.bonusTimePerAllySeconds == rhs.bonusTimePerAllySeconds)
  fieldCheck = fieldCheck && (lhs.hasMaximumAttackersPerBattle == rhs.hasMaximumAttackersPerBattle) && (!lhs.hasMaximumAttackersPerBattle || lhs.maximumAttackersPerBattle == rhs.maximumAttackersPerBattle)
  fieldCheck = fieldCheck && (lhs.hasSameTypeAttackBonusMultiplier == rhs.hasSameTypeAttackBonusMultiplier) && (!lhs.hasSameTypeAttackBonusMultiplier || lhs.sameTypeAttackBonusMultiplier == rhs.sameTypeAttackBonusMultiplier)
  fieldCheck = fieldCheck && (lhs.hasMaximumEnergy == rhs.hasMaximumEnergy) && (!lhs.hasMaximumEnergy || lhs.maximumEnergy == rhs.maximumEnergy)
  fieldCheck = fieldCheck && (lhs.hasEnergyDeltaPerHealthLost == rhs.hasEnergyDeltaPerHealthLost) && (!lhs.hasEnergyDeltaPerHealthLost || lhs.energyDeltaPerHealthLost == rhs.energyDeltaPerHealthLost)
  fieldCheck = fieldCheck && (lhs.hasDodgeDurationMs == rhs.hasDodgeDurationMs) && (!lhs.hasDodgeDurationMs || lhs.dodgeDurationMs == rhs.dodgeDurationMs)
  fieldCheck = fieldCheck && (lhs.hasMinimumPlayerLevel == rhs.hasMinimumPlayerLevel) && (!lhs.hasMinimumPlayerLevel || lhs.minimumPlayerLevel == rhs.minimumPlayerLevel)
  fieldCheck = fieldCheck && (lhs.hasSwapDurationMs == rhs.hasSwapDurationMs) && (!lhs.hasSwapDurationMs || lhs.swapDurationMs == rhs.swapDurationMs)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Pogoprotos.Settings.Master {
  public struct GymBattleSettingsRoot {
    public static var sharedInstance : GymBattleSettingsRoot {
     struct Static {
         static let instance : GymBattleSettingsRoot = GymBattleSettingsRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class GymBattleSettings : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasEnergyPerSec:Bool = false
    public private(set) var energyPerSec:Float = Float(0)

    public private(set) var hasDodgeEnergyCost:Bool = false
    public private(set) var dodgeEnergyCost:Float = Float(0)

    public private(set) var hasRetargetSeconds:Bool = false
    public private(set) var retargetSeconds:Float = Float(0)

    public private(set) var hasEnemyAttackInterval:Bool = false
    public private(set) var enemyAttackInterval:Float = Float(0)

    public private(set) var hasAttackServerInterval:Bool = false
    public private(set) var attackServerInterval:Float = Float(0)

    public private(set) var hasRoundDurationSeconds:Bool = false
    public private(set) var roundDurationSeconds:Float = Float(0)

    public private(set) var hasBonusTimePerAllySeconds:Bool = false
    public private(set) var bonusTimePerAllySeconds:Float = Float(0)

    public private(set) var hasMaximumAttackersPerBattle:Bool = false
    public private(set) var maximumAttackersPerBattle:Int32 = Int32(0)

    public private(set) var hasSameTypeAttackBonusMultiplier:Bool = false
    public private(set) var sameTypeAttackBonusMultiplier:Float = Float(0)

    public private(set) var hasMaximumEnergy:Bool = false
    public private(set) var maximumEnergy:Int32 = Int32(0)

    public private(set) var hasEnergyDeltaPerHealthLost:Bool = false
    public private(set) var energyDeltaPerHealthLost:Float = Float(0)

    public private(set) var hasDodgeDurationMs:Bool = false
    public private(set) var dodgeDurationMs:Int32 = Int32(0)

    public private(set) var hasMinimumPlayerLevel:Bool = false
    public private(set) var minimumPlayerLevel:Int32 = Int32(0)

    public private(set) var hasSwapDurationMs:Bool = false
    public private(set) var swapDurationMs:Int32 = Int32(0)

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasEnergyPerSec {
        try output.writeFloat(1, value:energyPerSec)
      }
      if hasDodgeEnergyCost {
        try output.writeFloat(2, value:dodgeEnergyCost)
      }
      if hasRetargetSeconds {
        try output.writeFloat(3, value:retargetSeconds)
      }
      if hasEnemyAttackInterval {
        try output.writeFloat(4, value:enemyAttackInterval)
      }
      if hasAttackServerInterval {
        try output.writeFloat(5, value:attackServerInterval)
      }
      if hasRoundDurationSeconds {
        try output.writeFloat(6, value:roundDurationSeconds)
      }
      if hasBonusTimePerAllySeconds {
        try output.writeFloat(7, value:bonusTimePerAllySeconds)
      }
      if hasMaximumAttackersPerBattle {
        try output.writeInt32(8, value:maximumAttackersPerBattle)
      }
      if hasSameTypeAttackBonusMultiplier {
        try output.writeFloat(9, value:sameTypeAttackBonusMultiplier)
      }
      if hasMaximumEnergy {
        try output.writeInt32(10, value:maximumEnergy)
      }
      if hasEnergyDeltaPerHealthLost {
        try output.writeFloat(11, value:energyDeltaPerHealthLost)
      }
      if hasDodgeDurationMs {
        try output.writeInt32(12, value:dodgeDurationMs)
      }
      if hasMinimumPlayerLevel {
        try output.writeInt32(13, value:minimumPlayerLevel)
      }
      if hasSwapDurationMs {
        try output.writeInt32(14, value:swapDurationMs)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasEnergyPerSec {
        serialize_size += energyPerSec.computeFloatSize(1)
      }
      if hasDodgeEnergyCost {
        serialize_size += dodgeEnergyCost.computeFloatSize(2)
      }
      if hasRetargetSeconds {
        serialize_size += retargetSeconds.computeFloatSize(3)
      }
      if hasEnemyAttackInterval {
        serialize_size += enemyAttackInterval.computeFloatSize(4)
      }
      if hasAttackServerInterval {
        serialize_size += attackServerInterval.computeFloatSize(5)
      }
      if hasRoundDurationSeconds {
        serialize_size += roundDurationSeconds.computeFloatSize(6)
      }
      if hasBonusTimePerAllySeconds {
        serialize_size += bonusTimePerAllySeconds.computeFloatSize(7)
      }
      if hasMaximumAttackersPerBattle {
        serialize_size += maximumAttackersPerBattle.computeInt32Size(8)
      }
      if hasSameTypeAttackBonusMultiplier {
        serialize_size += sameTypeAttackBonusMultiplier.computeFloatSize(9)
      }
      if hasMaximumEnergy {
        serialize_size += maximumEnergy.computeInt32Size(10)
      }
      if hasEnergyDeltaPerHealthLost {
        serialize_size += energyDeltaPerHealthLost.computeFloatSize(11)
      }
      if hasDodgeDurationMs {
        serialize_size += dodgeDurationMs.computeInt32Size(12)
      }
      if hasMinimumPlayerLevel {
        serialize_size += minimumPlayerLevel.computeInt32Size(13)
      }
      if hasSwapDurationMs {
        serialize_size += swapDurationMs.computeInt32Size(14)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Settings.Master.GymBattleSettings> {
      var mergedArray = Array<Pogoprotos.Settings.Master.GymBattleSettings>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.Master.GymBattleSettings? {
      return try Pogoprotos.Settings.Master.GymBattleSettings.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Settings.Master.GymBattleSettings {
      return try Pogoprotos.Settings.Master.GymBattleSettings.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Settings.Master.GymBattleSettingsRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.GymBattleSettings {
      return try Pogoprotos.Settings.Master.GymBattleSettings.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.Master.GymBattleSettings {
      return try Pogoprotos.Settings.Master.GymBattleSettings.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.GymBattleSettings {
      return try Pogoprotos.Settings.Master.GymBattleSettings.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.Master.GymBattleSettings {
      return try Pogoprotos.Settings.Master.GymBattleSettings.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.GymBattleSettings {
      return try Pogoprotos.Settings.Master.GymBattleSettings.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Settings.Master.GymBattleSettings.Builder {
      return Pogoprotos.Settings.Master.GymBattleSettings.classBuilder() as! Pogoprotos.Settings.Master.GymBattleSettings.Builder
    }
    public func getBuilder() -> Pogoprotos.Settings.Master.GymBattleSettings.Builder {
      return classBuilder() as! Pogoprotos.Settings.Master.GymBattleSettings.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.Master.GymBattleSettings.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.Master.GymBattleSettings.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Settings.Master.GymBattleSettings.Builder {
      return try Pogoprotos.Settings.Master.GymBattleSettings.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Settings.Master.GymBattleSettings) throws -> Pogoprotos.Settings.Master.GymBattleSettings.Builder {
      return try Pogoprotos.Settings.Master.GymBattleSettings.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasEnergyPerSec {
        jsonMap["energyPerSec"] = NSNumber(float:energyPerSec)
      }
      if hasDodgeEnergyCost {
        jsonMap["dodgeEnergyCost"] = NSNumber(float:dodgeEnergyCost)
      }
      if hasRetargetSeconds {
        jsonMap["retargetSeconds"] = NSNumber(float:retargetSeconds)
      }
      if hasEnemyAttackInterval {
        jsonMap["enemyAttackInterval"] = NSNumber(float:enemyAttackInterval)
      }
      if hasAttackServerInterval {
        jsonMap["attackServerInterval"] = NSNumber(float:attackServerInterval)
      }
      if hasRoundDurationSeconds {
        jsonMap["roundDurationSeconds"] = NSNumber(float:roundDurationSeconds)
      }
      if hasBonusTimePerAllySeconds {
        jsonMap["bonusTimePerAllySeconds"] = NSNumber(float:bonusTimePerAllySeconds)
      }
      if hasMaximumAttackersPerBattle {
        jsonMap["maximumAttackersPerBattle"] = NSNumber(int:maximumAttackersPerBattle)
      }
      if hasSameTypeAttackBonusMultiplier {
        jsonMap["sameTypeAttackBonusMultiplier"] = NSNumber(float:sameTypeAttackBonusMultiplier)
      }
      if hasMaximumEnergy {
        jsonMap["maximumEnergy"] = NSNumber(int:maximumEnergy)
      }
      if hasEnergyDeltaPerHealthLost {
        jsonMap["energyDeltaPerHealthLost"] = NSNumber(float:energyDeltaPerHealthLost)
      }
      if hasDodgeDurationMs {
        jsonMap["dodgeDurationMs"] = NSNumber(int:dodgeDurationMs)
      }
      if hasMinimumPlayerLevel {
        jsonMap["minimumPlayerLevel"] = NSNumber(int:minimumPlayerLevel)
      }
      if hasSwapDurationMs {
        jsonMap["swapDurationMs"] = NSNumber(int:swapDurationMs)
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.Master.GymBattleSettings {
      return try Pogoprotos.Settings.Master.GymBattleSettings.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Settings.Master.GymBattleSettings {
      return try Pogoprotos.Settings.Master.GymBattleSettings.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasEnergyPerSec {
        output += "\(indent) energyPerSec: \(energyPerSec) \n"
      }
      if hasDodgeEnergyCost {
        output += "\(indent) dodgeEnergyCost: \(dodgeEnergyCost) \n"
      }
      if hasRetargetSeconds {
        output += "\(indent) retargetSeconds: \(retargetSeconds) \n"
      }
      if hasEnemyAttackInterval {
        output += "\(indent) enemyAttackInterval: \(enemyAttackInterval) \n"
      }
      if hasAttackServerInterval {
        output += "\(indent) attackServerInterval: \(attackServerInterval) \n"
      }
      if hasRoundDurationSeconds {
        output += "\(indent) roundDurationSeconds: \(roundDurationSeconds) \n"
      }
      if hasBonusTimePerAllySeconds {
        output += "\(indent) bonusTimePerAllySeconds: \(bonusTimePerAllySeconds) \n"
      }
      if hasMaximumAttackersPerBattle {
        output += "\(indent) maximumAttackersPerBattle: \(maximumAttackersPerBattle) \n"
      }
      if hasSameTypeAttackBonusMultiplier {
        output += "\(indent) sameTypeAttackBonusMultiplier: \(sameTypeAttackBonusMultiplier) \n"
      }
      if hasMaximumEnergy {
        output += "\(indent) maximumEnergy: \(maximumEnergy) \n"
      }
      if hasEnergyDeltaPerHealthLost {
        output += "\(indent) energyDeltaPerHealthLost: \(energyDeltaPerHealthLost) \n"
      }
      if hasDodgeDurationMs {
        output += "\(indent) dodgeDurationMs: \(dodgeDurationMs) \n"
      }
      if hasMinimumPlayerLevel {
        output += "\(indent) minimumPlayerLevel: \(minimumPlayerLevel) \n"
      }
      if hasSwapDurationMs {
        output += "\(indent) swapDurationMs: \(swapDurationMs) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasEnergyPerSec {
               hashCode = (hashCode &* 31) &+ energyPerSec.hashValue
            }
            if hasDodgeEnergyCost {
               hashCode = (hashCode &* 31) &+ dodgeEnergyCost.hashValue
            }
            if hasRetargetSeconds {
               hashCode = (hashCode &* 31) &+ retargetSeconds.hashValue
            }
            if hasEnemyAttackInterval {
               hashCode = (hashCode &* 31) &+ enemyAttackInterval.hashValue
            }
            if hasAttackServerInterval {
               hashCode = (hashCode &* 31) &+ attackServerInterval.hashValue
            }
            if hasRoundDurationSeconds {
               hashCode = (hashCode &* 31) &+ roundDurationSeconds.hashValue
            }
            if hasBonusTimePerAllySeconds {
               hashCode = (hashCode &* 31) &+ bonusTimePerAllySeconds.hashValue
            }
            if hasMaximumAttackersPerBattle {
               hashCode = (hashCode &* 31) &+ maximumAttackersPerBattle.hashValue
            }
            if hasSameTypeAttackBonusMultiplier {
               hashCode = (hashCode &* 31) &+ sameTypeAttackBonusMultiplier.hashValue
            }
            if hasMaximumEnergy {
               hashCode = (hashCode &* 31) &+ maximumEnergy.hashValue
            }
            if hasEnergyDeltaPerHealthLost {
               hashCode = (hashCode &* 31) &+ energyDeltaPerHealthLost.hashValue
            }
            if hasDodgeDurationMs {
               hashCode = (hashCode &* 31) &+ dodgeDurationMs.hashValue
            }
            if hasMinimumPlayerLevel {
               hashCode = (hashCode &* 31) &+ minimumPlayerLevel.hashValue
            }
            if hasSwapDurationMs {
               hashCode = (hashCode &* 31) &+ swapDurationMs.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Settings.Master.GymBattleSettings"
    }
    override public func className() -> String {
        return "Pogoprotos.Settings.Master.GymBattleSettings"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Settings.Master.GymBattleSettings.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Settings.Master.GymBattleSettings = Pogoprotos.Settings.Master.GymBattleSettings()
      public func getMessage() -> Pogoprotos.Settings.Master.GymBattleSettings {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasEnergyPerSec:Bool {
           get {
                return builderResult.hasEnergyPerSec
           }
      }
      public var energyPerSec:Float {
           get {
                return builderResult.energyPerSec
           }
           set (value) {
               builderResult.hasEnergyPerSec = true
               builderResult.energyPerSec = value
           }
      }
      public func setEnergyPerSec(value:Float) -> Pogoprotos.Settings.Master.GymBattleSettings.Builder {
        self.energyPerSec = value
        return self
      }
      public func clearEnergyPerSec() -> Pogoprotos.Settings.Master.GymBattleSettings.Builder{
           builderResult.hasEnergyPerSec = false
           builderResult.energyPerSec = Float(0)
           return self
      }
      public var hasDodgeEnergyCost:Bool {
           get {
                return builderResult.hasDodgeEnergyCost
           }
      }
      public var dodgeEnergyCost:Float {
           get {
                return builderResult.dodgeEnergyCost
           }
           set (value) {
               builderResult.hasDodgeEnergyCost = true
               builderResult.dodgeEnergyCost = value
           }
      }
      public func setDodgeEnergyCost(value:Float) -> Pogoprotos.Settings.Master.GymBattleSettings.Builder {
        self.dodgeEnergyCost = value
        return self
      }
      public func clearDodgeEnergyCost() -> Pogoprotos.Settings.Master.GymBattleSettings.Builder{
           builderResult.hasDodgeEnergyCost = false
           builderResult.dodgeEnergyCost = Float(0)
           return self
      }
      public var hasRetargetSeconds:Bool {
           get {
                return builderResult.hasRetargetSeconds
           }
      }
      public var retargetSeconds:Float {
           get {
                return builderResult.retargetSeconds
           }
           set (value) {
               builderResult.hasRetargetSeconds = true
               builderResult.retargetSeconds = value
           }
      }
      public func setRetargetSeconds(value:Float) -> Pogoprotos.Settings.Master.GymBattleSettings.Builder {
        self.retargetSeconds = value
        return self
      }
      public func clearRetargetSeconds() -> Pogoprotos.Settings.Master.GymBattleSettings.Builder{
           builderResult.hasRetargetSeconds = false
           builderResult.retargetSeconds = Float(0)
           return self
      }
      public var hasEnemyAttackInterval:Bool {
           get {
                return builderResult.hasEnemyAttackInterval
           }
      }
      public var enemyAttackInterval:Float {
           get {
                return builderResult.enemyAttackInterval
           }
           set (value) {
               builderResult.hasEnemyAttackInterval = true
               builderResult.enemyAttackInterval = value
           }
      }
      public func setEnemyAttackInterval(value:Float) -> Pogoprotos.Settings.Master.GymBattleSettings.Builder {
        self.enemyAttackInterval = value
        return self
      }
      public func clearEnemyAttackInterval() -> Pogoprotos.Settings.Master.GymBattleSettings.Builder{
           builderResult.hasEnemyAttackInterval = false
           builderResult.enemyAttackInterval = Float(0)
           return self
      }
      public var hasAttackServerInterval:Bool {
           get {
                return builderResult.hasAttackServerInterval
           }
      }
      public var attackServerInterval:Float {
           get {
                return builderResult.attackServerInterval
           }
           set (value) {
               builderResult.hasAttackServerInterval = true
               builderResult.attackServerInterval = value
           }
      }
      public func setAttackServerInterval(value:Float) -> Pogoprotos.Settings.Master.GymBattleSettings.Builder {
        self.attackServerInterval = value
        return self
      }
      public func clearAttackServerInterval() -> Pogoprotos.Settings.Master.GymBattleSettings.Builder{
           builderResult.hasAttackServerInterval = false
           builderResult.attackServerInterval = Float(0)
           return self
      }
      public var hasRoundDurationSeconds:Bool {
           get {
                return builderResult.hasRoundDurationSeconds
           }
      }
      public var roundDurationSeconds:Float {
           get {
                return builderResult.roundDurationSeconds
           }
           set (value) {
               builderResult.hasRoundDurationSeconds = true
               builderResult.roundDurationSeconds = value
           }
      }
      public func setRoundDurationSeconds(value:Float) -> Pogoprotos.Settings.Master.GymBattleSettings.Builder {
        self.roundDurationSeconds = value
        return self
      }
      public func clearRoundDurationSeconds() -> Pogoprotos.Settings.Master.GymBattleSettings.Builder{
           builderResult.hasRoundDurationSeconds = false
           builderResult.roundDurationSeconds = Float(0)
           return self
      }
      public var hasBonusTimePerAllySeconds:Bool {
           get {
                return builderResult.hasBonusTimePerAllySeconds
           }
      }
      public var bonusTimePerAllySeconds:Float {
           get {
                return builderResult.bonusTimePerAllySeconds
           }
           set (value) {
               builderResult.hasBonusTimePerAllySeconds = true
               builderResult.bonusTimePerAllySeconds = value
           }
      }
      public func setBonusTimePerAllySeconds(value:Float) -> Pogoprotos.Settings.Master.GymBattleSettings.Builder {
        self.bonusTimePerAllySeconds = value
        return self
      }
      public func clearBonusTimePerAllySeconds() -> Pogoprotos.Settings.Master.GymBattleSettings.Builder{
           builderResult.hasBonusTimePerAllySeconds = false
           builderResult.bonusTimePerAllySeconds = Float(0)
           return self
      }
      public var hasMaximumAttackersPerBattle:Bool {
           get {
                return builderResult.hasMaximumAttackersPerBattle
           }
      }
      public var maximumAttackersPerBattle:Int32 {
           get {
                return builderResult.maximumAttackersPerBattle
           }
           set (value) {
               builderResult.hasMaximumAttackersPerBattle = true
               builderResult.maximumAttackersPerBattle = value
           }
      }
      public func setMaximumAttackersPerBattle(value:Int32) -> Pogoprotos.Settings.Master.GymBattleSettings.Builder {
        self.maximumAttackersPerBattle = value
        return self
      }
      public func clearMaximumAttackersPerBattle() -> Pogoprotos.Settings.Master.GymBattleSettings.Builder{
           builderResult.hasMaximumAttackersPerBattle = false
           builderResult.maximumAttackersPerBattle = Int32(0)
           return self
      }
      public var hasSameTypeAttackBonusMultiplier:Bool {
           get {
                return builderResult.hasSameTypeAttackBonusMultiplier
           }
      }
      public var sameTypeAttackBonusMultiplier:Float {
           get {
                return builderResult.sameTypeAttackBonusMultiplier
           }
           set (value) {
               builderResult.hasSameTypeAttackBonusMultiplier = true
               builderResult.sameTypeAttackBonusMultiplier = value
           }
      }
      public func setSameTypeAttackBonusMultiplier(value:Float) -> Pogoprotos.Settings.Master.GymBattleSettings.Builder {
        self.sameTypeAttackBonusMultiplier = value
        return self
      }
      public func clearSameTypeAttackBonusMultiplier() -> Pogoprotos.Settings.Master.GymBattleSettings.Builder{
           builderResult.hasSameTypeAttackBonusMultiplier = false
           builderResult.sameTypeAttackBonusMultiplier = Float(0)
           return self
      }
      public var hasMaximumEnergy:Bool {
           get {
                return builderResult.hasMaximumEnergy
           }
      }
      public var maximumEnergy:Int32 {
           get {
                return builderResult.maximumEnergy
           }
           set (value) {
               builderResult.hasMaximumEnergy = true
               builderResult.maximumEnergy = value
           }
      }
      public func setMaximumEnergy(value:Int32) -> Pogoprotos.Settings.Master.GymBattleSettings.Builder {
        self.maximumEnergy = value
        return self
      }
      public func clearMaximumEnergy() -> Pogoprotos.Settings.Master.GymBattleSettings.Builder{
           builderResult.hasMaximumEnergy = false
           builderResult.maximumEnergy = Int32(0)
           return self
      }
      public var hasEnergyDeltaPerHealthLost:Bool {
           get {
                return builderResult.hasEnergyDeltaPerHealthLost
           }
      }
      public var energyDeltaPerHealthLost:Float {
           get {
                return builderResult.energyDeltaPerHealthLost
           }
           set (value) {
               builderResult.hasEnergyDeltaPerHealthLost = true
               builderResult.energyDeltaPerHealthLost = value
           }
      }
      public func setEnergyDeltaPerHealthLost(value:Float) -> Pogoprotos.Settings.Master.GymBattleSettings.Builder {
        self.energyDeltaPerHealthLost = value
        return self
      }
      public func clearEnergyDeltaPerHealthLost() -> Pogoprotos.Settings.Master.GymBattleSettings.Builder{
           builderResult.hasEnergyDeltaPerHealthLost = false
           builderResult.energyDeltaPerHealthLost = Float(0)
           return self
      }
      public var hasDodgeDurationMs:Bool {
           get {
                return builderResult.hasDodgeDurationMs
           }
      }
      public var dodgeDurationMs:Int32 {
           get {
                return builderResult.dodgeDurationMs
           }
           set (value) {
               builderResult.hasDodgeDurationMs = true
               builderResult.dodgeDurationMs = value
           }
      }
      public func setDodgeDurationMs(value:Int32) -> Pogoprotos.Settings.Master.GymBattleSettings.Builder {
        self.dodgeDurationMs = value
        return self
      }
      public func clearDodgeDurationMs() -> Pogoprotos.Settings.Master.GymBattleSettings.Builder{
           builderResult.hasDodgeDurationMs = false
           builderResult.dodgeDurationMs = Int32(0)
           return self
      }
      public var hasMinimumPlayerLevel:Bool {
           get {
                return builderResult.hasMinimumPlayerLevel
           }
      }
      public var minimumPlayerLevel:Int32 {
           get {
                return builderResult.minimumPlayerLevel
           }
           set (value) {
               builderResult.hasMinimumPlayerLevel = true
               builderResult.minimumPlayerLevel = value
           }
      }
      public func setMinimumPlayerLevel(value:Int32) -> Pogoprotos.Settings.Master.GymBattleSettings.Builder {
        self.minimumPlayerLevel = value
        return self
      }
      public func clearMinimumPlayerLevel() -> Pogoprotos.Settings.Master.GymBattleSettings.Builder{
           builderResult.hasMinimumPlayerLevel = false
           builderResult.minimumPlayerLevel = Int32(0)
           return self
      }
      public var hasSwapDurationMs:Bool {
           get {
                return builderResult.hasSwapDurationMs
           }
      }
      public var swapDurationMs:Int32 {
           get {
                return builderResult.swapDurationMs
           }
           set (value) {
               builderResult.hasSwapDurationMs = true
               builderResult.swapDurationMs = value
           }
      }
      public func setSwapDurationMs(value:Int32) -> Pogoprotos.Settings.Master.GymBattleSettings.Builder {
        self.swapDurationMs = value
        return self
      }
      public func clearSwapDurationMs() -> Pogoprotos.Settings.Master.GymBattleSettings.Builder{
           builderResult.hasSwapDurationMs = false
           builderResult.swapDurationMs = Int32(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Settings.Master.GymBattleSettings.Builder {
        builderResult = Pogoprotos.Settings.Master.GymBattleSettings()
        return self
      }
      override public func clone() throws -> Pogoprotos.Settings.Master.GymBattleSettings.Builder {
        return try Pogoprotos.Settings.Master.GymBattleSettings.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Settings.Master.GymBattleSettings {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Settings.Master.GymBattleSettings {
        let returnMe:Pogoprotos.Settings.Master.GymBattleSettings = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Settings.Master.GymBattleSettings) throws -> Pogoprotos.Settings.Master.GymBattleSettings.Builder {
        if other == Pogoprotos.Settings.Master.GymBattleSettings() {
         return self
        }
        if other.hasEnergyPerSec {
             energyPerSec = other.energyPerSec
        }
        if other.hasDodgeEnergyCost {
             dodgeEnergyCost = other.dodgeEnergyCost
        }
        if other.hasRetargetSeconds {
             retargetSeconds = other.retargetSeconds
        }
        if other.hasEnemyAttackInterval {
             enemyAttackInterval = other.enemyAttackInterval
        }
        if other.hasAttackServerInterval {
             attackServerInterval = other.attackServerInterval
        }
        if other.hasRoundDurationSeconds {
             roundDurationSeconds = other.roundDurationSeconds
        }
        if other.hasBonusTimePerAllySeconds {
             bonusTimePerAllySeconds = other.bonusTimePerAllySeconds
        }
        if other.hasMaximumAttackersPerBattle {
             maximumAttackersPerBattle = other.maximumAttackersPerBattle
        }
        if other.hasSameTypeAttackBonusMultiplier {
             sameTypeAttackBonusMultiplier = other.sameTypeAttackBonusMultiplier
        }
        if other.hasMaximumEnergy {
             maximumEnergy = other.maximumEnergy
        }
        if other.hasEnergyDeltaPerHealthLost {
             energyDeltaPerHealthLost = other.energyDeltaPerHealthLost
        }
        if other.hasDodgeDurationMs {
             dodgeDurationMs = other.dodgeDurationMs
        }
        if other.hasMinimumPlayerLevel {
             minimumPlayerLevel = other.minimumPlayerLevel
        }
        if other.hasSwapDurationMs {
             swapDurationMs = other.swapDurationMs
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.Master.GymBattleSettings.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.GymBattleSettings.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 13:
            energyPerSec = try input.readFloat()

          case 21:
            dodgeEnergyCost = try input.readFloat()

          case 29:
            retargetSeconds = try input.readFloat()

          case 37:
            enemyAttackInterval = try input.readFloat()

          case 45:
            attackServerInterval = try input.readFloat()

          case 53:
            roundDurationSeconds = try input.readFloat()

          case 61:
            bonusTimePerAllySeconds = try input.readFloat()

          case 64:
            maximumAttackersPerBattle = try input.readInt32()

          case 77:
            sameTypeAttackBonusMultiplier = try input.readFloat()

          case 80:
            maximumEnergy = try input.readInt32()

          case 93:
            energyDeltaPerHealthLost = try input.readFloat()

          case 96:
            dodgeDurationMs = try input.readInt32()

          case 104:
            minimumPlayerLevel = try input.readInt32()

          case 112:
            swapDurationMs = try input.readInt32()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.Master.GymBattleSettings.Builder {
        let resultDecodedBuilder = Pogoprotos.Settings.Master.GymBattleSettings.Builder()
        if let jsonValueEnergyPerSec = jsonMap["energyPerSec"] as? NSNumber {
          resultDecodedBuilder.energyPerSec = jsonValueEnergyPerSec.floatValue
        }
        if let jsonValueDodgeEnergyCost = jsonMap["dodgeEnergyCost"] as? NSNumber {
          resultDecodedBuilder.dodgeEnergyCost = jsonValueDodgeEnergyCost.floatValue
        }
        if let jsonValueRetargetSeconds = jsonMap["retargetSeconds"] as? NSNumber {
          resultDecodedBuilder.retargetSeconds = jsonValueRetargetSeconds.floatValue
        }
        if let jsonValueEnemyAttackInterval = jsonMap["enemyAttackInterval"] as? NSNumber {
          resultDecodedBuilder.enemyAttackInterval = jsonValueEnemyAttackInterval.floatValue
        }
        if let jsonValueAttackServerInterval = jsonMap["attackServerInterval"] as? NSNumber {
          resultDecodedBuilder.attackServerInterval = jsonValueAttackServerInterval.floatValue
        }
        if let jsonValueRoundDurationSeconds = jsonMap["roundDurationSeconds"] as? NSNumber {
          resultDecodedBuilder.roundDurationSeconds = jsonValueRoundDurationSeconds.floatValue
        }
        if let jsonValueBonusTimePerAllySeconds = jsonMap["bonusTimePerAllySeconds"] as? NSNumber {
          resultDecodedBuilder.bonusTimePerAllySeconds = jsonValueBonusTimePerAllySeconds.floatValue
        }
        if let jsonValueMaximumAttackersPerBattle = jsonMap["maximumAttackersPerBattle"] as? NSNumber {
          resultDecodedBuilder.maximumAttackersPerBattle = jsonValueMaximumAttackersPerBattle.intValue
        }
        if let jsonValueSameTypeAttackBonusMultiplier = jsonMap["sameTypeAttackBonusMultiplier"] as? NSNumber {
          resultDecodedBuilder.sameTypeAttackBonusMultiplier = jsonValueSameTypeAttackBonusMultiplier.floatValue
        }
        if let jsonValueMaximumEnergy = jsonMap["maximumEnergy"] as? NSNumber {
          resultDecodedBuilder.maximumEnergy = jsonValueMaximumEnergy.intValue
        }
        if let jsonValueEnergyDeltaPerHealthLost = jsonMap["energyDeltaPerHealthLost"] as? NSNumber {
          resultDecodedBuilder.energyDeltaPerHealthLost = jsonValueEnergyDeltaPerHealthLost.floatValue
        }
        if let jsonValueDodgeDurationMs = jsonMap["dodgeDurationMs"] as? NSNumber {
          resultDecodedBuilder.dodgeDurationMs = jsonValueDodgeDurationMs.intValue
        }
        if let jsonValueMinimumPlayerLevel = jsonMap["minimumPlayerLevel"] as? NSNumber {
          resultDecodedBuilder.minimumPlayerLevel = jsonValueMinimumPlayerLevel.intValue
        }
        if let jsonValueSwapDurationMs = jsonMap["swapDurationMs"] as? NSNumber {
          resultDecodedBuilder.swapDurationMs = jsonValueSwapDurationMs.intValue
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Settings.Master.GymBattleSettings.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Settings.Master.GymBattleSettings.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
