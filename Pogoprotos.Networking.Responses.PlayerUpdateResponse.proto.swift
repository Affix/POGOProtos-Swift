// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "PlayerUpdateResponse.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Pogoprotos { public struct Networking { public struct Responses { }}}

public func == (lhs: Pogoprotos.Networking.Responses.PlayerUpdateResponse, rhs: Pogoprotos.Networking.Responses.PlayerUpdateResponse) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.wildPokemons == rhs.wildPokemons)
  fieldCheck = fieldCheck && (lhs.forts == rhs.forts)
  fieldCheck = fieldCheck && (lhs.hasFortsNearby == rhs.hasFortsNearby) && (!lhs.hasFortsNearby || lhs.fortsNearby == rhs.fortsNearby)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Pogoprotos.Networking.Responses {
  public struct PlayerUpdateResponseRoot {
    public static var sharedInstance : PlayerUpdateResponseRoot {
     struct Static {
         static let instance : PlayerUpdateResponseRoot = PlayerUpdateResponseRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Pogoprotos.Map.Fort.FortDataRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Map.Pokemon.WildPokemonRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class PlayerUpdateResponse : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var wildPokemons:Array<Pogoprotos.Map.Pokemon.WildPokemon>  = Array<Pogoprotos.Map.Pokemon.WildPokemon>()
    public private(set) var forts:Array<Pogoprotos.Map.Fort.FortData>  = Array<Pogoprotos.Map.Fort.FortData>()
    public private(set) var hasFortsNearby:Bool = false
    public private(set) var fortsNearby:Int32 = Int32(0)

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      for oneElementWildPokemons in wildPokemons {
          try output.writeMessage(1, value:oneElementWildPokemons)
      }
      for oneElementForts in forts {
          try output.writeMessage(2, value:oneElementForts)
      }
      if hasFortsNearby {
        try output.writeInt32(3, value:fortsNearby)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      for oneElementWildPokemons in wildPokemons {
          serialize_size += oneElementWildPokemons.computeMessageSize(1)
      }
      for oneElementForts in forts {
          serialize_size += oneElementForts.computeMessageSize(2)
      }
      if hasFortsNearby {
        serialize_size += fortsNearby.computeInt32Size(3)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Networking.Responses.PlayerUpdateResponse> {
      var mergedArray = Array<Pogoprotos.Networking.Responses.PlayerUpdateResponse>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Responses.PlayerUpdateResponse? {
      return try Pogoprotos.Networking.Responses.PlayerUpdateResponse.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Networking.Responses.PlayerUpdateResponse {
      return try Pogoprotos.Networking.Responses.PlayerUpdateResponse.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Networking.Responses.PlayerUpdateResponseRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Responses.PlayerUpdateResponse {
      return try Pogoprotos.Networking.Responses.PlayerUpdateResponse.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Responses.PlayerUpdateResponse {
      return try Pogoprotos.Networking.Responses.PlayerUpdateResponse.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Responses.PlayerUpdateResponse {
      return try Pogoprotos.Networking.Responses.PlayerUpdateResponse.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Responses.PlayerUpdateResponse {
      return try Pogoprotos.Networking.Responses.PlayerUpdateResponse.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Responses.PlayerUpdateResponse {
      return try Pogoprotos.Networking.Responses.PlayerUpdateResponse.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Networking.Responses.PlayerUpdateResponse.Builder {
      return Pogoprotos.Networking.Responses.PlayerUpdateResponse.classBuilder() as! Pogoprotos.Networking.Responses.PlayerUpdateResponse.Builder
    }
    public func getBuilder() -> Pogoprotos.Networking.Responses.PlayerUpdateResponse.Builder {
      return classBuilder() as! Pogoprotos.Networking.Responses.PlayerUpdateResponse.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Networking.Responses.PlayerUpdateResponse.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Networking.Responses.PlayerUpdateResponse.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Networking.Responses.PlayerUpdateResponse.Builder {
      return try Pogoprotos.Networking.Responses.PlayerUpdateResponse.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Networking.Responses.PlayerUpdateResponse) throws -> Pogoprotos.Networking.Responses.PlayerUpdateResponse.Builder {
      return try Pogoprotos.Networking.Responses.PlayerUpdateResponse.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if !wildPokemons.isEmpty {
        var jsonArrayWildPokemons:Array<Dictionary<String,AnyObject>> = []
          for oneValueWildPokemons in wildPokemons {
            let ecodedMessageWildPokemons = try oneValueWildPokemons.encode()
            jsonArrayWildPokemons += [ecodedMessageWildPokemons]
          }
        jsonMap["wildPokemons"] = jsonArrayWildPokemons
      }
      if !forts.isEmpty {
        var jsonArrayForts:Array<Dictionary<String,AnyObject>> = []
          for oneValueForts in forts {
            let ecodedMessageForts = try oneValueForts.encode()
            jsonArrayForts += [ecodedMessageForts]
          }
        jsonMap["forts"] = jsonArrayForts
      }
      if hasFortsNearby {
        jsonMap["fortsNearby"] = NSNumber(int:fortsNearby)
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Responses.PlayerUpdateResponse {
      return try Pogoprotos.Networking.Responses.PlayerUpdateResponse.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Networking.Responses.PlayerUpdateResponse {
      return try Pogoprotos.Networking.Responses.PlayerUpdateResponse.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      var wildPokemonsElementIndex:Int = 0
      for oneElementWildPokemons in wildPokemons {
          output += "\(indent) wildPokemons[\(wildPokemonsElementIndex)] {\n"
          output += try oneElementWildPokemons.getDescription("\(indent)  ")
          output += "\(indent)}\n"
          wildPokemonsElementIndex += 1
      }
      var fortsElementIndex:Int = 0
      for oneElementForts in forts {
          output += "\(indent) forts[\(fortsElementIndex)] {\n"
          output += try oneElementForts.getDescription("\(indent)  ")
          output += "\(indent)}\n"
          fortsElementIndex += 1
      }
      if hasFortsNearby {
        output += "\(indent) fortsNearby: \(fortsNearby) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            for oneElementWildPokemons in wildPokemons {
                hashCode = (hashCode &* 31) &+ oneElementWildPokemons.hashValue
            }
            for oneElementForts in forts {
                hashCode = (hashCode &* 31) &+ oneElementForts.hashValue
            }
            if hasFortsNearby {
               hashCode = (hashCode &* 31) &+ fortsNearby.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Networking.Responses.PlayerUpdateResponse"
    }
    override public func className() -> String {
        return "Pogoprotos.Networking.Responses.PlayerUpdateResponse"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Networking.Responses.PlayerUpdateResponse.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Networking.Responses.PlayerUpdateResponse = Pogoprotos.Networking.Responses.PlayerUpdateResponse()
      public func getMessage() -> Pogoprotos.Networking.Responses.PlayerUpdateResponse {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var wildPokemons:Array<Pogoprotos.Map.Pokemon.WildPokemon> {
           get {
               return builderResult.wildPokemons
           }
           set (value) {
               builderResult.wildPokemons = value
           }
      }
      public func setWildPokemons(value:Array<Pogoprotos.Map.Pokemon.WildPokemon>) -> Pogoprotos.Networking.Responses.PlayerUpdateResponse.Builder {
        self.wildPokemons = value
        return self
      }
      public func clearWildPokemons() -> Pogoprotos.Networking.Responses.PlayerUpdateResponse.Builder {
        builderResult.wildPokemons.removeAll(keepCapacity: false)
        return self
      }
      public var forts:Array<Pogoprotos.Map.Fort.FortData> {
           get {
               return builderResult.forts
           }
           set (value) {
               builderResult.forts = value
           }
      }
      public func setForts(value:Array<Pogoprotos.Map.Fort.FortData>) -> Pogoprotos.Networking.Responses.PlayerUpdateResponse.Builder {
        self.forts = value
        return self
      }
      public func clearForts() -> Pogoprotos.Networking.Responses.PlayerUpdateResponse.Builder {
        builderResult.forts.removeAll(keepCapacity: false)
        return self
      }
      public var hasFortsNearby:Bool {
           get {
                return builderResult.hasFortsNearby
           }
      }
      public var fortsNearby:Int32 {
           get {
                return builderResult.fortsNearby
           }
           set (value) {
               builderResult.hasFortsNearby = true
               builderResult.fortsNearby = value
           }
      }
      public func setFortsNearby(value:Int32) -> Pogoprotos.Networking.Responses.PlayerUpdateResponse.Builder {
        self.fortsNearby = value
        return self
      }
      public func clearFortsNearby() -> Pogoprotos.Networking.Responses.PlayerUpdateResponse.Builder{
           builderResult.hasFortsNearby = false
           builderResult.fortsNearby = Int32(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Networking.Responses.PlayerUpdateResponse.Builder {
        builderResult = Pogoprotos.Networking.Responses.PlayerUpdateResponse()
        return self
      }
      override public func clone() throws -> Pogoprotos.Networking.Responses.PlayerUpdateResponse.Builder {
        return try Pogoprotos.Networking.Responses.PlayerUpdateResponse.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Networking.Responses.PlayerUpdateResponse {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Networking.Responses.PlayerUpdateResponse {
        let returnMe:Pogoprotos.Networking.Responses.PlayerUpdateResponse = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Networking.Responses.PlayerUpdateResponse) throws -> Pogoprotos.Networking.Responses.PlayerUpdateResponse.Builder {
        if other == Pogoprotos.Networking.Responses.PlayerUpdateResponse() {
         return self
        }
        if !other.wildPokemons.isEmpty  {
           builderResult.wildPokemons += other.wildPokemons
        }
        if !other.forts.isEmpty  {
           builderResult.forts += other.forts
        }
        if other.hasFortsNearby {
             fortsNearby = other.fortsNearby
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Responses.PlayerUpdateResponse.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Responses.PlayerUpdateResponse.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10:
            let subBuilder = Pogoprotos.Map.Pokemon.WildPokemon.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            wildPokemons += [subBuilder.buildPartial()]

          case 18:
            let subBuilder = Pogoprotos.Map.Fort.FortData.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            forts += [subBuilder.buildPartial()]

          case 24:
            fortsNearby = try input.readInt32()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Responses.PlayerUpdateResponse.Builder {
        let resultDecodedBuilder = Pogoprotos.Networking.Responses.PlayerUpdateResponse.Builder()
        if let jsonValueWildPokemons = jsonMap["wildPokemons"] as? Array<Dictionary<String,AnyObject>> {
          var jsonArrayWildPokemons:Array<Pogoprotos.Map.Pokemon.WildPokemon> = []
          for oneValueWildPokemons in jsonValueWildPokemons {
            let messageFromStringWildPokemons = try Pogoprotos.Map.Pokemon.WildPokemon.Builder.decodeToBuilder(oneValueWildPokemons).build()

            jsonArrayWildPokemons += [messageFromStringWildPokemons]
          }
          resultDecodedBuilder.wildPokemons = jsonArrayWildPokemons
        }
        if let jsonValueForts = jsonMap["forts"] as? Array<Dictionary<String,AnyObject>> {
          var jsonArrayForts:Array<Pogoprotos.Map.Fort.FortData> = []
          for oneValueForts in jsonValueForts {
            let messageFromStringForts = try Pogoprotos.Map.Fort.FortData.Builder.decodeToBuilder(oneValueForts).build()

            jsonArrayForts += [messageFromStringForts]
          }
          resultDecodedBuilder.forts = jsonArrayForts
        }
        if let jsonValueFortsNearby = jsonMap["fortsNearby"] as? NSNumber {
          resultDecodedBuilder.fortsNearby = jsonValueFortsNearby.intValue
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Networking.Responses.PlayerUpdateResponse.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Networking.Responses.PlayerUpdateResponse.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
