// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "GetMapObjectsMessage.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Pogoprotos { public struct Networking { public struct Requests { public struct Messages { }}}}

public func == (lhs: Pogoprotos.Networking.Requests.Messages.GetMapObjectsMessage, rhs: Pogoprotos.Networking.Requests.Messages.GetMapObjectsMessage) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.cellId == rhs.cellId)
  fieldCheck = fieldCheck && (lhs.sinceTimestampMs == rhs.sinceTimestampMs)
  fieldCheck = fieldCheck && (lhs.hasLatitude == rhs.hasLatitude) && (!lhs.hasLatitude || lhs.latitude == rhs.latitude)
  fieldCheck = fieldCheck && (lhs.hasLongitude == rhs.hasLongitude) && (!lhs.hasLongitude || lhs.longitude == rhs.longitude)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Pogoprotos.Networking.Requests.Messages {
  public struct GetMapObjectsMessageRoot {
    public static var sharedInstance : GetMapObjectsMessageRoot {
     struct Static {
         static let instance : GetMapObjectsMessageRoot = GetMapObjectsMessageRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class GetMapObjectsMessage : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var cellId:Array<UInt64> = Array<UInt64>()
    private var cellIdMemoizedSerializedSize:Int32 = -1
    public private(set) var sinceTimestampMs:Array<Int64> = Array<Int64>()
    private var sinceTimestampMsMemoizedSerializedSize:Int32 = -1
    public private(set) var hasLatitude:Bool = false
    public private(set) var latitude:Double = Double(0)

    public private(set) var hasLongitude:Bool = false
    public private(set) var longitude:Double = Double(0)

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if !cellId.isEmpty {
        try output.writeRawVarint32(10)
        try output.writeRawVarint32(cellIdMemoizedSerializedSize)
        for oneValuecellId in cellId {
          try output.writeUInt64NoTag(oneValuecellId)
        }
      }
      if !sinceTimestampMs.isEmpty {
        try output.writeRawVarint32(18)
        try output.writeRawVarint32(sinceTimestampMsMemoizedSerializedSize)
        for oneValuesinceTimestampMs in sinceTimestampMs {
          try output.writeInt64NoTag(oneValuesinceTimestampMs)
        }
      }
      if hasLatitude {
        try output.writeDouble(3, value:latitude)
      }
      if hasLongitude {
        try output.writeDouble(4, value:longitude)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      var dataSizeCellId:Int32 = 0
      for oneValuecellId in cellId {
          dataSizeCellId += oneValuecellId.computeUInt64SizeNoTag()
      }
      serialize_size += dataSizeCellId
      if !cellId.isEmpty {
        serialize_size += 1
        serialize_size += dataSizeCellId.computeInt32SizeNoTag()
      }
      cellIdMemoizedSerializedSize = dataSizeCellId
      var dataSizeSinceTimestampMs:Int32 = 0
      for oneValuesinceTimestampMs in sinceTimestampMs {
          dataSizeSinceTimestampMs += oneValuesinceTimestampMs.computeInt64SizeNoTag()
      }
      serialize_size += dataSizeSinceTimestampMs
      if !sinceTimestampMs.isEmpty {
        serialize_size += 1
        serialize_size += dataSizeSinceTimestampMs.computeInt32SizeNoTag()
      }
      sinceTimestampMsMemoizedSerializedSize = dataSizeSinceTimestampMs
      if hasLatitude {
        serialize_size += latitude.computeDoubleSize(3)
      }
      if hasLongitude {
        serialize_size += longitude.computeDoubleSize(4)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Networking.Requests.Messages.GetMapObjectsMessage> {
      var mergedArray = Array<Pogoprotos.Networking.Requests.Messages.GetMapObjectsMessage>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Requests.Messages.GetMapObjectsMessage? {
      return try Pogoprotos.Networking.Requests.Messages.GetMapObjectsMessage.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Networking.Requests.Messages.GetMapObjectsMessage {
      return try Pogoprotos.Networking.Requests.Messages.GetMapObjectsMessage.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Networking.Requests.Messages.GetMapObjectsMessageRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Requests.Messages.GetMapObjectsMessage {
      return try Pogoprotos.Networking.Requests.Messages.GetMapObjectsMessage.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Requests.Messages.GetMapObjectsMessage {
      return try Pogoprotos.Networking.Requests.Messages.GetMapObjectsMessage.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Requests.Messages.GetMapObjectsMessage {
      return try Pogoprotos.Networking.Requests.Messages.GetMapObjectsMessage.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Requests.Messages.GetMapObjectsMessage {
      return try Pogoprotos.Networking.Requests.Messages.GetMapObjectsMessage.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Requests.Messages.GetMapObjectsMessage {
      return try Pogoprotos.Networking.Requests.Messages.GetMapObjectsMessage.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Networking.Requests.Messages.GetMapObjectsMessage.Builder {
      return Pogoprotos.Networking.Requests.Messages.GetMapObjectsMessage.classBuilder() as! Pogoprotos.Networking.Requests.Messages.GetMapObjectsMessage.Builder
    }
    public func getBuilder() -> Pogoprotos.Networking.Requests.Messages.GetMapObjectsMessage.Builder {
      return classBuilder() as! Pogoprotos.Networking.Requests.Messages.GetMapObjectsMessage.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Networking.Requests.Messages.GetMapObjectsMessage.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Networking.Requests.Messages.GetMapObjectsMessage.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Networking.Requests.Messages.GetMapObjectsMessage.Builder {
      return try Pogoprotos.Networking.Requests.Messages.GetMapObjectsMessage.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Networking.Requests.Messages.GetMapObjectsMessage) throws -> Pogoprotos.Networking.Requests.Messages.GetMapObjectsMessage.Builder {
      return try Pogoprotos.Networking.Requests.Messages.GetMapObjectsMessage.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if !cellId.isEmpty {
        var jsonArrayCellId:Array<String> = []
          for oneValueCellId in cellId {
            jsonArrayCellId += ["\(oneValueCellId)"]
          }
        jsonMap["cellId"] = jsonArrayCellId
      }
      if !sinceTimestampMs.isEmpty {
        var jsonArraySinceTimestampMs:Array<String> = []
          for oneValueSinceTimestampMs in sinceTimestampMs {
            jsonArraySinceTimestampMs += ["\(oneValueSinceTimestampMs)"]
          }
        jsonMap["sinceTimestampMs"] = jsonArraySinceTimestampMs
      }
      if hasLatitude {
        jsonMap["latitude"] = NSNumber(double:latitude)
      }
      if hasLongitude {
        jsonMap["longitude"] = NSNumber(double:longitude)
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Requests.Messages.GetMapObjectsMessage {
      return try Pogoprotos.Networking.Requests.Messages.GetMapObjectsMessage.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Networking.Requests.Messages.GetMapObjectsMessage {
      return try Pogoprotos.Networking.Requests.Messages.GetMapObjectsMessage.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      var cellIdElementIndex:Int = 0
      for oneValueCellId in cellId  {
          output += "\(indent) cellId[\(cellIdElementIndex)]: \(oneValueCellId)\n"
          cellIdElementIndex += 1
      }
      var sinceTimestampMsElementIndex:Int = 0
      for oneValueSinceTimestampMs in sinceTimestampMs  {
          output += "\(indent) sinceTimestampMs[\(sinceTimestampMsElementIndex)]: \(oneValueSinceTimestampMs)\n"
          sinceTimestampMsElementIndex += 1
      }
      if hasLatitude {
        output += "\(indent) latitude: \(latitude) \n"
      }
      if hasLongitude {
        output += "\(indent) longitude: \(longitude) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            for oneValueCellId in cellId {
                hashCode = (hashCode &* 31) &+ oneValueCellId.hashValue
            }
            for oneValueSinceTimestampMs in sinceTimestampMs {
                hashCode = (hashCode &* 31) &+ oneValueSinceTimestampMs.hashValue
            }
            if hasLatitude {
               hashCode = (hashCode &* 31) &+ latitude.hashValue
            }
            if hasLongitude {
               hashCode = (hashCode &* 31) &+ longitude.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Networking.Requests.Messages.GetMapObjectsMessage"
    }
    override public func className() -> String {
        return "Pogoprotos.Networking.Requests.Messages.GetMapObjectsMessage"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Networking.Requests.Messages.GetMapObjectsMessage.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Networking.Requests.Messages.GetMapObjectsMessage = Pogoprotos.Networking.Requests.Messages.GetMapObjectsMessage()
      public func getMessage() -> Pogoprotos.Networking.Requests.Messages.GetMapObjectsMessage {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var cellId:Array<UInt64> {
           get {
               return builderResult.cellId
           }
           set (array) {
               builderResult.cellId = array
           }
      }
      public func setCellId(value:Array<UInt64>) -> Pogoprotos.Networking.Requests.Messages.GetMapObjectsMessage.Builder {
        self.cellId = value
        return self
      }
      public func clearCellId() -> Pogoprotos.Networking.Requests.Messages.GetMapObjectsMessage.Builder {
         builderResult.cellId.removeAll(keepCapacity: false)
         return self
      }
      public var sinceTimestampMs:Array<Int64> {
           get {
               return builderResult.sinceTimestampMs
           }
           set (array) {
               builderResult.sinceTimestampMs = array
           }
      }
      public func setSinceTimestampMs(value:Array<Int64>) -> Pogoprotos.Networking.Requests.Messages.GetMapObjectsMessage.Builder {
        self.sinceTimestampMs = value
        return self
      }
      public func clearSinceTimestampMs() -> Pogoprotos.Networking.Requests.Messages.GetMapObjectsMessage.Builder {
         builderResult.sinceTimestampMs.removeAll(keepCapacity: false)
         return self
      }
      public var hasLatitude:Bool {
           get {
                return builderResult.hasLatitude
           }
      }
      public var latitude:Double {
           get {
                return builderResult.latitude
           }
           set (value) {
               builderResult.hasLatitude = true
               builderResult.latitude = value
           }
      }
      public func setLatitude(value:Double) -> Pogoprotos.Networking.Requests.Messages.GetMapObjectsMessage.Builder {
        self.latitude = value
        return self
      }
      public func clearLatitude() -> Pogoprotos.Networking.Requests.Messages.GetMapObjectsMessage.Builder{
           builderResult.hasLatitude = false
           builderResult.latitude = Double(0)
           return self
      }
      public var hasLongitude:Bool {
           get {
                return builderResult.hasLongitude
           }
      }
      public var longitude:Double {
           get {
                return builderResult.longitude
           }
           set (value) {
               builderResult.hasLongitude = true
               builderResult.longitude = value
           }
      }
      public func setLongitude(value:Double) -> Pogoprotos.Networking.Requests.Messages.GetMapObjectsMessage.Builder {
        self.longitude = value
        return self
      }
      public func clearLongitude() -> Pogoprotos.Networking.Requests.Messages.GetMapObjectsMessage.Builder{
           builderResult.hasLongitude = false
           builderResult.longitude = Double(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Networking.Requests.Messages.GetMapObjectsMessage.Builder {
        builderResult = Pogoprotos.Networking.Requests.Messages.GetMapObjectsMessage()
        return self
      }
      override public func clone() throws -> Pogoprotos.Networking.Requests.Messages.GetMapObjectsMessage.Builder {
        return try Pogoprotos.Networking.Requests.Messages.GetMapObjectsMessage.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Networking.Requests.Messages.GetMapObjectsMessage {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Networking.Requests.Messages.GetMapObjectsMessage {
        let returnMe:Pogoprotos.Networking.Requests.Messages.GetMapObjectsMessage = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Networking.Requests.Messages.GetMapObjectsMessage) throws -> Pogoprotos.Networking.Requests.Messages.GetMapObjectsMessage.Builder {
        if other == Pogoprotos.Networking.Requests.Messages.GetMapObjectsMessage() {
         return self
        }
        if !other.cellId.isEmpty {
            builderResult.cellId += other.cellId
        }
        if !other.sinceTimestampMs.isEmpty {
            builderResult.sinceTimestampMs += other.sinceTimestampMs
        }
        if other.hasLatitude {
             latitude = other.latitude
        }
        if other.hasLongitude {
             longitude = other.longitude
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Requests.Messages.GetMapObjectsMessage.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Requests.Messages.GetMapObjectsMessage.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10:
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.cellId += [try input.readUInt64()]
            }
            input.popLimit(limit)

          case 18:
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.sinceTimestampMs += [try input.readInt64()]
            }
            input.popLimit(limit)

          case 25:
            latitude = try input.readDouble()

          case 33:
            longitude = try input.readDouble()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Requests.Messages.GetMapObjectsMessage.Builder {
        let resultDecodedBuilder = Pogoprotos.Networking.Requests.Messages.GetMapObjectsMessage.Builder()
        if let jsonValueCellId = jsonMap["cellId"] as? Array<String> {
          var jsonArrayCellId:Array<UInt64> = []
          for oneValueCellId in jsonValueCellId {
            jsonArrayCellId += [UInt64(oneValueCellId)!]
          }
          resultDecodedBuilder.cellId = jsonArrayCellId
        }
        if let jsonValueSinceTimestampMs = jsonMap["sinceTimestampMs"] as? Array<String> {
          var jsonArraySinceTimestampMs:Array<Int64> = []
          for oneValueSinceTimestampMs in jsonValueSinceTimestampMs {
            jsonArraySinceTimestampMs += [Int64(oneValueSinceTimestampMs)!]
          }
          resultDecodedBuilder.sinceTimestampMs = jsonArraySinceTimestampMs
        }
        if let jsonValueLatitude = jsonMap["latitude"] as? NSNumber {
          resultDecodedBuilder.latitude = jsonValueLatitude.doubleValue
        }
        if let jsonValueLongitude = jsonMap["longitude"] as? NSNumber {
          resultDecodedBuilder.longitude = jsonValueLongitude.doubleValue
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Networking.Requests.Messages.GetMapObjectsMessage.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Networking.Requests.Messages.GetMapObjectsMessage.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
