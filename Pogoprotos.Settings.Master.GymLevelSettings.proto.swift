// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "GymLevelSettings.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Pogoprotos { public struct Settings { public struct Master { }}}

public func == (lhs: Pogoprotos.Settings.Master.GymLevelSettings, rhs: Pogoprotos.Settings.Master.GymLevelSettings) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.requiredExperience == rhs.requiredExperience)
  fieldCheck = fieldCheck && (lhs.leaderSlots == rhs.leaderSlots)
  fieldCheck = fieldCheck && (lhs.trainerSlots == rhs.trainerSlots)
  fieldCheck = fieldCheck && (lhs.searchRollBonus == rhs.searchRollBonus)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Pogoprotos.Settings.Master {
  public struct GymLevelSettingsRoot {
    public static var sharedInstance : GymLevelSettingsRoot {
     struct Static {
         static let instance : GymLevelSettingsRoot = GymLevelSettingsRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class GymLevelSettings : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var requiredExperience:Array<Int32> = Array<Int32>()
    private var requiredExperienceMemoizedSerializedSize:Int32 = -1
    public private(set) var leaderSlots:Array<Int32> = Array<Int32>()
    private var leaderSlotsMemoizedSerializedSize:Int32 = -1
    public private(set) var trainerSlots:Array<Int32> = Array<Int32>()
    private var trainerSlotsMemoizedSerializedSize:Int32 = -1
    public private(set) var searchRollBonus:Array<Int32> = Array<Int32>()
    private var searchRollBonusMemoizedSerializedSize:Int32 = -1
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if !requiredExperience.isEmpty {
        try output.writeRawVarint32(10)
        try output.writeRawVarint32(requiredExperienceMemoizedSerializedSize)
        for oneValuerequiredExperience in requiredExperience {
          try output.writeInt32NoTag(oneValuerequiredExperience)
        }
      }
      if !leaderSlots.isEmpty {
        try output.writeRawVarint32(18)
        try output.writeRawVarint32(leaderSlotsMemoizedSerializedSize)
        for oneValueleaderSlots in leaderSlots {
          try output.writeInt32NoTag(oneValueleaderSlots)
        }
      }
      if !trainerSlots.isEmpty {
        try output.writeRawVarint32(26)
        try output.writeRawVarint32(trainerSlotsMemoizedSerializedSize)
        for oneValuetrainerSlots in trainerSlots {
          try output.writeInt32NoTag(oneValuetrainerSlots)
        }
      }
      if !searchRollBonus.isEmpty {
        try output.writeRawVarint32(34)
        try output.writeRawVarint32(searchRollBonusMemoizedSerializedSize)
        for oneValuesearchRollBonus in searchRollBonus {
          try output.writeInt32NoTag(oneValuesearchRollBonus)
        }
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      var dataSizeRequiredExperience:Int32 = 0
      for oneValuerequiredExperience in requiredExperience {
          dataSizeRequiredExperience += oneValuerequiredExperience.computeInt32SizeNoTag()
      }
      serialize_size += dataSizeRequiredExperience
      if !requiredExperience.isEmpty {
        serialize_size += 1
        serialize_size += dataSizeRequiredExperience.computeInt32SizeNoTag()
      }
      requiredExperienceMemoizedSerializedSize = dataSizeRequiredExperience
      var dataSizeLeaderSlots:Int32 = 0
      for oneValueleaderSlots in leaderSlots {
          dataSizeLeaderSlots += oneValueleaderSlots.computeInt32SizeNoTag()
      }
      serialize_size += dataSizeLeaderSlots
      if !leaderSlots.isEmpty {
        serialize_size += 1
        serialize_size += dataSizeLeaderSlots.computeInt32SizeNoTag()
      }
      leaderSlotsMemoizedSerializedSize = dataSizeLeaderSlots
      var dataSizeTrainerSlots:Int32 = 0
      for oneValuetrainerSlots in trainerSlots {
          dataSizeTrainerSlots += oneValuetrainerSlots.computeInt32SizeNoTag()
      }
      serialize_size += dataSizeTrainerSlots
      if !trainerSlots.isEmpty {
        serialize_size += 1
        serialize_size += dataSizeTrainerSlots.computeInt32SizeNoTag()
      }
      trainerSlotsMemoizedSerializedSize = dataSizeTrainerSlots
      var dataSizeSearchRollBonus:Int32 = 0
      for oneValuesearchRollBonus in searchRollBonus {
          dataSizeSearchRollBonus += oneValuesearchRollBonus.computeInt32SizeNoTag()
      }
      serialize_size += dataSizeSearchRollBonus
      if !searchRollBonus.isEmpty {
        serialize_size += 1
        serialize_size += dataSizeSearchRollBonus.computeInt32SizeNoTag()
      }
      searchRollBonusMemoizedSerializedSize = dataSizeSearchRollBonus
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Settings.Master.GymLevelSettings> {
      var mergedArray = Array<Pogoprotos.Settings.Master.GymLevelSettings>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.Master.GymLevelSettings? {
      return try Pogoprotos.Settings.Master.GymLevelSettings.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Settings.Master.GymLevelSettings {
      return try Pogoprotos.Settings.Master.GymLevelSettings.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Settings.Master.GymLevelSettingsRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.GymLevelSettings {
      return try Pogoprotos.Settings.Master.GymLevelSettings.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.Master.GymLevelSettings {
      return try Pogoprotos.Settings.Master.GymLevelSettings.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.GymLevelSettings {
      return try Pogoprotos.Settings.Master.GymLevelSettings.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.Master.GymLevelSettings {
      return try Pogoprotos.Settings.Master.GymLevelSettings.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.GymLevelSettings {
      return try Pogoprotos.Settings.Master.GymLevelSettings.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Settings.Master.GymLevelSettings.Builder {
      return Pogoprotos.Settings.Master.GymLevelSettings.classBuilder() as! Pogoprotos.Settings.Master.GymLevelSettings.Builder
    }
    public func getBuilder() -> Pogoprotos.Settings.Master.GymLevelSettings.Builder {
      return classBuilder() as! Pogoprotos.Settings.Master.GymLevelSettings.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.Master.GymLevelSettings.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.Master.GymLevelSettings.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Settings.Master.GymLevelSettings.Builder {
      return try Pogoprotos.Settings.Master.GymLevelSettings.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Settings.Master.GymLevelSettings) throws -> Pogoprotos.Settings.Master.GymLevelSettings.Builder {
      return try Pogoprotos.Settings.Master.GymLevelSettings.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if !requiredExperience.isEmpty {
        var jsonArrayRequiredExperience:Array<NSNumber> = []
          for oneValueRequiredExperience in requiredExperience {
            jsonArrayRequiredExperience += [NSNumber(int:oneValueRequiredExperience)]
          }
        jsonMap["requiredExperience"] = jsonArrayRequiredExperience
      }
      if !leaderSlots.isEmpty {
        var jsonArrayLeaderSlots:Array<NSNumber> = []
          for oneValueLeaderSlots in leaderSlots {
            jsonArrayLeaderSlots += [NSNumber(int:oneValueLeaderSlots)]
          }
        jsonMap["leaderSlots"] = jsonArrayLeaderSlots
      }
      if !trainerSlots.isEmpty {
        var jsonArrayTrainerSlots:Array<NSNumber> = []
          for oneValueTrainerSlots in trainerSlots {
            jsonArrayTrainerSlots += [NSNumber(int:oneValueTrainerSlots)]
          }
        jsonMap["trainerSlots"] = jsonArrayTrainerSlots
      }
      if !searchRollBonus.isEmpty {
        var jsonArraySearchRollBonus:Array<NSNumber> = []
          for oneValueSearchRollBonus in searchRollBonus {
            jsonArraySearchRollBonus += [NSNumber(int:oneValueSearchRollBonus)]
          }
        jsonMap["searchRollBonus"] = jsonArraySearchRollBonus
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.Master.GymLevelSettings {
      return try Pogoprotos.Settings.Master.GymLevelSettings.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Settings.Master.GymLevelSettings {
      return try Pogoprotos.Settings.Master.GymLevelSettings.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      var requiredExperienceElementIndex:Int = 0
      for oneValueRequiredExperience in requiredExperience  {
          output += "\(indent) requiredExperience[\(requiredExperienceElementIndex)]: \(oneValueRequiredExperience)\n"
          requiredExperienceElementIndex += 1
      }
      var leaderSlotsElementIndex:Int = 0
      for oneValueLeaderSlots in leaderSlots  {
          output += "\(indent) leaderSlots[\(leaderSlotsElementIndex)]: \(oneValueLeaderSlots)\n"
          leaderSlotsElementIndex += 1
      }
      var trainerSlotsElementIndex:Int = 0
      for oneValueTrainerSlots in trainerSlots  {
          output += "\(indent) trainerSlots[\(trainerSlotsElementIndex)]: \(oneValueTrainerSlots)\n"
          trainerSlotsElementIndex += 1
      }
      var searchRollBonusElementIndex:Int = 0
      for oneValueSearchRollBonus in searchRollBonus  {
          output += "\(indent) searchRollBonus[\(searchRollBonusElementIndex)]: \(oneValueSearchRollBonus)\n"
          searchRollBonusElementIndex += 1
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            for oneValueRequiredExperience in requiredExperience {
                hashCode = (hashCode &* 31) &+ oneValueRequiredExperience.hashValue
            }
            for oneValueLeaderSlots in leaderSlots {
                hashCode = (hashCode &* 31) &+ oneValueLeaderSlots.hashValue
            }
            for oneValueTrainerSlots in trainerSlots {
                hashCode = (hashCode &* 31) &+ oneValueTrainerSlots.hashValue
            }
            for oneValueSearchRollBonus in searchRollBonus {
                hashCode = (hashCode &* 31) &+ oneValueSearchRollBonus.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Settings.Master.GymLevelSettings"
    }
    override public func className() -> String {
        return "Pogoprotos.Settings.Master.GymLevelSettings"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Settings.Master.GymLevelSettings.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Settings.Master.GymLevelSettings = Pogoprotos.Settings.Master.GymLevelSettings()
      public func getMessage() -> Pogoprotos.Settings.Master.GymLevelSettings {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var requiredExperience:Array<Int32> {
           get {
               return builderResult.requiredExperience
           }
           set (array) {
               builderResult.requiredExperience = array
           }
      }
      public func setRequiredExperience(value:Array<Int32>) -> Pogoprotos.Settings.Master.GymLevelSettings.Builder {
        self.requiredExperience = value
        return self
      }
      public func clearRequiredExperience() -> Pogoprotos.Settings.Master.GymLevelSettings.Builder {
         builderResult.requiredExperience.removeAll(keepCapacity: false)
         return self
      }
      public var leaderSlots:Array<Int32> {
           get {
               return builderResult.leaderSlots
           }
           set (array) {
               builderResult.leaderSlots = array
           }
      }
      public func setLeaderSlots(value:Array<Int32>) -> Pogoprotos.Settings.Master.GymLevelSettings.Builder {
        self.leaderSlots = value
        return self
      }
      public func clearLeaderSlots() -> Pogoprotos.Settings.Master.GymLevelSettings.Builder {
         builderResult.leaderSlots.removeAll(keepCapacity: false)
         return self
      }
      public var trainerSlots:Array<Int32> {
           get {
               return builderResult.trainerSlots
           }
           set (array) {
               builderResult.trainerSlots = array
           }
      }
      public func setTrainerSlots(value:Array<Int32>) -> Pogoprotos.Settings.Master.GymLevelSettings.Builder {
        self.trainerSlots = value
        return self
      }
      public func clearTrainerSlots() -> Pogoprotos.Settings.Master.GymLevelSettings.Builder {
         builderResult.trainerSlots.removeAll(keepCapacity: false)
         return self
      }
      public var searchRollBonus:Array<Int32> {
           get {
               return builderResult.searchRollBonus
           }
           set (array) {
               builderResult.searchRollBonus = array
           }
      }
      public func setSearchRollBonus(value:Array<Int32>) -> Pogoprotos.Settings.Master.GymLevelSettings.Builder {
        self.searchRollBonus = value
        return self
      }
      public func clearSearchRollBonus() -> Pogoprotos.Settings.Master.GymLevelSettings.Builder {
         builderResult.searchRollBonus.removeAll(keepCapacity: false)
         return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Settings.Master.GymLevelSettings.Builder {
        builderResult = Pogoprotos.Settings.Master.GymLevelSettings()
        return self
      }
      override public func clone() throws -> Pogoprotos.Settings.Master.GymLevelSettings.Builder {
        return try Pogoprotos.Settings.Master.GymLevelSettings.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Settings.Master.GymLevelSettings {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Settings.Master.GymLevelSettings {
        let returnMe:Pogoprotos.Settings.Master.GymLevelSettings = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Settings.Master.GymLevelSettings) throws -> Pogoprotos.Settings.Master.GymLevelSettings.Builder {
        if other == Pogoprotos.Settings.Master.GymLevelSettings() {
         return self
        }
        if !other.requiredExperience.isEmpty {
            builderResult.requiredExperience += other.requiredExperience
        }
        if !other.leaderSlots.isEmpty {
            builderResult.leaderSlots += other.leaderSlots
        }
        if !other.trainerSlots.isEmpty {
            builderResult.trainerSlots += other.trainerSlots
        }
        if !other.searchRollBonus.isEmpty {
            builderResult.searchRollBonus += other.searchRollBonus
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.Master.GymLevelSettings.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.GymLevelSettings.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10:
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.requiredExperience += [try input.readInt32()]
            }
            input.popLimit(limit)

          case 18:
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.leaderSlots += [try input.readInt32()]
            }
            input.popLimit(limit)

          case 26:
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.trainerSlots += [try input.readInt32()]
            }
            input.popLimit(limit)

          case 34:
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.searchRollBonus += [try input.readInt32()]
            }
            input.popLimit(limit)

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.Master.GymLevelSettings.Builder {
        let resultDecodedBuilder = Pogoprotos.Settings.Master.GymLevelSettings.Builder()
        if let jsonValueRequiredExperience = jsonMap["requiredExperience"] as? Array<NSNumber> {
          var jsonArrayRequiredExperience:Array<Int32> = []
          for oneValueRequiredExperience in jsonValueRequiredExperience {
            jsonArrayRequiredExperience += [oneValueRequiredExperience.intValue]
          }
          resultDecodedBuilder.requiredExperience = jsonArrayRequiredExperience
        }
        if let jsonValueLeaderSlots = jsonMap["leaderSlots"] as? Array<NSNumber> {
          var jsonArrayLeaderSlots:Array<Int32> = []
          for oneValueLeaderSlots in jsonValueLeaderSlots {
            jsonArrayLeaderSlots += [oneValueLeaderSlots.intValue]
          }
          resultDecodedBuilder.leaderSlots = jsonArrayLeaderSlots
        }
        if let jsonValueTrainerSlots = jsonMap["trainerSlots"] as? Array<NSNumber> {
          var jsonArrayTrainerSlots:Array<Int32> = []
          for oneValueTrainerSlots in jsonValueTrainerSlots {
            jsonArrayTrainerSlots += [oneValueTrainerSlots.intValue]
          }
          resultDecodedBuilder.trainerSlots = jsonArrayTrainerSlots
        }
        if let jsonValueSearchRollBonus = jsonMap["searchRollBonus"] as? Array<NSNumber> {
          var jsonArraySearchRollBonus:Array<Int32> = []
          for oneValueSearchRollBonus in jsonValueSearchRollBonus {
            jsonArraySearchRollBonus += [oneValueSearchRollBonus.intValue]
          }
          resultDecodedBuilder.searchRollBonus = jsonArraySearchRollBonus
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Settings.Master.GymLevelSettings.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Settings.Master.GymLevelSettings.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
