// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "GetIncensePokemonResponse.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Pogoprotos { public struct Networking { public struct Responses { }}}

public func == (lhs: Pogoprotos.Networking.Responses.GetIncensePokemonResponse, rhs: Pogoprotos.Networking.Responses.GetIncensePokemonResponse) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasResult == rhs.hasResult) && (!lhs.hasResult || lhs.result == rhs.result)
  fieldCheck = fieldCheck && (lhs.hasPokemonTypeId == rhs.hasPokemonTypeId) && (!lhs.hasPokemonTypeId || lhs.pokemonTypeId == rhs.pokemonTypeId)
  fieldCheck = fieldCheck && (lhs.hasLatitude == rhs.hasLatitude) && (!lhs.hasLatitude || lhs.latitude == rhs.latitude)
  fieldCheck = fieldCheck && (lhs.hasLongitude == rhs.hasLongitude) && (!lhs.hasLongitude || lhs.longitude == rhs.longitude)
  fieldCheck = fieldCheck && (lhs.hasEncounterLocation == rhs.hasEncounterLocation) && (!lhs.hasEncounterLocation || lhs.encounterLocation == rhs.encounterLocation)
  fieldCheck = fieldCheck && (lhs.hasEncounterId == rhs.hasEncounterId) && (!lhs.hasEncounterId || lhs.encounterId == rhs.encounterId)
  fieldCheck = fieldCheck && (lhs.hasDisappearTimestampMs == rhs.hasDisappearTimestampMs) && (!lhs.hasDisappearTimestampMs || lhs.disappearTimestampMs == rhs.disappearTimestampMs)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Pogoprotos.Networking.Responses {
  public struct GetIncensePokemonResponseRoot {
    public static var sharedInstance : GetIncensePokemonResponseRoot {
     struct Static {
         static let instance : GetIncensePokemonResponseRoot = GetIncensePokemonResponseRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class GetIncensePokemonResponse : GeneratedMessage, GeneratedMessageProtocol {


      //Enum type declaration start 

      public enum Result:Int32, CustomDebugStringConvertible, CustomStringConvertible {
        case IncenseEncounterUnknown = 0
        case IncenseEncounterAvailable = 1
        case IncenseEncounterNotAvailable = 2
        public func toString() -> String {
          switch self {
          case .IncenseEncounterUnknown: return "INCENSE_ENCOUNTER_UNKNOWN"
          case .IncenseEncounterAvailable: return "INCENSE_ENCOUNTER_AVAILABLE"
          case .IncenseEncounterNotAvailable: return "INCENSE_ENCOUNTER_NOT_AVAILABLE"
          }
        }
        public static func fromString(str:String) throws -> Pogoprotos.Networking.Responses.GetIncensePokemonResponse.Result {
          switch str {
          case "INCENSE_ENCOUNTER_UNKNOWN":  return .IncenseEncounterUnknown
          case "INCENSE_ENCOUNTER_AVAILABLE":  return .IncenseEncounterAvailable
          case "INCENSE_ENCOUNTER_NOT_AVAILABLE":  return .IncenseEncounterNotAvailable
          default: throw ProtocolBuffersError.InvalidProtocolBuffer("Conversion String to Enum has failed.")
          }
        }
        public var debugDescription:String { return getDescription() }
        public var description:String { return getDescription() }
        private func getDescription() -> String { 
            switch self {
                case .IncenseEncounterUnknown: return ".IncenseEncounterUnknown"
                case .IncenseEncounterAvailable: return ".IncenseEncounterAvailable"
                case .IncenseEncounterNotAvailable: return ".IncenseEncounterNotAvailable"
            }
        }
      }

      //Enum type declaration end 

    public private(set) var result:Pogoprotos.Networking.Responses.GetIncensePokemonResponse.Result = Pogoprotos.Networking.Responses.GetIncensePokemonResponse.Result.IncenseEncounterUnknown
    public private(set) var hasResult:Bool = false
    // TODO: PokemonType.proto or PokemonId.proto
    public private(set) var hasPokemonTypeId:Bool = false
    public private(set) var pokemonTypeId:Int32 = Int32(0)

    public private(set) var hasLatitude:Bool = false
    public private(set) var latitude:Double = Double(0)

    public private(set) var hasLongitude:Bool = false
    public private(set) var longitude:Double = Double(0)

    public private(set) var hasEncounterLocation:Bool = false
    public private(set) var encounterLocation:String = ""

    public private(set) var hasEncounterId:Bool = false
    public private(set) var encounterId:UInt64 = UInt64(0)

    public private(set) var hasDisappearTimestampMs:Bool = false
    public private(set) var disappearTimestampMs:Int64 = Int64(0)

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasResult {
        try output.writeEnum(1, value:result.rawValue)
      }
      if hasPokemonTypeId {
        try output.writeInt32(2, value:pokemonTypeId)
      }
      if hasLatitude {
        try output.writeDouble(3, value:latitude)
      }
      if hasLongitude {
        try output.writeDouble(4, value:longitude)
      }
      if hasEncounterLocation {
        try output.writeString(5, value:encounterLocation)
      }
      if hasEncounterId {
        try output.writeUInt64(6, value:encounterId)
      }
      if hasDisappearTimestampMs {
        try output.writeInt64(7, value:disappearTimestampMs)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if (hasResult) {
        serialize_size += result.rawValue.computeEnumSize(1)
      }
      if hasPokemonTypeId {
        serialize_size += pokemonTypeId.computeInt32Size(2)
      }
      if hasLatitude {
        serialize_size += latitude.computeDoubleSize(3)
      }
      if hasLongitude {
        serialize_size += longitude.computeDoubleSize(4)
      }
      if hasEncounterLocation {
        serialize_size += encounterLocation.computeStringSize(5)
      }
      if hasEncounterId {
        serialize_size += encounterId.computeUInt64Size(6)
      }
      if hasDisappearTimestampMs {
        serialize_size += disappearTimestampMs.computeInt64Size(7)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Networking.Responses.GetIncensePokemonResponse> {
      var mergedArray = Array<Pogoprotos.Networking.Responses.GetIncensePokemonResponse>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Responses.GetIncensePokemonResponse? {
      return try Pogoprotos.Networking.Responses.GetIncensePokemonResponse.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Networking.Responses.GetIncensePokemonResponse {
      return try Pogoprotos.Networking.Responses.GetIncensePokemonResponse.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Networking.Responses.GetIncensePokemonResponseRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Responses.GetIncensePokemonResponse {
      return try Pogoprotos.Networking.Responses.GetIncensePokemonResponse.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Responses.GetIncensePokemonResponse {
      return try Pogoprotos.Networking.Responses.GetIncensePokemonResponse.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Responses.GetIncensePokemonResponse {
      return try Pogoprotos.Networking.Responses.GetIncensePokemonResponse.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Responses.GetIncensePokemonResponse {
      return try Pogoprotos.Networking.Responses.GetIncensePokemonResponse.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Responses.GetIncensePokemonResponse {
      return try Pogoprotos.Networking.Responses.GetIncensePokemonResponse.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Networking.Responses.GetIncensePokemonResponse.Builder {
      return Pogoprotos.Networking.Responses.GetIncensePokemonResponse.classBuilder() as! Pogoprotos.Networking.Responses.GetIncensePokemonResponse.Builder
    }
    public func getBuilder() -> Pogoprotos.Networking.Responses.GetIncensePokemonResponse.Builder {
      return classBuilder() as! Pogoprotos.Networking.Responses.GetIncensePokemonResponse.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Networking.Responses.GetIncensePokemonResponse.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Networking.Responses.GetIncensePokemonResponse.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Networking.Responses.GetIncensePokemonResponse.Builder {
      return try Pogoprotos.Networking.Responses.GetIncensePokemonResponse.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Networking.Responses.GetIncensePokemonResponse) throws -> Pogoprotos.Networking.Responses.GetIncensePokemonResponse.Builder {
      return try Pogoprotos.Networking.Responses.GetIncensePokemonResponse.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasResult {
        jsonMap["result"] = result.toString()
      }
      if hasPokemonTypeId {
        jsonMap["pokemonTypeId"] = NSNumber(int:pokemonTypeId)
      }
      if hasLatitude {
        jsonMap["latitude"] = NSNumber(double:latitude)
      }
      if hasLongitude {
        jsonMap["longitude"] = NSNumber(double:longitude)
      }
      if hasEncounterLocation {
        jsonMap["encounterLocation"] = encounterLocation
      }
      if hasEncounterId {
        jsonMap["encounterId"] = "\(encounterId)"
      }
      if hasDisappearTimestampMs {
        jsonMap["disappearTimestampMs"] = "\(disappearTimestampMs)"
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Responses.GetIncensePokemonResponse {
      return try Pogoprotos.Networking.Responses.GetIncensePokemonResponse.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Networking.Responses.GetIncensePokemonResponse {
      return try Pogoprotos.Networking.Responses.GetIncensePokemonResponse.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if (hasResult) {
        output += "\(indent) result: \(result.description)\n"
      }
      if hasPokemonTypeId {
        output += "\(indent) pokemonTypeId: \(pokemonTypeId) \n"
      }
      if hasLatitude {
        output += "\(indent) latitude: \(latitude) \n"
      }
      if hasLongitude {
        output += "\(indent) longitude: \(longitude) \n"
      }
      if hasEncounterLocation {
        output += "\(indent) encounterLocation: \(encounterLocation) \n"
      }
      if hasEncounterId {
        output += "\(indent) encounterId: \(encounterId) \n"
      }
      if hasDisappearTimestampMs {
        output += "\(indent) disappearTimestampMs: \(disappearTimestampMs) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasResult {
               hashCode = (hashCode &* 31) &+ Int(result.rawValue)
            }
            if hasPokemonTypeId {
               hashCode = (hashCode &* 31) &+ pokemonTypeId.hashValue
            }
            if hasLatitude {
               hashCode = (hashCode &* 31) &+ latitude.hashValue
            }
            if hasLongitude {
               hashCode = (hashCode &* 31) &+ longitude.hashValue
            }
            if hasEncounterLocation {
               hashCode = (hashCode &* 31) &+ encounterLocation.hashValue
            }
            if hasEncounterId {
               hashCode = (hashCode &* 31) &+ encounterId.hashValue
            }
            if hasDisappearTimestampMs {
               hashCode = (hashCode &* 31) &+ disappearTimestampMs.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Networking.Responses.GetIncensePokemonResponse"
    }
    override public func className() -> String {
        return "Pogoprotos.Networking.Responses.GetIncensePokemonResponse"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Networking.Responses.GetIncensePokemonResponse.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Networking.Responses.GetIncensePokemonResponse = Pogoprotos.Networking.Responses.GetIncensePokemonResponse()
      public func getMessage() -> Pogoprotos.Networking.Responses.GetIncensePokemonResponse {
          return builderResult
      }

      required override public init () {
         super.init()
      }
        public var hasResult:Bool{
            get {
                return builderResult.hasResult
            }
        }
        public var result:Pogoprotos.Networking.Responses.GetIncensePokemonResponse.Result {
            get {
                return builderResult.result
            }
            set (value) {
                builderResult.hasResult = true
                builderResult.result = value
            }
        }
        public func setResult(value:Pogoprotos.Networking.Responses.GetIncensePokemonResponse.Result) -> Pogoprotos.Networking.Responses.GetIncensePokemonResponse.Builder {
          self.result = value
          return self
        }
        public func clearResult() -> Pogoprotos.Networking.Responses.GetIncensePokemonResponse.Builder {
           builderResult.hasResult = false
           builderResult.result = .IncenseEncounterUnknown
           return self
        }
      public var hasPokemonTypeId:Bool {
           get {
                return builderResult.hasPokemonTypeId
           }
      }
      public var pokemonTypeId:Int32 {
           get {
                return builderResult.pokemonTypeId
           }
           set (value) {
               builderResult.hasPokemonTypeId = true
               builderResult.pokemonTypeId = value
           }
      }
      public func setPokemonTypeId(value:Int32) -> Pogoprotos.Networking.Responses.GetIncensePokemonResponse.Builder {
        self.pokemonTypeId = value
        return self
      }
      public func clearPokemonTypeId() -> Pogoprotos.Networking.Responses.GetIncensePokemonResponse.Builder{
           builderResult.hasPokemonTypeId = false
           builderResult.pokemonTypeId = Int32(0)
           return self
      }
      public var hasLatitude:Bool {
           get {
                return builderResult.hasLatitude
           }
      }
      public var latitude:Double {
           get {
                return builderResult.latitude
           }
           set (value) {
               builderResult.hasLatitude = true
               builderResult.latitude = value
           }
      }
      public func setLatitude(value:Double) -> Pogoprotos.Networking.Responses.GetIncensePokemonResponse.Builder {
        self.latitude = value
        return self
      }
      public func clearLatitude() -> Pogoprotos.Networking.Responses.GetIncensePokemonResponse.Builder{
           builderResult.hasLatitude = false
           builderResult.latitude = Double(0)
           return self
      }
      public var hasLongitude:Bool {
           get {
                return builderResult.hasLongitude
           }
      }
      public var longitude:Double {
           get {
                return builderResult.longitude
           }
           set (value) {
               builderResult.hasLongitude = true
               builderResult.longitude = value
           }
      }
      public func setLongitude(value:Double) -> Pogoprotos.Networking.Responses.GetIncensePokemonResponse.Builder {
        self.longitude = value
        return self
      }
      public func clearLongitude() -> Pogoprotos.Networking.Responses.GetIncensePokemonResponse.Builder{
           builderResult.hasLongitude = false
           builderResult.longitude = Double(0)
           return self
      }
      public var hasEncounterLocation:Bool {
           get {
                return builderResult.hasEncounterLocation
           }
      }
      public var encounterLocation:String {
           get {
                return builderResult.encounterLocation
           }
           set (value) {
               builderResult.hasEncounterLocation = true
               builderResult.encounterLocation = value
           }
      }
      public func setEncounterLocation(value:String) -> Pogoprotos.Networking.Responses.GetIncensePokemonResponse.Builder {
        self.encounterLocation = value
        return self
      }
      public func clearEncounterLocation() -> Pogoprotos.Networking.Responses.GetIncensePokemonResponse.Builder{
           builderResult.hasEncounterLocation = false
           builderResult.encounterLocation = ""
           return self
      }
      public var hasEncounterId:Bool {
           get {
                return builderResult.hasEncounterId
           }
      }
      public var encounterId:UInt64 {
           get {
                return builderResult.encounterId
           }
           set (value) {
               builderResult.hasEncounterId = true
               builderResult.encounterId = value
           }
      }
      public func setEncounterId(value:UInt64) -> Pogoprotos.Networking.Responses.GetIncensePokemonResponse.Builder {
        self.encounterId = value
        return self
      }
      public func clearEncounterId() -> Pogoprotos.Networking.Responses.GetIncensePokemonResponse.Builder{
           builderResult.hasEncounterId = false
           builderResult.encounterId = UInt64(0)
           return self
      }
      public var hasDisappearTimestampMs:Bool {
           get {
                return builderResult.hasDisappearTimestampMs
           }
      }
      public var disappearTimestampMs:Int64 {
           get {
                return builderResult.disappearTimestampMs
           }
           set (value) {
               builderResult.hasDisappearTimestampMs = true
               builderResult.disappearTimestampMs = value
           }
      }
      public func setDisappearTimestampMs(value:Int64) -> Pogoprotos.Networking.Responses.GetIncensePokemonResponse.Builder {
        self.disappearTimestampMs = value
        return self
      }
      public func clearDisappearTimestampMs() -> Pogoprotos.Networking.Responses.GetIncensePokemonResponse.Builder{
           builderResult.hasDisappearTimestampMs = false
           builderResult.disappearTimestampMs = Int64(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Networking.Responses.GetIncensePokemonResponse.Builder {
        builderResult = Pogoprotos.Networking.Responses.GetIncensePokemonResponse()
        return self
      }
      override public func clone() throws -> Pogoprotos.Networking.Responses.GetIncensePokemonResponse.Builder {
        return try Pogoprotos.Networking.Responses.GetIncensePokemonResponse.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Networking.Responses.GetIncensePokemonResponse {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Networking.Responses.GetIncensePokemonResponse {
        let returnMe:Pogoprotos.Networking.Responses.GetIncensePokemonResponse = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Networking.Responses.GetIncensePokemonResponse) throws -> Pogoprotos.Networking.Responses.GetIncensePokemonResponse.Builder {
        if other == Pogoprotos.Networking.Responses.GetIncensePokemonResponse() {
         return self
        }
        if other.hasResult {
             result = other.result
        }
        if other.hasPokemonTypeId {
             pokemonTypeId = other.pokemonTypeId
        }
        if other.hasLatitude {
             latitude = other.latitude
        }
        if other.hasLongitude {
             longitude = other.longitude
        }
        if other.hasEncounterLocation {
             encounterLocation = other.encounterLocation
        }
        if other.hasEncounterId {
             encounterId = other.encounterId
        }
        if other.hasDisappearTimestampMs {
             disappearTimestampMs = other.disappearTimestampMs
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Responses.GetIncensePokemonResponse.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Responses.GetIncensePokemonResponse.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            let valueIntresult = try input.readEnum()
            if let enumsresult = Pogoprotos.Networking.Responses.GetIncensePokemonResponse.Result(rawValue:valueIntresult){
                 result = enumsresult
            } else {
                 try unknownFieldsBuilder.mergeVarintField(1, value:Int64(valueIntresult))
            }

          case 16:
            pokemonTypeId = try input.readInt32()

          case 25:
            latitude = try input.readDouble()

          case 33:
            longitude = try input.readDouble()

          case 42:
            encounterLocation = try input.readString()

          case 48:
            encounterId = try input.readUInt64()

          case 56:
            disappearTimestampMs = try input.readInt64()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Responses.GetIncensePokemonResponse.Builder {
        let resultDecodedBuilder = Pogoprotos.Networking.Responses.GetIncensePokemonResponse.Builder()
        if let jsonValueResult = jsonMap["result"] as? String {
          resultDecodedBuilder.result = try Pogoprotos.Networking.Responses.GetIncensePokemonResponse.Result.fromString(jsonValueResult)
        }
        if let jsonValuePokemonTypeId = jsonMap["pokemonTypeId"] as? NSNumber {
          resultDecodedBuilder.pokemonTypeId = jsonValuePokemonTypeId.intValue
        }
        if let jsonValueLatitude = jsonMap["latitude"] as? NSNumber {
          resultDecodedBuilder.latitude = jsonValueLatitude.doubleValue
        }
        if let jsonValueLongitude = jsonMap["longitude"] as? NSNumber {
          resultDecodedBuilder.longitude = jsonValueLongitude.doubleValue
        }
        if let jsonValueEncounterLocation = jsonMap["encounterLocation"] as? String {
          resultDecodedBuilder.encounterLocation = jsonValueEncounterLocation
        }
        if let jsonValueEncounterId = jsonMap["encounterId"] as? String {
          resultDecodedBuilder.encounterId = UInt64(jsonValueEncounterId)!
        }
        if let jsonValueDisappearTimestampMs = jsonMap["disappearTimestampMs"] as? String {
          resultDecodedBuilder.disappearTimestampMs = Int64(jsonValueDisappearTimestampMs)!
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Networking.Responses.GetIncensePokemonResponse.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Networking.Responses.GetIncensePokemonResponse.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
