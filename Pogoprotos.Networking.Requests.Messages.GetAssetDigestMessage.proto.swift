// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "GetAssetDigestMessage.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Pogoprotos { public struct Networking { public struct Requests { public struct Messages { }}}}

public func == (lhs: Pogoprotos.Networking.Requests.Messages.GetAssetDigestMessage, rhs: Pogoprotos.Networking.Requests.Messages.GetAssetDigestMessage) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasPlatform == rhs.hasPlatform) && (!lhs.hasPlatform || lhs.platform == rhs.platform)
  fieldCheck = fieldCheck && (lhs.hasDeviceManufacturer == rhs.hasDeviceManufacturer) && (!lhs.hasDeviceManufacturer || lhs.deviceManufacturer == rhs.deviceManufacturer)
  fieldCheck = fieldCheck && (lhs.hasDeviceModel == rhs.hasDeviceModel) && (!lhs.hasDeviceModel || lhs.deviceModel == rhs.deviceModel)
  fieldCheck = fieldCheck && (lhs.hasLocale == rhs.hasLocale) && (!lhs.hasLocale || lhs.locale == rhs.locale)
  fieldCheck = fieldCheck && (lhs.hasAppVersion == rhs.hasAppVersion) && (!lhs.hasAppVersion || lhs.appVersion == rhs.appVersion)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Pogoprotos.Networking.Requests.Messages {
  public struct GetAssetDigestMessageRoot {
    public static var sharedInstance : GetAssetDigestMessageRoot {
     struct Static {
         static let instance : GetAssetDigestMessageRoot = GetAssetDigestMessageRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Pogoprotos.Enums.PlatformRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class GetAssetDigestMessage : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var platform:Pogoprotos.Enums.Platform = Pogoprotos.Enums.Platform.Unset
    public private(set) var hasPlatform:Bool = false
    public private(set) var hasDeviceManufacturer:Bool = false
    public private(set) var deviceManufacturer:String = ""

    public private(set) var hasDeviceModel:Bool = false
    public private(set) var deviceModel:String = ""

    public private(set) var hasLocale:Bool = false
    public private(set) var locale:String = ""

    public private(set) var hasAppVersion:Bool = false
    public private(set) var appVersion:UInt32 = UInt32(0)

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasPlatform {
        try output.writeEnum(1, value:platform.rawValue)
      }
      if hasDeviceManufacturer {
        try output.writeString(2, value:deviceManufacturer)
      }
      if hasDeviceModel {
        try output.writeString(3, value:deviceModel)
      }
      if hasLocale {
        try output.writeString(4, value:locale)
      }
      if hasAppVersion {
        try output.writeUInt32(5, value:appVersion)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if (hasPlatform) {
        serialize_size += platform.rawValue.computeEnumSize(1)
      }
      if hasDeviceManufacturer {
        serialize_size += deviceManufacturer.computeStringSize(2)
      }
      if hasDeviceModel {
        serialize_size += deviceModel.computeStringSize(3)
      }
      if hasLocale {
        serialize_size += locale.computeStringSize(4)
      }
      if hasAppVersion {
        serialize_size += appVersion.computeUInt32Size(5)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Networking.Requests.Messages.GetAssetDigestMessage> {
      var mergedArray = Array<Pogoprotos.Networking.Requests.Messages.GetAssetDigestMessage>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Requests.Messages.GetAssetDigestMessage? {
      return try Pogoprotos.Networking.Requests.Messages.GetAssetDigestMessage.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Networking.Requests.Messages.GetAssetDigestMessage {
      return try Pogoprotos.Networking.Requests.Messages.GetAssetDigestMessage.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Networking.Requests.Messages.GetAssetDigestMessageRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Requests.Messages.GetAssetDigestMessage {
      return try Pogoprotos.Networking.Requests.Messages.GetAssetDigestMessage.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Requests.Messages.GetAssetDigestMessage {
      return try Pogoprotos.Networking.Requests.Messages.GetAssetDigestMessage.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Requests.Messages.GetAssetDigestMessage {
      return try Pogoprotos.Networking.Requests.Messages.GetAssetDigestMessage.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Requests.Messages.GetAssetDigestMessage {
      return try Pogoprotos.Networking.Requests.Messages.GetAssetDigestMessage.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Requests.Messages.GetAssetDigestMessage {
      return try Pogoprotos.Networking.Requests.Messages.GetAssetDigestMessage.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Networking.Requests.Messages.GetAssetDigestMessage.Builder {
      return Pogoprotos.Networking.Requests.Messages.GetAssetDigestMessage.classBuilder() as! Pogoprotos.Networking.Requests.Messages.GetAssetDigestMessage.Builder
    }
    public func getBuilder() -> Pogoprotos.Networking.Requests.Messages.GetAssetDigestMessage.Builder {
      return classBuilder() as! Pogoprotos.Networking.Requests.Messages.GetAssetDigestMessage.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Networking.Requests.Messages.GetAssetDigestMessage.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Networking.Requests.Messages.GetAssetDigestMessage.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Networking.Requests.Messages.GetAssetDigestMessage.Builder {
      return try Pogoprotos.Networking.Requests.Messages.GetAssetDigestMessage.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Networking.Requests.Messages.GetAssetDigestMessage) throws -> Pogoprotos.Networking.Requests.Messages.GetAssetDigestMessage.Builder {
      return try Pogoprotos.Networking.Requests.Messages.GetAssetDigestMessage.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasPlatform {
        jsonMap["platform"] = platform.toString()
      }
      if hasDeviceManufacturer {
        jsonMap["deviceManufacturer"] = deviceManufacturer
      }
      if hasDeviceModel {
        jsonMap["deviceModel"] = deviceModel
      }
      if hasLocale {
        jsonMap["locale"] = locale
      }
      if hasAppVersion {
        jsonMap["appVersion"] = NSNumber(unsignedInt:appVersion)
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Requests.Messages.GetAssetDigestMessage {
      return try Pogoprotos.Networking.Requests.Messages.GetAssetDigestMessage.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Networking.Requests.Messages.GetAssetDigestMessage {
      return try Pogoprotos.Networking.Requests.Messages.GetAssetDigestMessage.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if (hasPlatform) {
        output += "\(indent) platform: \(platform.description)\n"
      }
      if hasDeviceManufacturer {
        output += "\(indent) deviceManufacturer: \(deviceManufacturer) \n"
      }
      if hasDeviceModel {
        output += "\(indent) deviceModel: \(deviceModel) \n"
      }
      if hasLocale {
        output += "\(indent) locale: \(locale) \n"
      }
      if hasAppVersion {
        output += "\(indent) appVersion: \(appVersion) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasPlatform {
               hashCode = (hashCode &* 31) &+ Int(platform.rawValue)
            }
            if hasDeviceManufacturer {
               hashCode = (hashCode &* 31) &+ deviceManufacturer.hashValue
            }
            if hasDeviceModel {
               hashCode = (hashCode &* 31) &+ deviceModel.hashValue
            }
            if hasLocale {
               hashCode = (hashCode &* 31) &+ locale.hashValue
            }
            if hasAppVersion {
               hashCode = (hashCode &* 31) &+ appVersion.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Networking.Requests.Messages.GetAssetDigestMessage"
    }
    override public func className() -> String {
        return "Pogoprotos.Networking.Requests.Messages.GetAssetDigestMessage"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Networking.Requests.Messages.GetAssetDigestMessage.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Networking.Requests.Messages.GetAssetDigestMessage = Pogoprotos.Networking.Requests.Messages.GetAssetDigestMessage()
      public func getMessage() -> Pogoprotos.Networking.Requests.Messages.GetAssetDigestMessage {
          return builderResult
      }

      required override public init () {
         super.init()
      }
        public var hasPlatform:Bool{
            get {
                return builderResult.hasPlatform
            }
        }
        public var platform:Pogoprotos.Enums.Platform {
            get {
                return builderResult.platform
            }
            set (value) {
                builderResult.hasPlatform = true
                builderResult.platform = value
            }
        }
        public func setPlatform(value:Pogoprotos.Enums.Platform) -> Pogoprotos.Networking.Requests.Messages.GetAssetDigestMessage.Builder {
          self.platform = value
          return self
        }
        public func clearPlatform() -> Pogoprotos.Networking.Requests.Messages.GetAssetDigestMessage.Builder {
           builderResult.hasPlatform = false
           builderResult.platform = .Unset
           return self
        }
      public var hasDeviceManufacturer:Bool {
           get {
                return builderResult.hasDeviceManufacturer
           }
      }
      public var deviceManufacturer:String {
           get {
                return builderResult.deviceManufacturer
           }
           set (value) {
               builderResult.hasDeviceManufacturer = true
               builderResult.deviceManufacturer = value
           }
      }
      public func setDeviceManufacturer(value:String) -> Pogoprotos.Networking.Requests.Messages.GetAssetDigestMessage.Builder {
        self.deviceManufacturer = value
        return self
      }
      public func clearDeviceManufacturer() -> Pogoprotos.Networking.Requests.Messages.GetAssetDigestMessage.Builder{
           builderResult.hasDeviceManufacturer = false
           builderResult.deviceManufacturer = ""
           return self
      }
      public var hasDeviceModel:Bool {
           get {
                return builderResult.hasDeviceModel
           }
      }
      public var deviceModel:String {
           get {
                return builderResult.deviceModel
           }
           set (value) {
               builderResult.hasDeviceModel = true
               builderResult.deviceModel = value
           }
      }
      public func setDeviceModel(value:String) -> Pogoprotos.Networking.Requests.Messages.GetAssetDigestMessage.Builder {
        self.deviceModel = value
        return self
      }
      public func clearDeviceModel() -> Pogoprotos.Networking.Requests.Messages.GetAssetDigestMessage.Builder{
           builderResult.hasDeviceModel = false
           builderResult.deviceModel = ""
           return self
      }
      public var hasLocale:Bool {
           get {
                return builderResult.hasLocale
           }
      }
      public var locale:String {
           get {
                return builderResult.locale
           }
           set (value) {
               builderResult.hasLocale = true
               builderResult.locale = value
           }
      }
      public func setLocale(value:String) -> Pogoprotos.Networking.Requests.Messages.GetAssetDigestMessage.Builder {
        self.locale = value
        return self
      }
      public func clearLocale() -> Pogoprotos.Networking.Requests.Messages.GetAssetDigestMessage.Builder{
           builderResult.hasLocale = false
           builderResult.locale = ""
           return self
      }
      public var hasAppVersion:Bool {
           get {
                return builderResult.hasAppVersion
           }
      }
      public var appVersion:UInt32 {
           get {
                return builderResult.appVersion
           }
           set (value) {
               builderResult.hasAppVersion = true
               builderResult.appVersion = value
           }
      }
      public func setAppVersion(value:UInt32) -> Pogoprotos.Networking.Requests.Messages.GetAssetDigestMessage.Builder {
        self.appVersion = value
        return self
      }
      public func clearAppVersion() -> Pogoprotos.Networking.Requests.Messages.GetAssetDigestMessage.Builder{
           builderResult.hasAppVersion = false
           builderResult.appVersion = UInt32(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Networking.Requests.Messages.GetAssetDigestMessage.Builder {
        builderResult = Pogoprotos.Networking.Requests.Messages.GetAssetDigestMessage()
        return self
      }
      override public func clone() throws -> Pogoprotos.Networking.Requests.Messages.GetAssetDigestMessage.Builder {
        return try Pogoprotos.Networking.Requests.Messages.GetAssetDigestMessage.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Networking.Requests.Messages.GetAssetDigestMessage {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Networking.Requests.Messages.GetAssetDigestMessage {
        let returnMe:Pogoprotos.Networking.Requests.Messages.GetAssetDigestMessage = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Networking.Requests.Messages.GetAssetDigestMessage) throws -> Pogoprotos.Networking.Requests.Messages.GetAssetDigestMessage.Builder {
        if other == Pogoprotos.Networking.Requests.Messages.GetAssetDigestMessage() {
         return self
        }
        if other.hasPlatform {
             platform = other.platform
        }
        if other.hasDeviceManufacturer {
             deviceManufacturer = other.deviceManufacturer
        }
        if other.hasDeviceModel {
             deviceModel = other.deviceModel
        }
        if other.hasLocale {
             locale = other.locale
        }
        if other.hasAppVersion {
             appVersion = other.appVersion
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Requests.Messages.GetAssetDigestMessage.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Requests.Messages.GetAssetDigestMessage.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            let valueIntplatform = try input.readEnum()
            if let enumsplatform = Pogoprotos.Enums.Platform(rawValue:valueIntplatform){
                 platform = enumsplatform
            } else {
                 try unknownFieldsBuilder.mergeVarintField(1, value:Int64(valueIntplatform))
            }

          case 18:
            deviceManufacturer = try input.readString()

          case 26:
            deviceModel = try input.readString()

          case 34:
            locale = try input.readString()

          case 40:
            appVersion = try input.readUInt32()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Requests.Messages.GetAssetDigestMessage.Builder {
        let resultDecodedBuilder = Pogoprotos.Networking.Requests.Messages.GetAssetDigestMessage.Builder()
        if let jsonValuePlatform = jsonMap["platform"] as? String {
          resultDecodedBuilder.platform = try Pogoprotos.Enums.Platform.fromString(jsonValuePlatform)
        }
        if let jsonValueDeviceManufacturer = jsonMap["deviceManufacturer"] as? String {
          resultDecodedBuilder.deviceManufacturer = jsonValueDeviceManufacturer
        }
        if let jsonValueDeviceModel = jsonMap["deviceModel"] as? String {
          resultDecodedBuilder.deviceModel = jsonValueDeviceModel
        }
        if let jsonValueLocale = jsonMap["locale"] as? String {
          resultDecodedBuilder.locale = jsonValueLocale
        }
        if let jsonValueAppVersion = jsonMap["appVersion"] as? NSNumber {
          resultDecodedBuilder.appVersion = jsonValueAppVersion.unsignedIntValue
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Networking.Requests.Messages.GetAssetDigestMessage.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Networking.Requests.Messages.GetAssetDigestMessage.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
