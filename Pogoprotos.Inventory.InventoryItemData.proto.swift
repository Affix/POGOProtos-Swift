// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "InventoryItemData.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Pogoprotos { public struct Inventory { }}

public func == (lhs: Pogoprotos.Inventory.InventoryItemData, rhs: Pogoprotos.Inventory.InventoryItemData) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasPokemonData == rhs.hasPokemonData) && (!lhs.hasPokemonData || lhs.pokemonData == rhs.pokemonData)
  fieldCheck = fieldCheck && (lhs.hasItem == rhs.hasItem) && (!lhs.hasItem || lhs.item == rhs.item)
  fieldCheck = fieldCheck && (lhs.hasPokedexEntry == rhs.hasPokedexEntry) && (!lhs.hasPokedexEntry || lhs.pokedexEntry == rhs.pokedexEntry)
  fieldCheck = fieldCheck && (lhs.hasPlayerStats == rhs.hasPlayerStats) && (!lhs.hasPlayerStats || lhs.playerStats == rhs.playerStats)
  fieldCheck = fieldCheck && (lhs.hasPlayerCurrency == rhs.hasPlayerCurrency) && (!lhs.hasPlayerCurrency || lhs.playerCurrency == rhs.playerCurrency)
  fieldCheck = fieldCheck && (lhs.hasPlayerCamera == rhs.hasPlayerCamera) && (!lhs.hasPlayerCamera || lhs.playerCamera == rhs.playerCamera)
  fieldCheck = fieldCheck && (lhs.hasInventoryUpgrades == rhs.hasInventoryUpgrades) && (!lhs.hasInventoryUpgrades || lhs.inventoryUpgrades == rhs.inventoryUpgrades)
  fieldCheck = fieldCheck && (lhs.hasAppliedItems == rhs.hasAppliedItems) && (!lhs.hasAppliedItems || lhs.appliedItems == rhs.appliedItems)
  fieldCheck = fieldCheck && (lhs.hasEggIncubators == rhs.hasEggIncubators) && (!lhs.hasEggIncubators || lhs.eggIncubators == rhs.eggIncubators)
  fieldCheck = fieldCheck && (lhs.hasPokemonFamily == rhs.hasPokemonFamily) && (!lhs.hasPokemonFamily || lhs.pokemonFamily == rhs.pokemonFamily)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Pogoprotos.Inventory {
  public struct InventoryItemDataRoot {
    public static var sharedInstance : InventoryItemDataRoot {
     struct Static {
         static let instance : InventoryItemDataRoot = InventoryItemDataRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Pogoprotos.Inventory.Item.ItemDataRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Inventory.AppliedItemsRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Inventory.EggIncubatorsRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Inventory.PokemonFamilyRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Inventory.InventoryUpgradesRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Data.PokemonDataRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Data.PokedexEntryRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Data.Player.PlayerStatsRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Data.Player.PlayerCurrencyRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Data.Player.PlayerCameraRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class InventoryItemData : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasPokemonData:Bool = false
    public private(set) var pokemonData:Pogoprotos.Data.PokemonData!
    public private(set) var hasItem:Bool = false
    public private(set) var item:Pogoprotos.Inventory.Item.ItemData!
    public private(set) var hasPokedexEntry:Bool = false
    public private(set) var pokedexEntry:Pogoprotos.Data.PokedexEntry!
    public private(set) var hasPlayerStats:Bool = false
    public private(set) var playerStats:Pogoprotos.Data.Player.PlayerStats!
    public private(set) var hasPlayerCurrency:Bool = false
    public private(set) var playerCurrency:Pogoprotos.Data.Player.PlayerCurrency!
    public private(set) var hasPlayerCamera:Bool = false
    public private(set) var playerCamera:Pogoprotos.Data.Player.PlayerCamera!
    public private(set) var hasInventoryUpgrades:Bool = false
    public private(set) var inventoryUpgrades:Pogoprotos.Inventory.InventoryUpgrades!
    public private(set) var hasAppliedItems:Bool = false
    public private(set) var appliedItems:Pogoprotos.Inventory.AppliedItems!
    public private(set) var hasEggIncubators:Bool = false
    public private(set) var eggIncubators:Pogoprotos.Inventory.EggIncubators!
    public private(set) var hasPokemonFamily:Bool = false
    public private(set) var pokemonFamily:Pogoprotos.Inventory.PokemonFamily!
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasPokemonData {
        try output.writeMessage(1, value:pokemonData)
      }
      if hasItem {
        try output.writeMessage(2, value:item)
      }
      if hasPokedexEntry {
        try output.writeMessage(3, value:pokedexEntry)
      }
      if hasPlayerStats {
        try output.writeMessage(4, value:playerStats)
      }
      if hasPlayerCurrency {
        try output.writeMessage(5, value:playerCurrency)
      }
      if hasPlayerCamera {
        try output.writeMessage(6, value:playerCamera)
      }
      if hasInventoryUpgrades {
        try output.writeMessage(7, value:inventoryUpgrades)
      }
      if hasAppliedItems {
        try output.writeMessage(8, value:appliedItems)
      }
      if hasEggIncubators {
        try output.writeMessage(9, value:eggIncubators)
      }
      if hasPokemonFamily {
        try output.writeMessage(10, value:pokemonFamily)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasPokemonData {
          if let varSizepokemonData = pokemonData?.computeMessageSize(1) {
              serialize_size += varSizepokemonData
          }
      }
      if hasItem {
          if let varSizeitem = item?.computeMessageSize(2) {
              serialize_size += varSizeitem
          }
      }
      if hasPokedexEntry {
          if let varSizepokedexEntry = pokedexEntry?.computeMessageSize(3) {
              serialize_size += varSizepokedexEntry
          }
      }
      if hasPlayerStats {
          if let varSizeplayerStats = playerStats?.computeMessageSize(4) {
              serialize_size += varSizeplayerStats
          }
      }
      if hasPlayerCurrency {
          if let varSizeplayerCurrency = playerCurrency?.computeMessageSize(5) {
              serialize_size += varSizeplayerCurrency
          }
      }
      if hasPlayerCamera {
          if let varSizeplayerCamera = playerCamera?.computeMessageSize(6) {
              serialize_size += varSizeplayerCamera
          }
      }
      if hasInventoryUpgrades {
          if let varSizeinventoryUpgrades = inventoryUpgrades?.computeMessageSize(7) {
              serialize_size += varSizeinventoryUpgrades
          }
      }
      if hasAppliedItems {
          if let varSizeappliedItems = appliedItems?.computeMessageSize(8) {
              serialize_size += varSizeappliedItems
          }
      }
      if hasEggIncubators {
          if let varSizeeggIncubators = eggIncubators?.computeMessageSize(9) {
              serialize_size += varSizeeggIncubators
          }
      }
      if hasPokemonFamily {
          if let varSizepokemonFamily = pokemonFamily?.computeMessageSize(10) {
              serialize_size += varSizepokemonFamily
          }
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Inventory.InventoryItemData> {
      var mergedArray = Array<Pogoprotos.Inventory.InventoryItemData>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Inventory.InventoryItemData? {
      return try Pogoprotos.Inventory.InventoryItemData.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Inventory.InventoryItemData {
      return try Pogoprotos.Inventory.InventoryItemData.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Inventory.InventoryItemDataRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Inventory.InventoryItemData {
      return try Pogoprotos.Inventory.InventoryItemData.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Inventory.InventoryItemData {
      return try Pogoprotos.Inventory.InventoryItemData.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Inventory.InventoryItemData {
      return try Pogoprotos.Inventory.InventoryItemData.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Inventory.InventoryItemData {
      return try Pogoprotos.Inventory.InventoryItemData.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Inventory.InventoryItemData {
      return try Pogoprotos.Inventory.InventoryItemData.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Inventory.InventoryItemData.Builder {
      return Pogoprotos.Inventory.InventoryItemData.classBuilder() as! Pogoprotos.Inventory.InventoryItemData.Builder
    }
    public func getBuilder() -> Pogoprotos.Inventory.InventoryItemData.Builder {
      return classBuilder() as! Pogoprotos.Inventory.InventoryItemData.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Inventory.InventoryItemData.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Inventory.InventoryItemData.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Inventory.InventoryItemData.Builder {
      return try Pogoprotos.Inventory.InventoryItemData.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Inventory.InventoryItemData) throws -> Pogoprotos.Inventory.InventoryItemData.Builder {
      return try Pogoprotos.Inventory.InventoryItemData.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasPokemonData {
        jsonMap["pokemonData"] = try pokemonData.encode()
      }
      if hasItem {
        jsonMap["item"] = try item.encode()
      }
      if hasPokedexEntry {
        jsonMap["pokedexEntry"] = try pokedexEntry.encode()
      }
      if hasPlayerStats {
        jsonMap["playerStats"] = try playerStats.encode()
      }
      if hasPlayerCurrency {
        jsonMap["playerCurrency"] = try playerCurrency.encode()
      }
      if hasPlayerCamera {
        jsonMap["playerCamera"] = try playerCamera.encode()
      }
      if hasInventoryUpgrades {
        jsonMap["inventoryUpgrades"] = try inventoryUpgrades.encode()
      }
      if hasAppliedItems {
        jsonMap["appliedItems"] = try appliedItems.encode()
      }
      if hasEggIncubators {
        jsonMap["eggIncubators"] = try eggIncubators.encode()
      }
      if hasPokemonFamily {
        jsonMap["pokemonFamily"] = try pokemonFamily.encode()
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Inventory.InventoryItemData {
      return try Pogoprotos.Inventory.InventoryItemData.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Inventory.InventoryItemData {
      return try Pogoprotos.Inventory.InventoryItemData.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasPokemonData {
        output += "\(indent) pokemonData {\n"
        if let outDescPokemonData = pokemonData {
          output += try outDescPokemonData.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasItem {
        output += "\(indent) item {\n"
        if let outDescItem = item {
          output += try outDescItem.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasPokedexEntry {
        output += "\(indent) pokedexEntry {\n"
        if let outDescPokedexEntry = pokedexEntry {
          output += try outDescPokedexEntry.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasPlayerStats {
        output += "\(indent) playerStats {\n"
        if let outDescPlayerStats = playerStats {
          output += try outDescPlayerStats.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasPlayerCurrency {
        output += "\(indent) playerCurrency {\n"
        if let outDescPlayerCurrency = playerCurrency {
          output += try outDescPlayerCurrency.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasPlayerCamera {
        output += "\(indent) playerCamera {\n"
        if let outDescPlayerCamera = playerCamera {
          output += try outDescPlayerCamera.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasInventoryUpgrades {
        output += "\(indent) inventoryUpgrades {\n"
        if let outDescInventoryUpgrades = inventoryUpgrades {
          output += try outDescInventoryUpgrades.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasAppliedItems {
        output += "\(indent) appliedItems {\n"
        if let outDescAppliedItems = appliedItems {
          output += try outDescAppliedItems.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasEggIncubators {
        output += "\(indent) eggIncubators {\n"
        if let outDescEggIncubators = eggIncubators {
          output += try outDescEggIncubators.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasPokemonFamily {
        output += "\(indent) pokemonFamily {\n"
        if let outDescPokemonFamily = pokemonFamily {
          output += try outDescPokemonFamily.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasPokemonData {
                if let hashValuepokemonData = pokemonData?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuepokemonData
                }
            }
            if hasItem {
                if let hashValueitem = item?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueitem
                }
            }
            if hasPokedexEntry {
                if let hashValuepokedexEntry = pokedexEntry?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuepokedexEntry
                }
            }
            if hasPlayerStats {
                if let hashValueplayerStats = playerStats?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueplayerStats
                }
            }
            if hasPlayerCurrency {
                if let hashValueplayerCurrency = playerCurrency?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueplayerCurrency
                }
            }
            if hasPlayerCamera {
                if let hashValueplayerCamera = playerCamera?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueplayerCamera
                }
            }
            if hasInventoryUpgrades {
                if let hashValueinventoryUpgrades = inventoryUpgrades?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueinventoryUpgrades
                }
            }
            if hasAppliedItems {
                if let hashValueappliedItems = appliedItems?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueappliedItems
                }
            }
            if hasEggIncubators {
                if let hashValueeggIncubators = eggIncubators?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueeggIncubators
                }
            }
            if hasPokemonFamily {
                if let hashValuepokemonFamily = pokemonFamily?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuepokemonFamily
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Inventory.InventoryItemData"
    }
    override public func className() -> String {
        return "Pogoprotos.Inventory.InventoryItemData"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Inventory.InventoryItemData.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Inventory.InventoryItemData = Pogoprotos.Inventory.InventoryItemData()
      public func getMessage() -> Pogoprotos.Inventory.InventoryItemData {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasPokemonData:Bool {
           get {
               return builderResult.hasPokemonData
           }
      }
      public var pokemonData:Pogoprotos.Data.PokemonData! {
           get {
               if pokemonDataBuilder_ != nil {
                  builderResult.pokemonData = pokemonDataBuilder_.getMessage()
               }
               return builderResult.pokemonData
           }
           set (value) {
               builderResult.hasPokemonData = true
               builderResult.pokemonData = value
           }
      }
      private var pokemonDataBuilder_:Pogoprotos.Data.PokemonData.Builder! {
           didSet {
              builderResult.hasPokemonData = true
           }
      }
      public func getPokemonDataBuilder() -> Pogoprotos.Data.PokemonData.Builder {
        if pokemonDataBuilder_ == nil {
           pokemonDataBuilder_ = Pogoprotos.Data.PokemonData.Builder()
           builderResult.pokemonData = pokemonDataBuilder_.getMessage()
           if pokemonData != nil {
              try! pokemonDataBuilder_.mergeFrom(pokemonData)
           }
        }
        return pokemonDataBuilder_
      }
      public func setPokemonData(value:Pogoprotos.Data.PokemonData!) -> Pogoprotos.Inventory.InventoryItemData.Builder {
        self.pokemonData = value
        return self
      }
      public func mergePokemonData(value:Pogoprotos.Data.PokemonData) throws -> Pogoprotos.Inventory.InventoryItemData.Builder {
        if builderResult.hasPokemonData {
          builderResult.pokemonData = try Pogoprotos.Data.PokemonData.builderWithPrototype(builderResult.pokemonData).mergeFrom(value).buildPartial()
        } else {
          builderResult.pokemonData = value
        }
        builderResult.hasPokemonData = true
        return self
      }
      public func clearPokemonData() -> Pogoprotos.Inventory.InventoryItemData.Builder {
        pokemonDataBuilder_ = nil
        builderResult.hasPokemonData = false
        builderResult.pokemonData = nil
        return self
      }
      public var hasItem:Bool {
           get {
               return builderResult.hasItem
           }
      }
      public var item:Pogoprotos.Inventory.Item.ItemData! {
           get {
               if itemBuilder_ != nil {
                  builderResult.item = itemBuilder_.getMessage()
               }
               return builderResult.item
           }
           set (value) {
               builderResult.hasItem = true
               builderResult.item = value
           }
      }
      private var itemBuilder_:Pogoprotos.Inventory.Item.ItemData.Builder! {
           didSet {
              builderResult.hasItem = true
           }
      }
      public func getItemBuilder() -> Pogoprotos.Inventory.Item.ItemData.Builder {
        if itemBuilder_ == nil {
           itemBuilder_ = Pogoprotos.Inventory.Item.ItemData.Builder()
           builderResult.item = itemBuilder_.getMessage()
           if item != nil {
              try! itemBuilder_.mergeFrom(item)
           }
        }
        return itemBuilder_
      }
      public func setItem(value:Pogoprotos.Inventory.Item.ItemData!) -> Pogoprotos.Inventory.InventoryItemData.Builder {
        self.item = value
        return self
      }
      public func mergeItem(value:Pogoprotos.Inventory.Item.ItemData) throws -> Pogoprotos.Inventory.InventoryItemData.Builder {
        if builderResult.hasItem {
          builderResult.item = try Pogoprotos.Inventory.Item.ItemData.builderWithPrototype(builderResult.item).mergeFrom(value).buildPartial()
        } else {
          builderResult.item = value
        }
        builderResult.hasItem = true
        return self
      }
      public func clearItem() -> Pogoprotos.Inventory.InventoryItemData.Builder {
        itemBuilder_ = nil
        builderResult.hasItem = false
        builderResult.item = nil
        return self
      }
      public var hasPokedexEntry:Bool {
           get {
               return builderResult.hasPokedexEntry
           }
      }
      public var pokedexEntry:Pogoprotos.Data.PokedexEntry! {
           get {
               if pokedexEntryBuilder_ != nil {
                  builderResult.pokedexEntry = pokedexEntryBuilder_.getMessage()
               }
               return builderResult.pokedexEntry
           }
           set (value) {
               builderResult.hasPokedexEntry = true
               builderResult.pokedexEntry = value
           }
      }
      private var pokedexEntryBuilder_:Pogoprotos.Data.PokedexEntry.Builder! {
           didSet {
              builderResult.hasPokedexEntry = true
           }
      }
      public func getPokedexEntryBuilder() -> Pogoprotos.Data.PokedexEntry.Builder {
        if pokedexEntryBuilder_ == nil {
           pokedexEntryBuilder_ = Pogoprotos.Data.PokedexEntry.Builder()
           builderResult.pokedexEntry = pokedexEntryBuilder_.getMessage()
           if pokedexEntry != nil {
              try! pokedexEntryBuilder_.mergeFrom(pokedexEntry)
           }
        }
        return pokedexEntryBuilder_
      }
      public func setPokedexEntry(value:Pogoprotos.Data.PokedexEntry!) -> Pogoprotos.Inventory.InventoryItemData.Builder {
        self.pokedexEntry = value
        return self
      }
      public func mergePokedexEntry(value:Pogoprotos.Data.PokedexEntry) throws -> Pogoprotos.Inventory.InventoryItemData.Builder {
        if builderResult.hasPokedexEntry {
          builderResult.pokedexEntry = try Pogoprotos.Data.PokedexEntry.builderWithPrototype(builderResult.pokedexEntry).mergeFrom(value).buildPartial()
        } else {
          builderResult.pokedexEntry = value
        }
        builderResult.hasPokedexEntry = true
        return self
      }
      public func clearPokedexEntry() -> Pogoprotos.Inventory.InventoryItemData.Builder {
        pokedexEntryBuilder_ = nil
        builderResult.hasPokedexEntry = false
        builderResult.pokedexEntry = nil
        return self
      }
      public var hasPlayerStats:Bool {
           get {
               return builderResult.hasPlayerStats
           }
      }
      public var playerStats:Pogoprotos.Data.Player.PlayerStats! {
           get {
               if playerStatsBuilder_ != nil {
                  builderResult.playerStats = playerStatsBuilder_.getMessage()
               }
               return builderResult.playerStats
           }
           set (value) {
               builderResult.hasPlayerStats = true
               builderResult.playerStats = value
           }
      }
      private var playerStatsBuilder_:Pogoprotos.Data.Player.PlayerStats.Builder! {
           didSet {
              builderResult.hasPlayerStats = true
           }
      }
      public func getPlayerStatsBuilder() -> Pogoprotos.Data.Player.PlayerStats.Builder {
        if playerStatsBuilder_ == nil {
           playerStatsBuilder_ = Pogoprotos.Data.Player.PlayerStats.Builder()
           builderResult.playerStats = playerStatsBuilder_.getMessage()
           if playerStats != nil {
              try! playerStatsBuilder_.mergeFrom(playerStats)
           }
        }
        return playerStatsBuilder_
      }
      public func setPlayerStats(value:Pogoprotos.Data.Player.PlayerStats!) -> Pogoprotos.Inventory.InventoryItemData.Builder {
        self.playerStats = value
        return self
      }
      public func mergePlayerStats(value:Pogoprotos.Data.Player.PlayerStats) throws -> Pogoprotos.Inventory.InventoryItemData.Builder {
        if builderResult.hasPlayerStats {
          builderResult.playerStats = try Pogoprotos.Data.Player.PlayerStats.builderWithPrototype(builderResult.playerStats).mergeFrom(value).buildPartial()
        } else {
          builderResult.playerStats = value
        }
        builderResult.hasPlayerStats = true
        return self
      }
      public func clearPlayerStats() -> Pogoprotos.Inventory.InventoryItemData.Builder {
        playerStatsBuilder_ = nil
        builderResult.hasPlayerStats = false
        builderResult.playerStats = nil
        return self
      }
      public var hasPlayerCurrency:Bool {
           get {
               return builderResult.hasPlayerCurrency
           }
      }
      public var playerCurrency:Pogoprotos.Data.Player.PlayerCurrency! {
           get {
               if playerCurrencyBuilder_ != nil {
                  builderResult.playerCurrency = playerCurrencyBuilder_.getMessage()
               }
               return builderResult.playerCurrency
           }
           set (value) {
               builderResult.hasPlayerCurrency = true
               builderResult.playerCurrency = value
           }
      }
      private var playerCurrencyBuilder_:Pogoprotos.Data.Player.PlayerCurrency.Builder! {
           didSet {
              builderResult.hasPlayerCurrency = true
           }
      }
      public func getPlayerCurrencyBuilder() -> Pogoprotos.Data.Player.PlayerCurrency.Builder {
        if playerCurrencyBuilder_ == nil {
           playerCurrencyBuilder_ = Pogoprotos.Data.Player.PlayerCurrency.Builder()
           builderResult.playerCurrency = playerCurrencyBuilder_.getMessage()
           if playerCurrency != nil {
              try! playerCurrencyBuilder_.mergeFrom(playerCurrency)
           }
        }
        return playerCurrencyBuilder_
      }
      public func setPlayerCurrency(value:Pogoprotos.Data.Player.PlayerCurrency!) -> Pogoprotos.Inventory.InventoryItemData.Builder {
        self.playerCurrency = value
        return self
      }
      public func mergePlayerCurrency(value:Pogoprotos.Data.Player.PlayerCurrency) throws -> Pogoprotos.Inventory.InventoryItemData.Builder {
        if builderResult.hasPlayerCurrency {
          builderResult.playerCurrency = try Pogoprotos.Data.Player.PlayerCurrency.builderWithPrototype(builderResult.playerCurrency).mergeFrom(value).buildPartial()
        } else {
          builderResult.playerCurrency = value
        }
        builderResult.hasPlayerCurrency = true
        return self
      }
      public func clearPlayerCurrency() -> Pogoprotos.Inventory.InventoryItemData.Builder {
        playerCurrencyBuilder_ = nil
        builderResult.hasPlayerCurrency = false
        builderResult.playerCurrency = nil
        return self
      }
      public var hasPlayerCamera:Bool {
           get {
               return builderResult.hasPlayerCamera
           }
      }
      public var playerCamera:Pogoprotos.Data.Player.PlayerCamera! {
           get {
               if playerCameraBuilder_ != nil {
                  builderResult.playerCamera = playerCameraBuilder_.getMessage()
               }
               return builderResult.playerCamera
           }
           set (value) {
               builderResult.hasPlayerCamera = true
               builderResult.playerCamera = value
           }
      }
      private var playerCameraBuilder_:Pogoprotos.Data.Player.PlayerCamera.Builder! {
           didSet {
              builderResult.hasPlayerCamera = true
           }
      }
      public func getPlayerCameraBuilder() -> Pogoprotos.Data.Player.PlayerCamera.Builder {
        if playerCameraBuilder_ == nil {
           playerCameraBuilder_ = Pogoprotos.Data.Player.PlayerCamera.Builder()
           builderResult.playerCamera = playerCameraBuilder_.getMessage()
           if playerCamera != nil {
              try! playerCameraBuilder_.mergeFrom(playerCamera)
           }
        }
        return playerCameraBuilder_
      }
      public func setPlayerCamera(value:Pogoprotos.Data.Player.PlayerCamera!) -> Pogoprotos.Inventory.InventoryItemData.Builder {
        self.playerCamera = value
        return self
      }
      public func mergePlayerCamera(value:Pogoprotos.Data.Player.PlayerCamera) throws -> Pogoprotos.Inventory.InventoryItemData.Builder {
        if builderResult.hasPlayerCamera {
          builderResult.playerCamera = try Pogoprotos.Data.Player.PlayerCamera.builderWithPrototype(builderResult.playerCamera).mergeFrom(value).buildPartial()
        } else {
          builderResult.playerCamera = value
        }
        builderResult.hasPlayerCamera = true
        return self
      }
      public func clearPlayerCamera() -> Pogoprotos.Inventory.InventoryItemData.Builder {
        playerCameraBuilder_ = nil
        builderResult.hasPlayerCamera = false
        builderResult.playerCamera = nil
        return self
      }
      public var hasInventoryUpgrades:Bool {
           get {
               return builderResult.hasInventoryUpgrades
           }
      }
      public var inventoryUpgrades:Pogoprotos.Inventory.InventoryUpgrades! {
           get {
               if inventoryUpgradesBuilder_ != nil {
                  builderResult.inventoryUpgrades = inventoryUpgradesBuilder_.getMessage()
               }
               return builderResult.inventoryUpgrades
           }
           set (value) {
               builderResult.hasInventoryUpgrades = true
               builderResult.inventoryUpgrades = value
           }
      }
      private var inventoryUpgradesBuilder_:Pogoprotos.Inventory.InventoryUpgrades.Builder! {
           didSet {
              builderResult.hasInventoryUpgrades = true
           }
      }
      public func getInventoryUpgradesBuilder() -> Pogoprotos.Inventory.InventoryUpgrades.Builder {
        if inventoryUpgradesBuilder_ == nil {
           inventoryUpgradesBuilder_ = Pogoprotos.Inventory.InventoryUpgrades.Builder()
           builderResult.inventoryUpgrades = inventoryUpgradesBuilder_.getMessage()
           if inventoryUpgrades != nil {
              try! inventoryUpgradesBuilder_.mergeFrom(inventoryUpgrades)
           }
        }
        return inventoryUpgradesBuilder_
      }
      public func setInventoryUpgrades(value:Pogoprotos.Inventory.InventoryUpgrades!) -> Pogoprotos.Inventory.InventoryItemData.Builder {
        self.inventoryUpgrades = value
        return self
      }
      public func mergeInventoryUpgrades(value:Pogoprotos.Inventory.InventoryUpgrades) throws -> Pogoprotos.Inventory.InventoryItemData.Builder {
        if builderResult.hasInventoryUpgrades {
          builderResult.inventoryUpgrades = try Pogoprotos.Inventory.InventoryUpgrades.builderWithPrototype(builderResult.inventoryUpgrades).mergeFrom(value).buildPartial()
        } else {
          builderResult.inventoryUpgrades = value
        }
        builderResult.hasInventoryUpgrades = true
        return self
      }
      public func clearInventoryUpgrades() -> Pogoprotos.Inventory.InventoryItemData.Builder {
        inventoryUpgradesBuilder_ = nil
        builderResult.hasInventoryUpgrades = false
        builderResult.inventoryUpgrades = nil
        return self
      }
      public var hasAppliedItems:Bool {
           get {
               return builderResult.hasAppliedItems
           }
      }
      public var appliedItems:Pogoprotos.Inventory.AppliedItems! {
           get {
               if appliedItemsBuilder_ != nil {
                  builderResult.appliedItems = appliedItemsBuilder_.getMessage()
               }
               return builderResult.appliedItems
           }
           set (value) {
               builderResult.hasAppliedItems = true
               builderResult.appliedItems = value
           }
      }
      private var appliedItemsBuilder_:Pogoprotos.Inventory.AppliedItems.Builder! {
           didSet {
              builderResult.hasAppliedItems = true
           }
      }
      public func getAppliedItemsBuilder() -> Pogoprotos.Inventory.AppliedItems.Builder {
        if appliedItemsBuilder_ == nil {
           appliedItemsBuilder_ = Pogoprotos.Inventory.AppliedItems.Builder()
           builderResult.appliedItems = appliedItemsBuilder_.getMessage()
           if appliedItems != nil {
              try! appliedItemsBuilder_.mergeFrom(appliedItems)
           }
        }
        return appliedItemsBuilder_
      }
      public func setAppliedItems(value:Pogoprotos.Inventory.AppliedItems!) -> Pogoprotos.Inventory.InventoryItemData.Builder {
        self.appliedItems = value
        return self
      }
      public func mergeAppliedItems(value:Pogoprotos.Inventory.AppliedItems) throws -> Pogoprotos.Inventory.InventoryItemData.Builder {
        if builderResult.hasAppliedItems {
          builderResult.appliedItems = try Pogoprotos.Inventory.AppliedItems.builderWithPrototype(builderResult.appliedItems).mergeFrom(value).buildPartial()
        } else {
          builderResult.appliedItems = value
        }
        builderResult.hasAppliedItems = true
        return self
      }
      public func clearAppliedItems() -> Pogoprotos.Inventory.InventoryItemData.Builder {
        appliedItemsBuilder_ = nil
        builderResult.hasAppliedItems = false
        builderResult.appliedItems = nil
        return self
      }
      public var hasEggIncubators:Bool {
           get {
               return builderResult.hasEggIncubators
           }
      }
      public var eggIncubators:Pogoprotos.Inventory.EggIncubators! {
           get {
               if eggIncubatorsBuilder_ != nil {
                  builderResult.eggIncubators = eggIncubatorsBuilder_.getMessage()
               }
               return builderResult.eggIncubators
           }
           set (value) {
               builderResult.hasEggIncubators = true
               builderResult.eggIncubators = value
           }
      }
      private var eggIncubatorsBuilder_:Pogoprotos.Inventory.EggIncubators.Builder! {
           didSet {
              builderResult.hasEggIncubators = true
           }
      }
      public func getEggIncubatorsBuilder() -> Pogoprotos.Inventory.EggIncubators.Builder {
        if eggIncubatorsBuilder_ == nil {
           eggIncubatorsBuilder_ = Pogoprotos.Inventory.EggIncubators.Builder()
           builderResult.eggIncubators = eggIncubatorsBuilder_.getMessage()
           if eggIncubators != nil {
              try! eggIncubatorsBuilder_.mergeFrom(eggIncubators)
           }
        }
        return eggIncubatorsBuilder_
      }
      public func setEggIncubators(value:Pogoprotos.Inventory.EggIncubators!) -> Pogoprotos.Inventory.InventoryItemData.Builder {
        self.eggIncubators = value
        return self
      }
      public func mergeEggIncubators(value:Pogoprotos.Inventory.EggIncubators) throws -> Pogoprotos.Inventory.InventoryItemData.Builder {
        if builderResult.hasEggIncubators {
          builderResult.eggIncubators = try Pogoprotos.Inventory.EggIncubators.builderWithPrototype(builderResult.eggIncubators).mergeFrom(value).buildPartial()
        } else {
          builderResult.eggIncubators = value
        }
        builderResult.hasEggIncubators = true
        return self
      }
      public func clearEggIncubators() -> Pogoprotos.Inventory.InventoryItemData.Builder {
        eggIncubatorsBuilder_ = nil
        builderResult.hasEggIncubators = false
        builderResult.eggIncubators = nil
        return self
      }
      public var hasPokemonFamily:Bool {
           get {
               return builderResult.hasPokemonFamily
           }
      }
      public var pokemonFamily:Pogoprotos.Inventory.PokemonFamily! {
           get {
               if pokemonFamilyBuilder_ != nil {
                  builderResult.pokemonFamily = pokemonFamilyBuilder_.getMessage()
               }
               return builderResult.pokemonFamily
           }
           set (value) {
               builderResult.hasPokemonFamily = true
               builderResult.pokemonFamily = value
           }
      }
      private var pokemonFamilyBuilder_:Pogoprotos.Inventory.PokemonFamily.Builder! {
           didSet {
              builderResult.hasPokemonFamily = true
           }
      }
      public func getPokemonFamilyBuilder() -> Pogoprotos.Inventory.PokemonFamily.Builder {
        if pokemonFamilyBuilder_ == nil {
           pokemonFamilyBuilder_ = Pogoprotos.Inventory.PokemonFamily.Builder()
           builderResult.pokemonFamily = pokemonFamilyBuilder_.getMessage()
           if pokemonFamily != nil {
              try! pokemonFamilyBuilder_.mergeFrom(pokemonFamily)
           }
        }
        return pokemonFamilyBuilder_
      }
      public func setPokemonFamily(value:Pogoprotos.Inventory.PokemonFamily!) -> Pogoprotos.Inventory.InventoryItemData.Builder {
        self.pokemonFamily = value
        return self
      }
      public func mergePokemonFamily(value:Pogoprotos.Inventory.PokemonFamily) throws -> Pogoprotos.Inventory.InventoryItemData.Builder {
        if builderResult.hasPokemonFamily {
          builderResult.pokemonFamily = try Pogoprotos.Inventory.PokemonFamily.builderWithPrototype(builderResult.pokemonFamily).mergeFrom(value).buildPartial()
        } else {
          builderResult.pokemonFamily = value
        }
        builderResult.hasPokemonFamily = true
        return self
      }
      public func clearPokemonFamily() -> Pogoprotos.Inventory.InventoryItemData.Builder {
        pokemonFamilyBuilder_ = nil
        builderResult.hasPokemonFamily = false
        builderResult.pokemonFamily = nil
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Inventory.InventoryItemData.Builder {
        builderResult = Pogoprotos.Inventory.InventoryItemData()
        return self
      }
      override public func clone() throws -> Pogoprotos.Inventory.InventoryItemData.Builder {
        return try Pogoprotos.Inventory.InventoryItemData.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Inventory.InventoryItemData {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Inventory.InventoryItemData {
        let returnMe:Pogoprotos.Inventory.InventoryItemData = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Inventory.InventoryItemData) throws -> Pogoprotos.Inventory.InventoryItemData.Builder {
        if other == Pogoprotos.Inventory.InventoryItemData() {
         return self
        }
        if (other.hasPokemonData) {
            try mergePokemonData(other.pokemonData)
        }
        if (other.hasItem) {
            try mergeItem(other.item)
        }
        if (other.hasPokedexEntry) {
            try mergePokedexEntry(other.pokedexEntry)
        }
        if (other.hasPlayerStats) {
            try mergePlayerStats(other.playerStats)
        }
        if (other.hasPlayerCurrency) {
            try mergePlayerCurrency(other.playerCurrency)
        }
        if (other.hasPlayerCamera) {
            try mergePlayerCamera(other.playerCamera)
        }
        if (other.hasInventoryUpgrades) {
            try mergeInventoryUpgrades(other.inventoryUpgrades)
        }
        if (other.hasAppliedItems) {
            try mergeAppliedItems(other.appliedItems)
        }
        if (other.hasEggIncubators) {
            try mergeEggIncubators(other.eggIncubators)
        }
        if (other.hasPokemonFamily) {
            try mergePokemonFamily(other.pokemonFamily)
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Inventory.InventoryItemData.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Inventory.InventoryItemData.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10:
            let subBuilder:Pogoprotos.Data.PokemonData.Builder = Pogoprotos.Data.PokemonData.Builder()
            if hasPokemonData {
              try subBuilder.mergeFrom(pokemonData)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            pokemonData = subBuilder.buildPartial()

          case 18:
            let subBuilder:Pogoprotos.Inventory.Item.ItemData.Builder = Pogoprotos.Inventory.Item.ItemData.Builder()
            if hasItem {
              try subBuilder.mergeFrom(item)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            item = subBuilder.buildPartial()

          case 26:
            let subBuilder:Pogoprotos.Data.PokedexEntry.Builder = Pogoprotos.Data.PokedexEntry.Builder()
            if hasPokedexEntry {
              try subBuilder.mergeFrom(pokedexEntry)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            pokedexEntry = subBuilder.buildPartial()

          case 34:
            let subBuilder:Pogoprotos.Data.Player.PlayerStats.Builder = Pogoprotos.Data.Player.PlayerStats.Builder()
            if hasPlayerStats {
              try subBuilder.mergeFrom(playerStats)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            playerStats = subBuilder.buildPartial()

          case 42:
            let subBuilder:Pogoprotos.Data.Player.PlayerCurrency.Builder = Pogoprotos.Data.Player.PlayerCurrency.Builder()
            if hasPlayerCurrency {
              try subBuilder.mergeFrom(playerCurrency)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            playerCurrency = subBuilder.buildPartial()

          case 50:
            let subBuilder:Pogoprotos.Data.Player.PlayerCamera.Builder = Pogoprotos.Data.Player.PlayerCamera.Builder()
            if hasPlayerCamera {
              try subBuilder.mergeFrom(playerCamera)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            playerCamera = subBuilder.buildPartial()

          case 58:
            let subBuilder:Pogoprotos.Inventory.InventoryUpgrades.Builder = Pogoprotos.Inventory.InventoryUpgrades.Builder()
            if hasInventoryUpgrades {
              try subBuilder.mergeFrom(inventoryUpgrades)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            inventoryUpgrades = subBuilder.buildPartial()

          case 66:
            let subBuilder:Pogoprotos.Inventory.AppliedItems.Builder = Pogoprotos.Inventory.AppliedItems.Builder()
            if hasAppliedItems {
              try subBuilder.mergeFrom(appliedItems)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            appliedItems = subBuilder.buildPartial()

          case 74:
            let subBuilder:Pogoprotos.Inventory.EggIncubators.Builder = Pogoprotos.Inventory.EggIncubators.Builder()
            if hasEggIncubators {
              try subBuilder.mergeFrom(eggIncubators)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            eggIncubators = subBuilder.buildPartial()

          case 82:
            let subBuilder:Pogoprotos.Inventory.PokemonFamily.Builder = Pogoprotos.Inventory.PokemonFamily.Builder()
            if hasPokemonFamily {
              try subBuilder.mergeFrom(pokemonFamily)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            pokemonFamily = subBuilder.buildPartial()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Inventory.InventoryItemData.Builder {
        let resultDecodedBuilder = Pogoprotos.Inventory.InventoryItemData.Builder()
        if let jsonValuePokemonData = jsonMap["pokemonData"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.pokemonData = try Pogoprotos.Data.PokemonData.Builder.decodeToBuilder(jsonValuePokemonData).build()

        }
        if let jsonValueItem = jsonMap["item"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.item = try Pogoprotos.Inventory.Item.ItemData.Builder.decodeToBuilder(jsonValueItem).build()

        }
        if let jsonValuePokedexEntry = jsonMap["pokedexEntry"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.pokedexEntry = try Pogoprotos.Data.PokedexEntry.Builder.decodeToBuilder(jsonValuePokedexEntry).build()

        }
        if let jsonValuePlayerStats = jsonMap["playerStats"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.playerStats = try Pogoprotos.Data.Player.PlayerStats.Builder.decodeToBuilder(jsonValuePlayerStats).build()

        }
        if let jsonValuePlayerCurrency = jsonMap["playerCurrency"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.playerCurrency = try Pogoprotos.Data.Player.PlayerCurrency.Builder.decodeToBuilder(jsonValuePlayerCurrency).build()

        }
        if let jsonValuePlayerCamera = jsonMap["playerCamera"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.playerCamera = try Pogoprotos.Data.Player.PlayerCamera.Builder.decodeToBuilder(jsonValuePlayerCamera).build()

        }
        if let jsonValueInventoryUpgrades = jsonMap["inventoryUpgrades"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.inventoryUpgrades = try Pogoprotos.Inventory.InventoryUpgrades.Builder.decodeToBuilder(jsonValueInventoryUpgrades).build()

        }
        if let jsonValueAppliedItems = jsonMap["appliedItems"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.appliedItems = try Pogoprotos.Inventory.AppliedItems.Builder.decodeToBuilder(jsonValueAppliedItems).build()

        }
        if let jsonValueEggIncubators = jsonMap["eggIncubators"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.eggIncubators = try Pogoprotos.Inventory.EggIncubators.Builder.decodeToBuilder(jsonValueEggIncubators).build()

        }
        if let jsonValuePokemonFamily = jsonMap["pokemonFamily"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.pokemonFamily = try Pogoprotos.Inventory.PokemonFamily.Builder.decodeToBuilder(jsonValuePokemonFamily).build()

        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Inventory.InventoryItemData.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Inventory.InventoryItemData.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
