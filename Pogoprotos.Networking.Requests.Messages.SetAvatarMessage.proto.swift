// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "SetAvatarMessage.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Pogoprotos { public struct Networking { public struct Requests { public struct Messages { }}}}

public func == (lhs: Pogoprotos.Networking.Requests.Messages.SetAvatarMessage, rhs: Pogoprotos.Networking.Requests.Messages.SetAvatarMessage) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasPlayerAvatar == rhs.hasPlayerAvatar) && (!lhs.hasPlayerAvatar || lhs.playerAvatar == rhs.playerAvatar)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Pogoprotos.Networking.Requests.Messages {
  public struct SetAvatarMessageRoot {
    public static var sharedInstance : SetAvatarMessageRoot {
     struct Static {
         static let instance : SetAvatarMessageRoot = SetAvatarMessageRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Pogoprotos.Data.Player.PlayerAvatarRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class SetAvatarMessage : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasPlayerAvatar:Bool = false
    public private(set) var playerAvatar:Pogoprotos.Data.Player.PlayerAvatar!
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasPlayerAvatar {
        try output.writeMessage(2, value:playerAvatar)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasPlayerAvatar {
          if let varSizeplayerAvatar = playerAvatar?.computeMessageSize(2) {
              serialize_size += varSizeplayerAvatar
          }
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Networking.Requests.Messages.SetAvatarMessage> {
      var mergedArray = Array<Pogoprotos.Networking.Requests.Messages.SetAvatarMessage>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Requests.Messages.SetAvatarMessage? {
      return try Pogoprotos.Networking.Requests.Messages.SetAvatarMessage.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Networking.Requests.Messages.SetAvatarMessage {
      return try Pogoprotos.Networking.Requests.Messages.SetAvatarMessage.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Networking.Requests.Messages.SetAvatarMessageRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Requests.Messages.SetAvatarMessage {
      return try Pogoprotos.Networking.Requests.Messages.SetAvatarMessage.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Requests.Messages.SetAvatarMessage {
      return try Pogoprotos.Networking.Requests.Messages.SetAvatarMessage.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Requests.Messages.SetAvatarMessage {
      return try Pogoprotos.Networking.Requests.Messages.SetAvatarMessage.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Requests.Messages.SetAvatarMessage {
      return try Pogoprotos.Networking.Requests.Messages.SetAvatarMessage.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Requests.Messages.SetAvatarMessage {
      return try Pogoprotos.Networking.Requests.Messages.SetAvatarMessage.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Networking.Requests.Messages.SetAvatarMessage.Builder {
      return Pogoprotos.Networking.Requests.Messages.SetAvatarMessage.classBuilder() as! Pogoprotos.Networking.Requests.Messages.SetAvatarMessage.Builder
    }
    public func getBuilder() -> Pogoprotos.Networking.Requests.Messages.SetAvatarMessage.Builder {
      return classBuilder() as! Pogoprotos.Networking.Requests.Messages.SetAvatarMessage.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Networking.Requests.Messages.SetAvatarMessage.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Networking.Requests.Messages.SetAvatarMessage.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Networking.Requests.Messages.SetAvatarMessage.Builder {
      return try Pogoprotos.Networking.Requests.Messages.SetAvatarMessage.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Networking.Requests.Messages.SetAvatarMessage) throws -> Pogoprotos.Networking.Requests.Messages.SetAvatarMessage.Builder {
      return try Pogoprotos.Networking.Requests.Messages.SetAvatarMessage.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasPlayerAvatar {
        jsonMap["playerAvatar"] = try playerAvatar.encode()
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Requests.Messages.SetAvatarMessage {
      return try Pogoprotos.Networking.Requests.Messages.SetAvatarMessage.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Networking.Requests.Messages.SetAvatarMessage {
      return try Pogoprotos.Networking.Requests.Messages.SetAvatarMessage.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasPlayerAvatar {
        output += "\(indent) playerAvatar {\n"
        if let outDescPlayerAvatar = playerAvatar {
          output += try outDescPlayerAvatar.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasPlayerAvatar {
                if let hashValueplayerAvatar = playerAvatar?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueplayerAvatar
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Networking.Requests.Messages.SetAvatarMessage"
    }
    override public func className() -> String {
        return "Pogoprotos.Networking.Requests.Messages.SetAvatarMessage"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Networking.Requests.Messages.SetAvatarMessage.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Networking.Requests.Messages.SetAvatarMessage = Pogoprotos.Networking.Requests.Messages.SetAvatarMessage()
      public func getMessage() -> Pogoprotos.Networking.Requests.Messages.SetAvatarMessage {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasPlayerAvatar:Bool {
           get {
               return builderResult.hasPlayerAvatar
           }
      }
      public var playerAvatar:Pogoprotos.Data.Player.PlayerAvatar! {
           get {
               if playerAvatarBuilder_ != nil {
                  builderResult.playerAvatar = playerAvatarBuilder_.getMessage()
               }
               return builderResult.playerAvatar
           }
           set (value) {
               builderResult.hasPlayerAvatar = true
               builderResult.playerAvatar = value
           }
      }
      private var playerAvatarBuilder_:Pogoprotos.Data.Player.PlayerAvatar.Builder! {
           didSet {
              builderResult.hasPlayerAvatar = true
           }
      }
      public func getPlayerAvatarBuilder() -> Pogoprotos.Data.Player.PlayerAvatar.Builder {
        if playerAvatarBuilder_ == nil {
           playerAvatarBuilder_ = Pogoprotos.Data.Player.PlayerAvatar.Builder()
           builderResult.playerAvatar = playerAvatarBuilder_.getMessage()
           if playerAvatar != nil {
              try! playerAvatarBuilder_.mergeFrom(playerAvatar)
           }
        }
        return playerAvatarBuilder_
      }
      public func setPlayerAvatar(value:Pogoprotos.Data.Player.PlayerAvatar!) -> Pogoprotos.Networking.Requests.Messages.SetAvatarMessage.Builder {
        self.playerAvatar = value
        return self
      }
      public func mergePlayerAvatar(value:Pogoprotos.Data.Player.PlayerAvatar) throws -> Pogoprotos.Networking.Requests.Messages.SetAvatarMessage.Builder {
        if builderResult.hasPlayerAvatar {
          builderResult.playerAvatar = try Pogoprotos.Data.Player.PlayerAvatar.builderWithPrototype(builderResult.playerAvatar).mergeFrom(value).buildPartial()
        } else {
          builderResult.playerAvatar = value
        }
        builderResult.hasPlayerAvatar = true
        return self
      }
      public func clearPlayerAvatar() -> Pogoprotos.Networking.Requests.Messages.SetAvatarMessage.Builder {
        playerAvatarBuilder_ = nil
        builderResult.hasPlayerAvatar = false
        builderResult.playerAvatar = nil
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Networking.Requests.Messages.SetAvatarMessage.Builder {
        builderResult = Pogoprotos.Networking.Requests.Messages.SetAvatarMessage()
        return self
      }
      override public func clone() throws -> Pogoprotos.Networking.Requests.Messages.SetAvatarMessage.Builder {
        return try Pogoprotos.Networking.Requests.Messages.SetAvatarMessage.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Networking.Requests.Messages.SetAvatarMessage {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Networking.Requests.Messages.SetAvatarMessage {
        let returnMe:Pogoprotos.Networking.Requests.Messages.SetAvatarMessage = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Networking.Requests.Messages.SetAvatarMessage) throws -> Pogoprotos.Networking.Requests.Messages.SetAvatarMessage.Builder {
        if other == Pogoprotos.Networking.Requests.Messages.SetAvatarMessage() {
         return self
        }
        if (other.hasPlayerAvatar) {
            try mergePlayerAvatar(other.playerAvatar)
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Requests.Messages.SetAvatarMessage.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Requests.Messages.SetAvatarMessage.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 18:
            let subBuilder:Pogoprotos.Data.Player.PlayerAvatar.Builder = Pogoprotos.Data.Player.PlayerAvatar.Builder()
            if hasPlayerAvatar {
              try subBuilder.mergeFrom(playerAvatar)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            playerAvatar = subBuilder.buildPartial()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Requests.Messages.SetAvatarMessage.Builder {
        let resultDecodedBuilder = Pogoprotos.Networking.Requests.Messages.SetAvatarMessage.Builder()
        if let jsonValuePlayerAvatar = jsonMap["playerAvatar"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.playerAvatar = try Pogoprotos.Data.Player.PlayerAvatar.Builder.decodeToBuilder(jsonValuePlayerAvatar).build()

        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Networking.Requests.Messages.SetAvatarMessage.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Networking.Requests.Messages.SetAvatarMessage.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
