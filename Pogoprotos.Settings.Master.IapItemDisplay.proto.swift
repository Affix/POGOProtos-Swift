// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "IapItemDisplay.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Pogoprotos { public struct Settings { public struct Master { }}}

public func == (lhs: Pogoprotos.Settings.Master.IapItemDisplay, rhs: Pogoprotos.Settings.Master.IapItemDisplay) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasSku == rhs.hasSku) && (!lhs.hasSku || lhs.sku == rhs.sku)
  fieldCheck = fieldCheck && (lhs.hasCategory == rhs.hasCategory) && (!lhs.hasCategory || lhs.category == rhs.category)
  fieldCheck = fieldCheck && (lhs.hasSortOrder == rhs.hasSortOrder) && (!lhs.hasSortOrder || lhs.sortOrder == rhs.sortOrder)
  fieldCheck = fieldCheck && (lhs.itemIds == rhs.itemIds)
  fieldCheck = fieldCheck && (lhs.counts == rhs.counts)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Pogoprotos.Settings.Master {
  public struct IapItemDisplayRoot {
    public static var sharedInstance : IapItemDisplayRoot {
     struct Static {
         static let instance : IapItemDisplayRoot = IapItemDisplayRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Pogoprotos.Enums.IapItemCategoryRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Inventory.Item.ItemIdRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class IapItemDisplay : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasSku:Bool = false
    public private(set) var sku:String = ""

    public private(set) var category:Pogoprotos.Enums.HoloIapItemCategory = Pogoprotos.Enums.HoloIapItemCategory.IapCategoryNone
    public private(set) var hasCategory:Bool = false
    public private(set) var hasSortOrder:Bool = false
    public private(set) var sortOrder:Int32 = Int32(0)

    private var itemIdsMemoizedSerializedSize:Int32 = 0
    public private(set) var itemIds:Array<Pogoprotos.Inventory.Item.ItemId> = Array<Pogoprotos.Inventory.Item.ItemId>()
    public private(set) var counts:Array<Int32> = Array<Int32>()
    private var countsMemoizedSerializedSize:Int32 = -1
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasSku {
        try output.writeString(1, value:sku)
      }
      if hasCategory {
        try output.writeEnum(2, value:category.rawValue)
      }
      if hasSortOrder {
        try output.writeInt32(3, value:sortOrder)
      }
      for oneValueOfitemIds in itemIds {
          try output.writeEnum(4, value:oneValueOfitemIds.rawValue)
      }
      if !counts.isEmpty {
        try output.writeRawVarint32(42)
        try output.writeRawVarint32(countsMemoizedSerializedSize)
        for oneValuecounts in counts {
          try output.writeInt32NoTag(oneValuecounts)
        }
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasSku {
        serialize_size += sku.computeStringSize(1)
      }
      if (hasCategory) {
        serialize_size += category.rawValue.computeEnumSize(2)
      }
      if hasSortOrder {
        serialize_size += sortOrder.computeInt32Size(3)
      }
      var dataSizeitemIds:Int32 = 0
      for oneValueOfitemIds in itemIds {
          dataSizeitemIds += oneValueOfitemIds.rawValue.computeEnumSizeNoTag()
      }
      serialize_size += dataSizeitemIds
      serialize_size += (1 * Int32(itemIds.count))
      var dataSizeCounts:Int32 = 0
      for oneValuecounts in counts {
          dataSizeCounts += oneValuecounts.computeInt32SizeNoTag()
      }
      serialize_size += dataSizeCounts
      if !counts.isEmpty {
        serialize_size += 1
        serialize_size += dataSizeCounts.computeInt32SizeNoTag()
      }
      countsMemoizedSerializedSize = dataSizeCounts
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Settings.Master.IapItemDisplay> {
      var mergedArray = Array<Pogoprotos.Settings.Master.IapItemDisplay>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.Master.IapItemDisplay? {
      return try Pogoprotos.Settings.Master.IapItemDisplay.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Settings.Master.IapItemDisplay {
      return try Pogoprotos.Settings.Master.IapItemDisplay.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Settings.Master.IapItemDisplayRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.IapItemDisplay {
      return try Pogoprotos.Settings.Master.IapItemDisplay.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.Master.IapItemDisplay {
      return try Pogoprotos.Settings.Master.IapItemDisplay.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.IapItemDisplay {
      return try Pogoprotos.Settings.Master.IapItemDisplay.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.Master.IapItemDisplay {
      return try Pogoprotos.Settings.Master.IapItemDisplay.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.IapItemDisplay {
      return try Pogoprotos.Settings.Master.IapItemDisplay.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Settings.Master.IapItemDisplay.Builder {
      return Pogoprotos.Settings.Master.IapItemDisplay.classBuilder() as! Pogoprotos.Settings.Master.IapItemDisplay.Builder
    }
    public func getBuilder() -> Pogoprotos.Settings.Master.IapItemDisplay.Builder {
      return classBuilder() as! Pogoprotos.Settings.Master.IapItemDisplay.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.Master.IapItemDisplay.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.Master.IapItemDisplay.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Settings.Master.IapItemDisplay.Builder {
      return try Pogoprotos.Settings.Master.IapItemDisplay.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Settings.Master.IapItemDisplay) throws -> Pogoprotos.Settings.Master.IapItemDisplay.Builder {
      return try Pogoprotos.Settings.Master.IapItemDisplay.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasSku {
        jsonMap["sku"] = sku
      }
      if hasCategory {
        jsonMap["category"] = category.toString()
      }
      if hasSortOrder {
        jsonMap["sortOrder"] = NSNumber(int:sortOrder)
      }
      if !itemIds.isEmpty {
        var jsonArrayItemIds:Array<String> = []
          for oneValueItemIds in itemIds {
            jsonArrayItemIds += [oneValueItemIds.toString()]
          }
        jsonMap["itemIds"] = jsonArrayItemIds
      }
      if !counts.isEmpty {
        var jsonArrayCounts:Array<NSNumber> = []
          for oneValueCounts in counts {
            jsonArrayCounts += [NSNumber(int:oneValueCounts)]
          }
        jsonMap["counts"] = jsonArrayCounts
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.Master.IapItemDisplay {
      return try Pogoprotos.Settings.Master.IapItemDisplay.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Settings.Master.IapItemDisplay {
      return try Pogoprotos.Settings.Master.IapItemDisplay.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasSku {
        output += "\(indent) sku: \(sku) \n"
      }
      if (hasCategory) {
        output += "\(indent) category: \(category.description)\n"
      }
      if hasSortOrder {
        output += "\(indent) sortOrder: \(sortOrder) \n"
      }
      var itemIdsElementIndex:Int = 0
      for oneValueOfitemIds in itemIds {
          output += "\(indent) itemIds[\(itemIdsElementIndex)]: \(oneValueOfitemIds.description)\n"
          itemIdsElementIndex += 1
      }
      var countsElementIndex:Int = 0
      for oneValueCounts in counts  {
          output += "\(indent) counts[\(countsElementIndex)]: \(oneValueCounts)\n"
          countsElementIndex += 1
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasSku {
               hashCode = (hashCode &* 31) &+ sku.hashValue
            }
            if hasCategory {
               hashCode = (hashCode &* 31) &+ Int(category.rawValue)
            }
            if hasSortOrder {
               hashCode = (hashCode &* 31) &+ sortOrder.hashValue
            }
            for oneValueOfitemIds in itemIds {
                hashCode = (hashCode &* 31) &+ Int(oneValueOfitemIds.rawValue)
            }
            for oneValueCounts in counts {
                hashCode = (hashCode &* 31) &+ oneValueCounts.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Settings.Master.IapItemDisplay"
    }
    override public func className() -> String {
        return "Pogoprotos.Settings.Master.IapItemDisplay"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Settings.Master.IapItemDisplay.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Settings.Master.IapItemDisplay = Pogoprotos.Settings.Master.IapItemDisplay()
      public func getMessage() -> Pogoprotos.Settings.Master.IapItemDisplay {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasSku:Bool {
           get {
                return builderResult.hasSku
           }
      }
      public var sku:String {
           get {
                return builderResult.sku
           }
           set (value) {
               builderResult.hasSku = true
               builderResult.sku = value
           }
      }
      public func setSku(value:String) -> Pogoprotos.Settings.Master.IapItemDisplay.Builder {
        self.sku = value
        return self
      }
      public func clearSku() -> Pogoprotos.Settings.Master.IapItemDisplay.Builder{
           builderResult.hasSku = false
           builderResult.sku = ""
           return self
      }
        public var hasCategory:Bool{
            get {
                return builderResult.hasCategory
            }
        }
        public var category:Pogoprotos.Enums.HoloIapItemCategory {
            get {
                return builderResult.category
            }
            set (value) {
                builderResult.hasCategory = true
                builderResult.category = value
            }
        }
        public func setCategory(value:Pogoprotos.Enums.HoloIapItemCategory) -> Pogoprotos.Settings.Master.IapItemDisplay.Builder {
          self.category = value
          return self
        }
        public func clearCategory() -> Pogoprotos.Settings.Master.IapItemDisplay.Builder {
           builderResult.hasCategory = false
           builderResult.category = .IapCategoryNone
           return self
        }
      public var hasSortOrder:Bool {
           get {
                return builderResult.hasSortOrder
           }
      }
      public var sortOrder:Int32 {
           get {
                return builderResult.sortOrder
           }
           set (value) {
               builderResult.hasSortOrder = true
               builderResult.sortOrder = value
           }
      }
      public func setSortOrder(value:Int32) -> Pogoprotos.Settings.Master.IapItemDisplay.Builder {
        self.sortOrder = value
        return self
      }
      public func clearSortOrder() -> Pogoprotos.Settings.Master.IapItemDisplay.Builder{
           builderResult.hasSortOrder = false
           builderResult.sortOrder = Int32(0)
           return self
      }
      public var itemIds:Array<Pogoprotos.Inventory.Item.ItemId> {
          get {
              return builderResult.itemIds
          }
          set (value) {
              builderResult.itemIds = value
          }
      }
      public func setItemIds(value:Array<Pogoprotos.Inventory.Item.ItemId>) -> Pogoprotos.Settings.Master.IapItemDisplay.Builder {
        self.itemIds = value
        return self
      }
      public func clearItemIds() -> Pogoprotos.Settings.Master.IapItemDisplay.Builder {
        builderResult.itemIds.removeAll(keepCapacity: false)
        return self
      }
      public var counts:Array<Int32> {
           get {
               return builderResult.counts
           }
           set (array) {
               builderResult.counts = array
           }
      }
      public func setCounts(value:Array<Int32>) -> Pogoprotos.Settings.Master.IapItemDisplay.Builder {
        self.counts = value
        return self
      }
      public func clearCounts() -> Pogoprotos.Settings.Master.IapItemDisplay.Builder {
         builderResult.counts.removeAll(keepCapacity: false)
         return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Settings.Master.IapItemDisplay.Builder {
        builderResult = Pogoprotos.Settings.Master.IapItemDisplay()
        return self
      }
      override public func clone() throws -> Pogoprotos.Settings.Master.IapItemDisplay.Builder {
        return try Pogoprotos.Settings.Master.IapItemDisplay.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Settings.Master.IapItemDisplay {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Settings.Master.IapItemDisplay {
        let returnMe:Pogoprotos.Settings.Master.IapItemDisplay = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Settings.Master.IapItemDisplay) throws -> Pogoprotos.Settings.Master.IapItemDisplay.Builder {
        if other == Pogoprotos.Settings.Master.IapItemDisplay() {
         return self
        }
        if other.hasSku {
             sku = other.sku
        }
        if other.hasCategory {
             category = other.category
        }
        if other.hasSortOrder {
             sortOrder = other.sortOrder
        }
        if !other.itemIds.isEmpty {
           builderResult.itemIds += other.itemIds
        }
        if !other.counts.isEmpty {
            builderResult.counts += other.counts
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.Master.IapItemDisplay.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.IapItemDisplay.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10:
            sku = try input.readString()

          case 16:
            let valueIntcategory = try input.readEnum()
            if let enumscategory = Pogoprotos.Enums.HoloIapItemCategory(rawValue:valueIntcategory){
                 category = enumscategory
            } else {
                 try unknownFieldsBuilder.mergeVarintField(2, value:Int64(valueIntcategory))
            }

          case 24:
            sortOrder = try input.readInt32()

          case 32:
            let valueIntitemIds = try input.readEnum()
            if let enumsitemIds = Pogoprotos.Inventory.Item.ItemId(rawValue:valueIntitemIds) {
                 builderResult.itemIds += [enumsitemIds]
            } else {
                 try unknownFieldsBuilder.mergeVarintField(4, value:Int64(valueIntitemIds))
            }

          case 42:
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.counts += [try input.readInt32()]
            }
            input.popLimit(limit)

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.Master.IapItemDisplay.Builder {
        let resultDecodedBuilder = Pogoprotos.Settings.Master.IapItemDisplay.Builder()
        if let jsonValueSku = jsonMap["sku"] as? String {
          resultDecodedBuilder.sku = jsonValueSku
        }
        if let jsonValueCategory = jsonMap["category"] as? String {
          resultDecodedBuilder.category = try Pogoprotos.Enums.HoloIapItemCategory.fromString(jsonValueCategory)
        }
        if let jsonValueSortOrder = jsonMap["sortOrder"] as? NSNumber {
          resultDecodedBuilder.sortOrder = jsonValueSortOrder.intValue
        }
        if let jsonValueItemIds = jsonMap["itemIds"] as? Array<String> {
          var jsonArrayItemIds:Array<Pogoprotos.Inventory.Item.ItemId> = []
          for oneValueItemIds in jsonValueItemIds {
            let enumFromStringItemIds = try Pogoprotos.Inventory.Item.ItemId.fromString(oneValueItemIds)
            jsonArrayItemIds += [enumFromStringItemIds]
          }
          resultDecodedBuilder.itemIds = jsonArrayItemIds
        }
        if let jsonValueCounts = jsonMap["counts"] as? Array<NSNumber> {
          var jsonArrayCounts:Array<Int32> = []
          for oneValueCounts in jsonValueCounts {
            jsonArrayCounts += [oneValueCounts.intValue]
          }
          resultDecodedBuilder.counts = jsonArrayCounts
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Settings.Master.IapItemDisplay.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Settings.Master.IapItemDisplay.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
