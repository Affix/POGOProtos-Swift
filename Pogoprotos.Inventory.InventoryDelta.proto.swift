// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "InventoryDelta.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Pogoprotos { public struct Inventory { }}

public func == (lhs: Pogoprotos.Inventory.InventoryDelta, rhs: Pogoprotos.Inventory.InventoryDelta) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasOriginalTimestampMs == rhs.hasOriginalTimestampMs) && (!lhs.hasOriginalTimestampMs || lhs.originalTimestampMs == rhs.originalTimestampMs)
  fieldCheck = fieldCheck && (lhs.hasNewTimestampMs == rhs.hasNewTimestampMs) && (!lhs.hasNewTimestampMs || lhs.newTimestampMs == rhs.newTimestampMs)
  fieldCheck = fieldCheck && (lhs.inventoryItems == rhs.inventoryItems)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Pogoprotos.Inventory {
  public struct InventoryDeltaRoot {
    public static var sharedInstance : InventoryDeltaRoot {
     struct Static {
         static let instance : InventoryDeltaRoot = InventoryDeltaRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Pogoprotos.Inventory.InventoryItemRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class InventoryDelta : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasOriginalTimestampMs:Bool = false
    public private(set) var originalTimestampMs:Int64 = Int64(0)

    public private(set) var hasNewTimestampMs:Bool = false
    public private(set) var newTimestampMs:Int64 = Int64(0)

    public private(set) var inventoryItems:Array<Pogoprotos.Inventory.InventoryItem>  = Array<Pogoprotos.Inventory.InventoryItem>()
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasOriginalTimestampMs {
        try output.writeInt64(1, value:originalTimestampMs)
      }
      if hasNewTimestampMs {
        try output.writeInt64(2, value:newTimestampMs)
      }
      for oneElementInventoryItems in inventoryItems {
          try output.writeMessage(3, value:oneElementInventoryItems)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasOriginalTimestampMs {
        serialize_size += originalTimestampMs.computeInt64Size(1)
      }
      if hasNewTimestampMs {
        serialize_size += newTimestampMs.computeInt64Size(2)
      }
      for oneElementInventoryItems in inventoryItems {
          serialize_size += oneElementInventoryItems.computeMessageSize(3)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Inventory.InventoryDelta> {
      var mergedArray = Array<Pogoprotos.Inventory.InventoryDelta>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Inventory.InventoryDelta? {
      return try Pogoprotos.Inventory.InventoryDelta.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Inventory.InventoryDelta {
      return try Pogoprotos.Inventory.InventoryDelta.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Inventory.InventoryDeltaRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Inventory.InventoryDelta {
      return try Pogoprotos.Inventory.InventoryDelta.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Inventory.InventoryDelta {
      return try Pogoprotos.Inventory.InventoryDelta.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Inventory.InventoryDelta {
      return try Pogoprotos.Inventory.InventoryDelta.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Inventory.InventoryDelta {
      return try Pogoprotos.Inventory.InventoryDelta.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Inventory.InventoryDelta {
      return try Pogoprotos.Inventory.InventoryDelta.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Inventory.InventoryDelta.Builder {
      return Pogoprotos.Inventory.InventoryDelta.classBuilder() as! Pogoprotos.Inventory.InventoryDelta.Builder
    }
    public func getBuilder() -> Pogoprotos.Inventory.InventoryDelta.Builder {
      return classBuilder() as! Pogoprotos.Inventory.InventoryDelta.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Inventory.InventoryDelta.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Inventory.InventoryDelta.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Inventory.InventoryDelta.Builder {
      return try Pogoprotos.Inventory.InventoryDelta.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Inventory.InventoryDelta) throws -> Pogoprotos.Inventory.InventoryDelta.Builder {
      return try Pogoprotos.Inventory.InventoryDelta.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasOriginalTimestampMs {
        jsonMap["originalTimestampMs"] = "\(originalTimestampMs)"
      }
      if hasNewTimestampMs {
        jsonMap["newTimestampMs"] = "\(newTimestampMs)"
      }
      if !inventoryItems.isEmpty {
        var jsonArrayInventoryItems:Array<Dictionary<String,AnyObject>> = []
          for oneValueInventoryItems in inventoryItems {
            let ecodedMessageInventoryItems = try oneValueInventoryItems.encode()
            jsonArrayInventoryItems += [ecodedMessageInventoryItems]
          }
        jsonMap["inventoryItems"] = jsonArrayInventoryItems
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Inventory.InventoryDelta {
      return try Pogoprotos.Inventory.InventoryDelta.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Inventory.InventoryDelta {
      return try Pogoprotos.Inventory.InventoryDelta.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasOriginalTimestampMs {
        output += "\(indent) originalTimestampMs: \(originalTimestampMs) \n"
      }
      if hasNewTimestampMs {
        output += "\(indent) newTimestampMs: \(newTimestampMs) \n"
      }
      var inventoryItemsElementIndex:Int = 0
      for oneElementInventoryItems in inventoryItems {
          output += "\(indent) inventoryItems[\(inventoryItemsElementIndex)] {\n"
          output += try oneElementInventoryItems.getDescription("\(indent)  ")
          output += "\(indent)}\n"
          inventoryItemsElementIndex += 1
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasOriginalTimestampMs {
               hashCode = (hashCode &* 31) &+ originalTimestampMs.hashValue
            }
            if hasNewTimestampMs {
               hashCode = (hashCode &* 31) &+ newTimestampMs.hashValue
            }
            for oneElementInventoryItems in inventoryItems {
                hashCode = (hashCode &* 31) &+ oneElementInventoryItems.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Inventory.InventoryDelta"
    }
    override public func className() -> String {
        return "Pogoprotos.Inventory.InventoryDelta"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Inventory.InventoryDelta.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Inventory.InventoryDelta = Pogoprotos.Inventory.InventoryDelta()
      public func getMessage() -> Pogoprotos.Inventory.InventoryDelta {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasOriginalTimestampMs:Bool {
           get {
                return builderResult.hasOriginalTimestampMs
           }
      }
      public var originalTimestampMs:Int64 {
           get {
                return builderResult.originalTimestampMs
           }
           set (value) {
               builderResult.hasOriginalTimestampMs = true
               builderResult.originalTimestampMs = value
           }
      }
      public func setOriginalTimestampMs(value:Int64) -> Pogoprotos.Inventory.InventoryDelta.Builder {
        self.originalTimestampMs = value
        return self
      }
      public func clearOriginalTimestampMs() -> Pogoprotos.Inventory.InventoryDelta.Builder{
           builderResult.hasOriginalTimestampMs = false
           builderResult.originalTimestampMs = Int64(0)
           return self
      }
      public var hasNewTimestampMs:Bool {
           get {
                return builderResult.hasNewTimestampMs
           }
      }
      public var newTimestampMs:Int64 {
           get {
                return builderResult.newTimestampMs
           }
           set (value) {
               builderResult.hasNewTimestampMs = true
               builderResult.newTimestampMs = value
           }
      }
      public func setNewTimestampMs(value:Int64) -> Pogoprotos.Inventory.InventoryDelta.Builder {
        self.newTimestampMs = value
        return self
      }
      public func clearNewTimestampMs() -> Pogoprotos.Inventory.InventoryDelta.Builder{
           builderResult.hasNewTimestampMs = false
           builderResult.newTimestampMs = Int64(0)
           return self
      }
      public var inventoryItems:Array<Pogoprotos.Inventory.InventoryItem> {
           get {
               return builderResult.inventoryItems
           }
           set (value) {
               builderResult.inventoryItems = value
           }
      }
      public func setInventoryItems(value:Array<Pogoprotos.Inventory.InventoryItem>) -> Pogoprotos.Inventory.InventoryDelta.Builder {
        self.inventoryItems = value
        return self
      }
      public func clearInventoryItems() -> Pogoprotos.Inventory.InventoryDelta.Builder {
        builderResult.inventoryItems.removeAll(keepCapacity: false)
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Inventory.InventoryDelta.Builder {
        builderResult = Pogoprotos.Inventory.InventoryDelta()
        return self
      }
      override public func clone() throws -> Pogoprotos.Inventory.InventoryDelta.Builder {
        return try Pogoprotos.Inventory.InventoryDelta.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Inventory.InventoryDelta {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Inventory.InventoryDelta {
        let returnMe:Pogoprotos.Inventory.InventoryDelta = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Inventory.InventoryDelta) throws -> Pogoprotos.Inventory.InventoryDelta.Builder {
        if other == Pogoprotos.Inventory.InventoryDelta() {
         return self
        }
        if other.hasOriginalTimestampMs {
             originalTimestampMs = other.originalTimestampMs
        }
        if other.hasNewTimestampMs {
             newTimestampMs = other.newTimestampMs
        }
        if !other.inventoryItems.isEmpty  {
           builderResult.inventoryItems += other.inventoryItems
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Inventory.InventoryDelta.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Inventory.InventoryDelta.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            originalTimestampMs = try input.readInt64()

          case 16:
            newTimestampMs = try input.readInt64()

          case 26:
            let subBuilder = Pogoprotos.Inventory.InventoryItem.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            inventoryItems += [subBuilder.buildPartial()]

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Inventory.InventoryDelta.Builder {
        let resultDecodedBuilder = Pogoprotos.Inventory.InventoryDelta.Builder()
        if let jsonValueOriginalTimestampMs = jsonMap["originalTimestampMs"] as? String {
          resultDecodedBuilder.originalTimestampMs = Int64(jsonValueOriginalTimestampMs)!
        }
        if let jsonValueNewTimestampMs = jsonMap["newTimestampMs"] as? String {
          resultDecodedBuilder.newTimestampMs = Int64(jsonValueNewTimestampMs)!
        }
        if let jsonValueInventoryItems = jsonMap["inventoryItems"] as? Array<Dictionary<String,AnyObject>> {
          var jsonArrayInventoryItems:Array<Pogoprotos.Inventory.InventoryItem> = []
          for oneValueInventoryItems in jsonValueInventoryItems {
            let messageFromStringInventoryItems = try Pogoprotos.Inventory.InventoryItem.Builder.decodeToBuilder(oneValueInventoryItems).build()

            jsonArrayInventoryItems += [messageFromStringInventoryItems]
          }
          resultDecodedBuilder.inventoryItems = jsonArrayInventoryItems
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Inventory.InventoryDelta.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Inventory.InventoryDelta.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
