// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "CheckAwardedBadgesResponse.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Pogoprotos { public struct Networking { public struct Responses { }}}

public func == (lhs: Pogoprotos.Networking.Responses.CheckAwardedBadgesResponse, rhs: Pogoprotos.Networking.Responses.CheckAwardedBadgesResponse) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasSuccess == rhs.hasSuccess) && (!lhs.hasSuccess || lhs.success == rhs.success)
  fieldCheck = fieldCheck && (lhs.awardedBadges == rhs.awardedBadges)
  fieldCheck = fieldCheck && (lhs.awardedBadgeLevels == rhs.awardedBadgeLevels)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Pogoprotos.Networking.Responses {
  public struct CheckAwardedBadgesResponseRoot {
    public static var sharedInstance : CheckAwardedBadgesResponseRoot {
     struct Static {
         static let instance : CheckAwardedBadgesResponseRoot = CheckAwardedBadgesResponseRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Pogoprotos.Enums.BadgeTypeRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class CheckAwardedBadgesResponse : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasSuccess:Bool = false
    public private(set) var success:Bool = false

    private var awardedBadgesMemoizedSerializedSize:Int32 = 0
    public private(set) var awardedBadges:Array<Pogoprotos.Enums.BadgeType> = Array<Pogoprotos.Enums.BadgeType>()
    public private(set) var awardedBadgeLevels:Array<Int32> = Array<Int32>()
    private var awardedBadgeLevelsMemoizedSerializedSize:Int32 = -1
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasSuccess {
        try output.writeBool(1, value:success)
      }
      for oneValueOfawardedBadges in awardedBadges {
          try output.writeEnum(2, value:oneValueOfawardedBadges.rawValue)
      }
      if !awardedBadgeLevels.isEmpty {
        try output.writeRawVarint32(26)
        try output.writeRawVarint32(awardedBadgeLevelsMemoizedSerializedSize)
        for oneValueawardedBadgeLevels in awardedBadgeLevels {
          try output.writeInt32NoTag(oneValueawardedBadgeLevels)
        }
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasSuccess {
        serialize_size += success.computeBoolSize(1)
      }
      var dataSizeawardedBadges:Int32 = 0
      for oneValueOfawardedBadges in awardedBadges {
          dataSizeawardedBadges += oneValueOfawardedBadges.rawValue.computeEnumSizeNoTag()
      }
      serialize_size += dataSizeawardedBadges
      serialize_size += (1 * Int32(awardedBadges.count))
      var dataSizeAwardedBadgeLevels:Int32 = 0
      for oneValueawardedBadgeLevels in awardedBadgeLevels {
          dataSizeAwardedBadgeLevels += oneValueawardedBadgeLevels.computeInt32SizeNoTag()
      }
      serialize_size += dataSizeAwardedBadgeLevels
      if !awardedBadgeLevels.isEmpty {
        serialize_size += 1
        serialize_size += dataSizeAwardedBadgeLevels.computeInt32SizeNoTag()
      }
      awardedBadgeLevelsMemoizedSerializedSize = dataSizeAwardedBadgeLevels
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Networking.Responses.CheckAwardedBadgesResponse> {
      var mergedArray = Array<Pogoprotos.Networking.Responses.CheckAwardedBadgesResponse>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Responses.CheckAwardedBadgesResponse? {
      return try Pogoprotos.Networking.Responses.CheckAwardedBadgesResponse.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Networking.Responses.CheckAwardedBadgesResponse {
      return try Pogoprotos.Networking.Responses.CheckAwardedBadgesResponse.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Networking.Responses.CheckAwardedBadgesResponseRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Responses.CheckAwardedBadgesResponse {
      return try Pogoprotos.Networking.Responses.CheckAwardedBadgesResponse.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Responses.CheckAwardedBadgesResponse {
      return try Pogoprotos.Networking.Responses.CheckAwardedBadgesResponse.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Responses.CheckAwardedBadgesResponse {
      return try Pogoprotos.Networking.Responses.CheckAwardedBadgesResponse.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Responses.CheckAwardedBadgesResponse {
      return try Pogoprotos.Networking.Responses.CheckAwardedBadgesResponse.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Responses.CheckAwardedBadgesResponse {
      return try Pogoprotos.Networking.Responses.CheckAwardedBadgesResponse.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Networking.Responses.CheckAwardedBadgesResponse.Builder {
      return Pogoprotos.Networking.Responses.CheckAwardedBadgesResponse.classBuilder() as! Pogoprotos.Networking.Responses.CheckAwardedBadgesResponse.Builder
    }
    public func getBuilder() -> Pogoprotos.Networking.Responses.CheckAwardedBadgesResponse.Builder {
      return classBuilder() as! Pogoprotos.Networking.Responses.CheckAwardedBadgesResponse.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Networking.Responses.CheckAwardedBadgesResponse.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Networking.Responses.CheckAwardedBadgesResponse.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Networking.Responses.CheckAwardedBadgesResponse.Builder {
      return try Pogoprotos.Networking.Responses.CheckAwardedBadgesResponse.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Networking.Responses.CheckAwardedBadgesResponse) throws -> Pogoprotos.Networking.Responses.CheckAwardedBadgesResponse.Builder {
      return try Pogoprotos.Networking.Responses.CheckAwardedBadgesResponse.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasSuccess {
        jsonMap["success"] = success
      }
      if !awardedBadges.isEmpty {
        var jsonArrayAwardedBadges:Array<String> = []
          for oneValueAwardedBadges in awardedBadges {
            jsonArrayAwardedBadges += [oneValueAwardedBadges.toString()]
          }
        jsonMap["awardedBadges"] = jsonArrayAwardedBadges
      }
      if !awardedBadgeLevels.isEmpty {
        var jsonArrayAwardedBadgeLevels:Array<NSNumber> = []
          for oneValueAwardedBadgeLevels in awardedBadgeLevels {
            jsonArrayAwardedBadgeLevels += [NSNumber(int:oneValueAwardedBadgeLevels)]
          }
        jsonMap["awardedBadgeLevels"] = jsonArrayAwardedBadgeLevels
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Responses.CheckAwardedBadgesResponse {
      return try Pogoprotos.Networking.Responses.CheckAwardedBadgesResponse.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Networking.Responses.CheckAwardedBadgesResponse {
      return try Pogoprotos.Networking.Responses.CheckAwardedBadgesResponse.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasSuccess {
        output += "\(indent) success: \(success) \n"
      }
      var awardedBadgesElementIndex:Int = 0
      for oneValueOfawardedBadges in awardedBadges {
          output += "\(indent) awardedBadges[\(awardedBadgesElementIndex)]: \(oneValueOfawardedBadges.description)\n"
          awardedBadgesElementIndex += 1
      }
      var awardedBadgeLevelsElementIndex:Int = 0
      for oneValueAwardedBadgeLevels in awardedBadgeLevels  {
          output += "\(indent) awardedBadgeLevels[\(awardedBadgeLevelsElementIndex)]: \(oneValueAwardedBadgeLevels)\n"
          awardedBadgeLevelsElementIndex += 1
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasSuccess {
               hashCode = (hashCode &* 31) &+ success.hashValue
            }
            for oneValueOfawardedBadges in awardedBadges {
                hashCode = (hashCode &* 31) &+ Int(oneValueOfawardedBadges.rawValue)
            }
            for oneValueAwardedBadgeLevels in awardedBadgeLevels {
                hashCode = (hashCode &* 31) &+ oneValueAwardedBadgeLevels.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Networking.Responses.CheckAwardedBadgesResponse"
    }
    override public func className() -> String {
        return "Pogoprotos.Networking.Responses.CheckAwardedBadgesResponse"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Networking.Responses.CheckAwardedBadgesResponse.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Networking.Responses.CheckAwardedBadgesResponse = Pogoprotos.Networking.Responses.CheckAwardedBadgesResponse()
      public func getMessage() -> Pogoprotos.Networking.Responses.CheckAwardedBadgesResponse {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasSuccess:Bool {
           get {
                return builderResult.hasSuccess
           }
      }
      public var success:Bool {
           get {
                return builderResult.success
           }
           set (value) {
               builderResult.hasSuccess = true
               builderResult.success = value
           }
      }
      public func setSuccess(value:Bool) -> Pogoprotos.Networking.Responses.CheckAwardedBadgesResponse.Builder {
        self.success = value
        return self
      }
      public func clearSuccess() -> Pogoprotos.Networking.Responses.CheckAwardedBadgesResponse.Builder{
           builderResult.hasSuccess = false
           builderResult.success = false
           return self
      }
      public var awardedBadges:Array<Pogoprotos.Enums.BadgeType> {
          get {
              return builderResult.awardedBadges
          }
          set (value) {
              builderResult.awardedBadges = value
          }
      }
      public func setAwardedBadges(value:Array<Pogoprotos.Enums.BadgeType>) -> Pogoprotos.Networking.Responses.CheckAwardedBadgesResponse.Builder {
        self.awardedBadges = value
        return self
      }
      public func clearAwardedBadges() -> Pogoprotos.Networking.Responses.CheckAwardedBadgesResponse.Builder {
        builderResult.awardedBadges.removeAll(keepCapacity: false)
        return self
      }
      public var awardedBadgeLevels:Array<Int32> {
           get {
               return builderResult.awardedBadgeLevels
           }
           set (array) {
               builderResult.awardedBadgeLevels = array
           }
      }
      public func setAwardedBadgeLevels(value:Array<Int32>) -> Pogoprotos.Networking.Responses.CheckAwardedBadgesResponse.Builder {
        self.awardedBadgeLevels = value
        return self
      }
      public func clearAwardedBadgeLevels() -> Pogoprotos.Networking.Responses.CheckAwardedBadgesResponse.Builder {
         builderResult.awardedBadgeLevels.removeAll(keepCapacity: false)
         return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Networking.Responses.CheckAwardedBadgesResponse.Builder {
        builderResult = Pogoprotos.Networking.Responses.CheckAwardedBadgesResponse()
        return self
      }
      override public func clone() throws -> Pogoprotos.Networking.Responses.CheckAwardedBadgesResponse.Builder {
        return try Pogoprotos.Networking.Responses.CheckAwardedBadgesResponse.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Networking.Responses.CheckAwardedBadgesResponse {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Networking.Responses.CheckAwardedBadgesResponse {
        let returnMe:Pogoprotos.Networking.Responses.CheckAwardedBadgesResponse = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Networking.Responses.CheckAwardedBadgesResponse) throws -> Pogoprotos.Networking.Responses.CheckAwardedBadgesResponse.Builder {
        if other == Pogoprotos.Networking.Responses.CheckAwardedBadgesResponse() {
         return self
        }
        if other.hasSuccess {
             success = other.success
        }
        if !other.awardedBadges.isEmpty {
           builderResult.awardedBadges += other.awardedBadges
        }
        if !other.awardedBadgeLevels.isEmpty {
            builderResult.awardedBadgeLevels += other.awardedBadgeLevels
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Responses.CheckAwardedBadgesResponse.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Responses.CheckAwardedBadgesResponse.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            success = try input.readBool()

          case 16:
            let valueIntawardedBadges = try input.readEnum()
            if let enumsawardedBadges = Pogoprotos.Enums.BadgeType(rawValue:valueIntawardedBadges) {
                 builderResult.awardedBadges += [enumsawardedBadges]
            } else {
                 try unknownFieldsBuilder.mergeVarintField(2, value:Int64(valueIntawardedBadges))
            }

          case 26:
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.awardedBadgeLevels += [try input.readInt32()]
            }
            input.popLimit(limit)

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Responses.CheckAwardedBadgesResponse.Builder {
        let resultDecodedBuilder = Pogoprotos.Networking.Responses.CheckAwardedBadgesResponse.Builder()
        if let jsonValueSuccess = jsonMap["success"] as? Bool {
          resultDecodedBuilder.success = jsonValueSuccess
        }
        if let jsonValueAwardedBadges = jsonMap["awardedBadges"] as? Array<String> {
          var jsonArrayAwardedBadges:Array<Pogoprotos.Enums.BadgeType> = []
          for oneValueAwardedBadges in jsonValueAwardedBadges {
            let enumFromStringAwardedBadges = try Pogoprotos.Enums.BadgeType.fromString(oneValueAwardedBadges)
            jsonArrayAwardedBadges += [enumFromStringAwardedBadges]
          }
          resultDecodedBuilder.awardedBadges = jsonArrayAwardedBadges
        }
        if let jsonValueAwardedBadgeLevels = jsonMap["awardedBadgeLevels"] as? Array<NSNumber> {
          var jsonArrayAwardedBadgeLevels:Array<Int32> = []
          for oneValueAwardedBadgeLevels in jsonValueAwardedBadgeLevels {
            jsonArrayAwardedBadgeLevels += [oneValueAwardedBadgeLevels.intValue]
          }
          resultDecodedBuilder.awardedBadgeLevels = jsonArrayAwardedBadgeLevels
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Networking.Responses.CheckAwardedBadgesResponse.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Networking.Responses.CheckAwardedBadgesResponse.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
