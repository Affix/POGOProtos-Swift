// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "IncenseAttributes.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Pogoprotos { public struct Settings { public struct Master { public struct Item { }}}}

public func == (lhs: Pogoprotos.Settings.Master.Item.IncenseAttributes, rhs: Pogoprotos.Settings.Master.Item.IncenseAttributes) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasIncenseLifetimeSeconds == rhs.hasIncenseLifetimeSeconds) && (!lhs.hasIncenseLifetimeSeconds || lhs.incenseLifetimeSeconds == rhs.incenseLifetimeSeconds)
  fieldCheck = fieldCheck && (lhs.pokemonType == rhs.pokemonType)
  fieldCheck = fieldCheck && (lhs.hasPokemonIncenseTypeProbability == rhs.hasPokemonIncenseTypeProbability) && (!lhs.hasPokemonIncenseTypeProbability || lhs.pokemonIncenseTypeProbability == rhs.pokemonIncenseTypeProbability)
  fieldCheck = fieldCheck && (lhs.hasStandingTimeBetweenEncountersSeconds == rhs.hasStandingTimeBetweenEncountersSeconds) && (!lhs.hasStandingTimeBetweenEncountersSeconds || lhs.standingTimeBetweenEncountersSeconds == rhs.standingTimeBetweenEncountersSeconds)
  fieldCheck = fieldCheck && (lhs.hasMovingTimeBetweenEncounterSeconds == rhs.hasMovingTimeBetweenEncounterSeconds) && (!lhs.hasMovingTimeBetweenEncounterSeconds || lhs.movingTimeBetweenEncounterSeconds == rhs.movingTimeBetweenEncounterSeconds)
  fieldCheck = fieldCheck && (lhs.hasDistanceRequiredForShorterIntervalMeters == rhs.hasDistanceRequiredForShorterIntervalMeters) && (!lhs.hasDistanceRequiredForShorterIntervalMeters || lhs.distanceRequiredForShorterIntervalMeters == rhs.distanceRequiredForShorterIntervalMeters)
  fieldCheck = fieldCheck && (lhs.hasPokemonAttractedLengthSec == rhs.hasPokemonAttractedLengthSec) && (!lhs.hasPokemonAttractedLengthSec || lhs.pokemonAttractedLengthSec == rhs.pokemonAttractedLengthSec)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Pogoprotos.Settings.Master.Item {
  public struct IncenseAttributesRoot {
    public static var sharedInstance : IncenseAttributesRoot {
     struct Static {
         static let instance : IncenseAttributesRoot = IncenseAttributesRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Pogoprotos.Enums.PokemonTypeRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class IncenseAttributes : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasIncenseLifetimeSeconds:Bool = false
    public private(set) var incenseLifetimeSeconds:Int32 = Int32(0)

    private var pokemonTypeMemoizedSerializedSize:Int32 = 0
    public private(set) var pokemonType:Array<Pogoprotos.Enums.PokemonType> = Array<Pogoprotos.Enums.PokemonType>()
    public private(set) var hasPokemonIncenseTypeProbability:Bool = false
    public private(set) var pokemonIncenseTypeProbability:Float = Float(0)

    public private(set) var hasStandingTimeBetweenEncountersSeconds:Bool = false
    public private(set) var standingTimeBetweenEncountersSeconds:Int32 = Int32(0)

    public private(set) var hasMovingTimeBetweenEncounterSeconds:Bool = false
    public private(set) var movingTimeBetweenEncounterSeconds:Int32 = Int32(0)

    public private(set) var hasDistanceRequiredForShorterIntervalMeters:Bool = false
    public private(set) var distanceRequiredForShorterIntervalMeters:Int32 = Int32(0)

    public private(set) var hasPokemonAttractedLengthSec:Bool = false
    public private(set) var pokemonAttractedLengthSec:Int32 = Int32(0)

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasIncenseLifetimeSeconds {
        try output.writeInt32(1, value:incenseLifetimeSeconds)
      }
      for oneValueOfpokemonType in pokemonType {
          try output.writeEnum(2, value:oneValueOfpokemonType.rawValue)
      }
      if hasPokemonIncenseTypeProbability {
        try output.writeFloat(3, value:pokemonIncenseTypeProbability)
      }
      if hasStandingTimeBetweenEncountersSeconds {
        try output.writeInt32(4, value:standingTimeBetweenEncountersSeconds)
      }
      if hasMovingTimeBetweenEncounterSeconds {
        try output.writeInt32(5, value:movingTimeBetweenEncounterSeconds)
      }
      if hasDistanceRequiredForShorterIntervalMeters {
        try output.writeInt32(6, value:distanceRequiredForShorterIntervalMeters)
      }
      if hasPokemonAttractedLengthSec {
        try output.writeInt32(7, value:pokemonAttractedLengthSec)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasIncenseLifetimeSeconds {
        serialize_size += incenseLifetimeSeconds.computeInt32Size(1)
      }
      var dataSizepokemonType:Int32 = 0
      for oneValueOfpokemonType in pokemonType {
          dataSizepokemonType += oneValueOfpokemonType.rawValue.computeEnumSizeNoTag()
      }
      serialize_size += dataSizepokemonType
      serialize_size += (1 * Int32(pokemonType.count))
      if hasPokemonIncenseTypeProbability {
        serialize_size += pokemonIncenseTypeProbability.computeFloatSize(3)
      }
      if hasStandingTimeBetweenEncountersSeconds {
        serialize_size += standingTimeBetweenEncountersSeconds.computeInt32Size(4)
      }
      if hasMovingTimeBetweenEncounterSeconds {
        serialize_size += movingTimeBetweenEncounterSeconds.computeInt32Size(5)
      }
      if hasDistanceRequiredForShorterIntervalMeters {
        serialize_size += distanceRequiredForShorterIntervalMeters.computeInt32Size(6)
      }
      if hasPokemonAttractedLengthSec {
        serialize_size += pokemonAttractedLengthSec.computeInt32Size(7)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Settings.Master.Item.IncenseAttributes> {
      var mergedArray = Array<Pogoprotos.Settings.Master.Item.IncenseAttributes>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.Master.Item.IncenseAttributes? {
      return try Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Settings.Master.Item.IncenseAttributes {
      return try Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Settings.Master.Item.IncenseAttributesRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Item.IncenseAttributes {
      return try Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.Master.Item.IncenseAttributes {
      return try Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Item.IncenseAttributes {
      return try Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.Master.Item.IncenseAttributes {
      return try Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Item.IncenseAttributes {
      return try Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder {
      return Pogoprotos.Settings.Master.Item.IncenseAttributes.classBuilder() as! Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder
    }
    public func getBuilder() -> Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder {
      return classBuilder() as! Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder {
      return try Pogoprotos.Settings.Master.Item.IncenseAttributes.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Settings.Master.Item.IncenseAttributes) throws -> Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder {
      return try Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasIncenseLifetimeSeconds {
        jsonMap["incenseLifetimeSeconds"] = NSNumber(int:incenseLifetimeSeconds)
      }
      if !pokemonType.isEmpty {
        var jsonArrayPokemonType:Array<String> = []
          for oneValuePokemonType in pokemonType {
            jsonArrayPokemonType += [oneValuePokemonType.toString()]
          }
        jsonMap["pokemonType"] = jsonArrayPokemonType
      }
      if hasPokemonIncenseTypeProbability {
        jsonMap["pokemonIncenseTypeProbability"] = NSNumber(float:pokemonIncenseTypeProbability)
      }
      if hasStandingTimeBetweenEncountersSeconds {
        jsonMap["standingTimeBetweenEncountersSeconds"] = NSNumber(int:standingTimeBetweenEncountersSeconds)
      }
      if hasMovingTimeBetweenEncounterSeconds {
        jsonMap["movingTimeBetweenEncounterSeconds"] = NSNumber(int:movingTimeBetweenEncounterSeconds)
      }
      if hasDistanceRequiredForShorterIntervalMeters {
        jsonMap["distanceRequiredForShorterIntervalMeters"] = NSNumber(int:distanceRequiredForShorterIntervalMeters)
      }
      if hasPokemonAttractedLengthSec {
        jsonMap["pokemonAttractedLengthSec"] = NSNumber(int:pokemonAttractedLengthSec)
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.Master.Item.IncenseAttributes {
      return try Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Settings.Master.Item.IncenseAttributes {
      return try Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasIncenseLifetimeSeconds {
        output += "\(indent) incenseLifetimeSeconds: \(incenseLifetimeSeconds) \n"
      }
      var pokemonTypeElementIndex:Int = 0
      for oneValueOfpokemonType in pokemonType {
          output += "\(indent) pokemonType[\(pokemonTypeElementIndex)]: \(oneValueOfpokemonType.description)\n"
          pokemonTypeElementIndex += 1
      }
      if hasPokemonIncenseTypeProbability {
        output += "\(indent) pokemonIncenseTypeProbability: \(pokemonIncenseTypeProbability) \n"
      }
      if hasStandingTimeBetweenEncountersSeconds {
        output += "\(indent) standingTimeBetweenEncountersSeconds: \(standingTimeBetweenEncountersSeconds) \n"
      }
      if hasMovingTimeBetweenEncounterSeconds {
        output += "\(indent) movingTimeBetweenEncounterSeconds: \(movingTimeBetweenEncounterSeconds) \n"
      }
      if hasDistanceRequiredForShorterIntervalMeters {
        output += "\(indent) distanceRequiredForShorterIntervalMeters: \(distanceRequiredForShorterIntervalMeters) \n"
      }
      if hasPokemonAttractedLengthSec {
        output += "\(indent) pokemonAttractedLengthSec: \(pokemonAttractedLengthSec) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIncenseLifetimeSeconds {
               hashCode = (hashCode &* 31) &+ incenseLifetimeSeconds.hashValue
            }
            for oneValueOfpokemonType in pokemonType {
                hashCode = (hashCode &* 31) &+ Int(oneValueOfpokemonType.rawValue)
            }
            if hasPokemonIncenseTypeProbability {
               hashCode = (hashCode &* 31) &+ pokemonIncenseTypeProbability.hashValue
            }
            if hasStandingTimeBetweenEncountersSeconds {
               hashCode = (hashCode &* 31) &+ standingTimeBetweenEncountersSeconds.hashValue
            }
            if hasMovingTimeBetweenEncounterSeconds {
               hashCode = (hashCode &* 31) &+ movingTimeBetweenEncounterSeconds.hashValue
            }
            if hasDistanceRequiredForShorterIntervalMeters {
               hashCode = (hashCode &* 31) &+ distanceRequiredForShorterIntervalMeters.hashValue
            }
            if hasPokemonAttractedLengthSec {
               hashCode = (hashCode &* 31) &+ pokemonAttractedLengthSec.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Settings.Master.Item.IncenseAttributes"
    }
    override public func className() -> String {
        return "Pogoprotos.Settings.Master.Item.IncenseAttributes"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Settings.Master.Item.IncenseAttributes.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Settings.Master.Item.IncenseAttributes = Pogoprotos.Settings.Master.Item.IncenseAttributes()
      public func getMessage() -> Pogoprotos.Settings.Master.Item.IncenseAttributes {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasIncenseLifetimeSeconds:Bool {
           get {
                return builderResult.hasIncenseLifetimeSeconds
           }
      }
      public var incenseLifetimeSeconds:Int32 {
           get {
                return builderResult.incenseLifetimeSeconds
           }
           set (value) {
               builderResult.hasIncenseLifetimeSeconds = true
               builderResult.incenseLifetimeSeconds = value
           }
      }
      public func setIncenseLifetimeSeconds(value:Int32) -> Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder {
        self.incenseLifetimeSeconds = value
        return self
      }
      public func clearIncenseLifetimeSeconds() -> Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder{
           builderResult.hasIncenseLifetimeSeconds = false
           builderResult.incenseLifetimeSeconds = Int32(0)
           return self
      }
      public var pokemonType:Array<Pogoprotos.Enums.PokemonType> {
          get {
              return builderResult.pokemonType
          }
          set (value) {
              builderResult.pokemonType = value
          }
      }
      public func setPokemonType(value:Array<Pogoprotos.Enums.PokemonType>) -> Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder {
        self.pokemonType = value
        return self
      }
      public func clearPokemonType() -> Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder {
        builderResult.pokemonType.removeAll(keepCapacity: false)
        return self
      }
      public var hasPokemonIncenseTypeProbability:Bool {
           get {
                return builderResult.hasPokemonIncenseTypeProbability
           }
      }
      public var pokemonIncenseTypeProbability:Float {
           get {
                return builderResult.pokemonIncenseTypeProbability
           }
           set (value) {
               builderResult.hasPokemonIncenseTypeProbability = true
               builderResult.pokemonIncenseTypeProbability = value
           }
      }
      public func setPokemonIncenseTypeProbability(value:Float) -> Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder {
        self.pokemonIncenseTypeProbability = value
        return self
      }
      public func clearPokemonIncenseTypeProbability() -> Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder{
           builderResult.hasPokemonIncenseTypeProbability = false
           builderResult.pokemonIncenseTypeProbability = Float(0)
           return self
      }
      public var hasStandingTimeBetweenEncountersSeconds:Bool {
           get {
                return builderResult.hasStandingTimeBetweenEncountersSeconds
           }
      }
      public var standingTimeBetweenEncountersSeconds:Int32 {
           get {
                return builderResult.standingTimeBetweenEncountersSeconds
           }
           set (value) {
               builderResult.hasStandingTimeBetweenEncountersSeconds = true
               builderResult.standingTimeBetweenEncountersSeconds = value
           }
      }
      public func setStandingTimeBetweenEncountersSeconds(value:Int32) -> Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder {
        self.standingTimeBetweenEncountersSeconds = value
        return self
      }
      public func clearStandingTimeBetweenEncountersSeconds() -> Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder{
           builderResult.hasStandingTimeBetweenEncountersSeconds = false
           builderResult.standingTimeBetweenEncountersSeconds = Int32(0)
           return self
      }
      public var hasMovingTimeBetweenEncounterSeconds:Bool {
           get {
                return builderResult.hasMovingTimeBetweenEncounterSeconds
           }
      }
      public var movingTimeBetweenEncounterSeconds:Int32 {
           get {
                return builderResult.movingTimeBetweenEncounterSeconds
           }
           set (value) {
               builderResult.hasMovingTimeBetweenEncounterSeconds = true
               builderResult.movingTimeBetweenEncounterSeconds = value
           }
      }
      public func setMovingTimeBetweenEncounterSeconds(value:Int32) -> Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder {
        self.movingTimeBetweenEncounterSeconds = value
        return self
      }
      public func clearMovingTimeBetweenEncounterSeconds() -> Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder{
           builderResult.hasMovingTimeBetweenEncounterSeconds = false
           builderResult.movingTimeBetweenEncounterSeconds = Int32(0)
           return self
      }
      public var hasDistanceRequiredForShorterIntervalMeters:Bool {
           get {
                return builderResult.hasDistanceRequiredForShorterIntervalMeters
           }
      }
      public var distanceRequiredForShorterIntervalMeters:Int32 {
           get {
                return builderResult.distanceRequiredForShorterIntervalMeters
           }
           set (value) {
               builderResult.hasDistanceRequiredForShorterIntervalMeters = true
               builderResult.distanceRequiredForShorterIntervalMeters = value
           }
      }
      public func setDistanceRequiredForShorterIntervalMeters(value:Int32) -> Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder {
        self.distanceRequiredForShorterIntervalMeters = value
        return self
      }
      public func clearDistanceRequiredForShorterIntervalMeters() -> Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder{
           builderResult.hasDistanceRequiredForShorterIntervalMeters = false
           builderResult.distanceRequiredForShorterIntervalMeters = Int32(0)
           return self
      }
      public var hasPokemonAttractedLengthSec:Bool {
           get {
                return builderResult.hasPokemonAttractedLengthSec
           }
      }
      public var pokemonAttractedLengthSec:Int32 {
           get {
                return builderResult.pokemonAttractedLengthSec
           }
           set (value) {
               builderResult.hasPokemonAttractedLengthSec = true
               builderResult.pokemonAttractedLengthSec = value
           }
      }
      public func setPokemonAttractedLengthSec(value:Int32) -> Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder {
        self.pokemonAttractedLengthSec = value
        return self
      }
      public func clearPokemonAttractedLengthSec() -> Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder{
           builderResult.hasPokemonAttractedLengthSec = false
           builderResult.pokemonAttractedLengthSec = Int32(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder {
        builderResult = Pogoprotos.Settings.Master.Item.IncenseAttributes()
        return self
      }
      override public func clone() throws -> Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder {
        return try Pogoprotos.Settings.Master.Item.IncenseAttributes.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Settings.Master.Item.IncenseAttributes {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Settings.Master.Item.IncenseAttributes {
        let returnMe:Pogoprotos.Settings.Master.Item.IncenseAttributes = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Settings.Master.Item.IncenseAttributes) throws -> Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder {
        if other == Pogoprotos.Settings.Master.Item.IncenseAttributes() {
         return self
        }
        if other.hasIncenseLifetimeSeconds {
             incenseLifetimeSeconds = other.incenseLifetimeSeconds
        }
        if !other.pokemonType.isEmpty {
           builderResult.pokemonType += other.pokemonType
        }
        if other.hasPokemonIncenseTypeProbability {
             pokemonIncenseTypeProbability = other.pokemonIncenseTypeProbability
        }
        if other.hasStandingTimeBetweenEncountersSeconds {
             standingTimeBetweenEncountersSeconds = other.standingTimeBetweenEncountersSeconds
        }
        if other.hasMovingTimeBetweenEncounterSeconds {
             movingTimeBetweenEncounterSeconds = other.movingTimeBetweenEncounterSeconds
        }
        if other.hasDistanceRequiredForShorterIntervalMeters {
             distanceRequiredForShorterIntervalMeters = other.distanceRequiredForShorterIntervalMeters
        }
        if other.hasPokemonAttractedLengthSec {
             pokemonAttractedLengthSec = other.pokemonAttractedLengthSec
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            incenseLifetimeSeconds = try input.readInt32()

          case 16:
            let valueIntpokemonType = try input.readEnum()
            if let enumspokemonType = Pogoprotos.Enums.PokemonType(rawValue:valueIntpokemonType) {
                 builderResult.pokemonType += [enumspokemonType]
            } else {
                 try unknownFieldsBuilder.mergeVarintField(2, value:Int64(valueIntpokemonType))
            }

          case 29:
            pokemonIncenseTypeProbability = try input.readFloat()

          case 32:
            standingTimeBetweenEncountersSeconds = try input.readInt32()

          case 40:
            movingTimeBetweenEncounterSeconds = try input.readInt32()

          case 48:
            distanceRequiredForShorterIntervalMeters = try input.readInt32()

          case 56:
            pokemonAttractedLengthSec = try input.readInt32()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder {
        let resultDecodedBuilder = Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder()
        if let jsonValueIncenseLifetimeSeconds = jsonMap["incenseLifetimeSeconds"] as? NSNumber {
          resultDecodedBuilder.incenseLifetimeSeconds = jsonValueIncenseLifetimeSeconds.intValue
        }
        if let jsonValuePokemonType = jsonMap["pokemonType"] as? Array<String> {
          var jsonArrayPokemonType:Array<Pogoprotos.Enums.PokemonType> = []
          for oneValuePokemonType in jsonValuePokemonType {
            let enumFromStringPokemonType = try Pogoprotos.Enums.PokemonType.fromString(oneValuePokemonType)
            jsonArrayPokemonType += [enumFromStringPokemonType]
          }
          resultDecodedBuilder.pokemonType = jsonArrayPokemonType
        }
        if let jsonValuePokemonIncenseTypeProbability = jsonMap["pokemonIncenseTypeProbability"] as? NSNumber {
          resultDecodedBuilder.pokemonIncenseTypeProbability = jsonValuePokemonIncenseTypeProbability.floatValue
        }
        if let jsonValueStandingTimeBetweenEncountersSeconds = jsonMap["standingTimeBetweenEncountersSeconds"] as? NSNumber {
          resultDecodedBuilder.standingTimeBetweenEncountersSeconds = jsonValueStandingTimeBetweenEncountersSeconds.intValue
        }
        if let jsonValueMovingTimeBetweenEncounterSeconds = jsonMap["movingTimeBetweenEncounterSeconds"] as? NSNumber {
          resultDecodedBuilder.movingTimeBetweenEncounterSeconds = jsonValueMovingTimeBetweenEncounterSeconds.intValue
        }
        if let jsonValueDistanceRequiredForShorterIntervalMeters = jsonMap["distanceRequiredForShorterIntervalMeters"] as? NSNumber {
          resultDecodedBuilder.distanceRequiredForShorterIntervalMeters = jsonValueDistanceRequiredForShorterIntervalMeters.intValue
        }
        if let jsonValuePokemonAttractedLengthSec = jsonMap["pokemonAttractedLengthSec"] as? NSNumber {
          resultDecodedBuilder.pokemonAttractedLengthSec = jsonValuePokemonAttractedLengthSec.intValue
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
