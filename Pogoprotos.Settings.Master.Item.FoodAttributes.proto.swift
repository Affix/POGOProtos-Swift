// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "FoodAttributes.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Pogoprotos { public struct Settings { public struct Master { public struct Item { }}}}

public func == (lhs: Pogoprotos.Settings.Master.Item.FoodAttributes, rhs: Pogoprotos.Settings.Master.Item.FoodAttributes) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.itemEffect == rhs.itemEffect)
  fieldCheck = fieldCheck && (lhs.itemEffectPercent == rhs.itemEffectPercent)
  fieldCheck = fieldCheck && (lhs.hasGrowthPercent == rhs.hasGrowthPercent) && (!lhs.hasGrowthPercent || lhs.growthPercent == rhs.growthPercent)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Pogoprotos.Settings.Master.Item {
  public struct FoodAttributesRoot {
    public static var sharedInstance : FoodAttributesRoot {
     struct Static {
         static let instance : FoodAttributesRoot = FoodAttributesRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Pogoprotos.Enums.ItemEffectRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class FoodAttributes : GeneratedMessage, GeneratedMessageProtocol {
    private var itemEffectMemoizedSerializedSize:Int32 = 0
    public private(set) var itemEffect:Array<Pogoprotos.Enums.ItemEffect> = Array<Pogoprotos.Enums.ItemEffect>()
    public private(set) var itemEffectPercent:Array<Float> = Array<Float>()
    private var itemEffectPercentMemoizedSerializedSize:Int32 = -1
    public private(set) var hasGrowthPercent:Bool = false
    public private(set) var growthPercent:Float = Float(0)

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      for oneValueOfitemEffect in itemEffect {
          try output.writeEnum(1, value:oneValueOfitemEffect.rawValue)
      }
      if !itemEffectPercent.isEmpty {
        try output.writeRawVarint32(18)
        try output.writeRawVarint32(itemEffectPercentMemoizedSerializedSize)
        for oneValueitemEffectPercent in itemEffectPercent {
          try output.writeFloatNoTag(oneValueitemEffectPercent)
        }
      }
      if hasGrowthPercent {
        try output.writeFloat(3, value:growthPercent)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      var dataSizeitemEffect:Int32 = 0
      for oneValueOfitemEffect in itemEffect {
          dataSizeitemEffect += oneValueOfitemEffect.rawValue.computeEnumSizeNoTag()
      }
      serialize_size += dataSizeitemEffect
      serialize_size += (1 * Int32(itemEffect.count))
      var dataSizeItemEffectPercent:Int32 = 0
      dataSizeItemEffectPercent = 4 * Int32(itemEffectPercent.count)
      serialize_size += dataSizeItemEffectPercent
      if !itemEffectPercent.isEmpty {
        serialize_size += 1
        serialize_size += dataSizeItemEffectPercent.computeInt32SizeNoTag()
      }
      itemEffectPercentMemoizedSerializedSize = dataSizeItemEffectPercent
      if hasGrowthPercent {
        serialize_size += growthPercent.computeFloatSize(3)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Settings.Master.Item.FoodAttributes> {
      var mergedArray = Array<Pogoprotos.Settings.Master.Item.FoodAttributes>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.Master.Item.FoodAttributes? {
      return try Pogoprotos.Settings.Master.Item.FoodAttributes.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Settings.Master.Item.FoodAttributes {
      return try Pogoprotos.Settings.Master.Item.FoodAttributes.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Settings.Master.Item.FoodAttributesRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Item.FoodAttributes {
      return try Pogoprotos.Settings.Master.Item.FoodAttributes.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.Master.Item.FoodAttributes {
      return try Pogoprotos.Settings.Master.Item.FoodAttributes.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Item.FoodAttributes {
      return try Pogoprotos.Settings.Master.Item.FoodAttributes.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.Master.Item.FoodAttributes {
      return try Pogoprotos.Settings.Master.Item.FoodAttributes.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Item.FoodAttributes {
      return try Pogoprotos.Settings.Master.Item.FoodAttributes.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Settings.Master.Item.FoodAttributes.Builder {
      return Pogoprotos.Settings.Master.Item.FoodAttributes.classBuilder() as! Pogoprotos.Settings.Master.Item.FoodAttributes.Builder
    }
    public func getBuilder() -> Pogoprotos.Settings.Master.Item.FoodAttributes.Builder {
      return classBuilder() as! Pogoprotos.Settings.Master.Item.FoodAttributes.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.Master.Item.FoodAttributes.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.Master.Item.FoodAttributes.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Settings.Master.Item.FoodAttributes.Builder {
      return try Pogoprotos.Settings.Master.Item.FoodAttributes.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Settings.Master.Item.FoodAttributes) throws -> Pogoprotos.Settings.Master.Item.FoodAttributes.Builder {
      return try Pogoprotos.Settings.Master.Item.FoodAttributes.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if !itemEffect.isEmpty {
        var jsonArrayItemEffect:Array<String> = []
          for oneValueItemEffect in itemEffect {
            jsonArrayItemEffect += [oneValueItemEffect.toString()]
          }
        jsonMap["itemEffect"] = jsonArrayItemEffect
      }
      if !itemEffectPercent.isEmpty {
        var jsonArrayItemEffectPercent:Array<NSNumber> = []
          for oneValueItemEffectPercent in itemEffectPercent {
            jsonArrayItemEffectPercent += [NSNumber(float:oneValueItemEffectPercent)]
          }
        jsonMap["itemEffectPercent"] = jsonArrayItemEffectPercent
      }
      if hasGrowthPercent {
        jsonMap["growthPercent"] = NSNumber(float:growthPercent)
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.Master.Item.FoodAttributes {
      return try Pogoprotos.Settings.Master.Item.FoodAttributes.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Settings.Master.Item.FoodAttributes {
      return try Pogoprotos.Settings.Master.Item.FoodAttributes.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      var itemEffectElementIndex:Int = 0
      for oneValueOfitemEffect in itemEffect {
          output += "\(indent) itemEffect[\(itemEffectElementIndex)]: \(oneValueOfitemEffect.description)\n"
          itemEffectElementIndex += 1
      }
      var itemEffectPercentElementIndex:Int = 0
      for oneValueItemEffectPercent in itemEffectPercent  {
          output += "\(indent) itemEffectPercent[\(itemEffectPercentElementIndex)]: \(oneValueItemEffectPercent)\n"
          itemEffectPercentElementIndex += 1
      }
      if hasGrowthPercent {
        output += "\(indent) growthPercent: \(growthPercent) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            for oneValueOfitemEffect in itemEffect {
                hashCode = (hashCode &* 31) &+ Int(oneValueOfitemEffect.rawValue)
            }
            for oneValueItemEffectPercent in itemEffectPercent {
                hashCode = (hashCode &* 31) &+ oneValueItemEffectPercent.hashValue
            }
            if hasGrowthPercent {
               hashCode = (hashCode &* 31) &+ growthPercent.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Settings.Master.Item.FoodAttributes"
    }
    override public func className() -> String {
        return "Pogoprotos.Settings.Master.Item.FoodAttributes"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Settings.Master.Item.FoodAttributes.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Settings.Master.Item.FoodAttributes = Pogoprotos.Settings.Master.Item.FoodAttributes()
      public func getMessage() -> Pogoprotos.Settings.Master.Item.FoodAttributes {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var itemEffect:Array<Pogoprotos.Enums.ItemEffect> {
          get {
              return builderResult.itemEffect
          }
          set (value) {
              builderResult.itemEffect = value
          }
      }
      public func setItemEffect(value:Array<Pogoprotos.Enums.ItemEffect>) -> Pogoprotos.Settings.Master.Item.FoodAttributes.Builder {
        self.itemEffect = value
        return self
      }
      public func clearItemEffect() -> Pogoprotos.Settings.Master.Item.FoodAttributes.Builder {
        builderResult.itemEffect.removeAll(keepCapacity: false)
        return self
      }
      public var itemEffectPercent:Array<Float> {
           get {
               return builderResult.itemEffectPercent
           }
           set (array) {
               builderResult.itemEffectPercent = array
           }
      }
      public func setItemEffectPercent(value:Array<Float>) -> Pogoprotos.Settings.Master.Item.FoodAttributes.Builder {
        self.itemEffectPercent = value
        return self
      }
      public func clearItemEffectPercent() -> Pogoprotos.Settings.Master.Item.FoodAttributes.Builder {
         builderResult.itemEffectPercent.removeAll(keepCapacity: false)
         return self
      }
      public var hasGrowthPercent:Bool {
           get {
                return builderResult.hasGrowthPercent
           }
      }
      public var growthPercent:Float {
           get {
                return builderResult.growthPercent
           }
           set (value) {
               builderResult.hasGrowthPercent = true
               builderResult.growthPercent = value
           }
      }
      public func setGrowthPercent(value:Float) -> Pogoprotos.Settings.Master.Item.FoodAttributes.Builder {
        self.growthPercent = value
        return self
      }
      public func clearGrowthPercent() -> Pogoprotos.Settings.Master.Item.FoodAttributes.Builder{
           builderResult.hasGrowthPercent = false
           builderResult.growthPercent = Float(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Settings.Master.Item.FoodAttributes.Builder {
        builderResult = Pogoprotos.Settings.Master.Item.FoodAttributes()
        return self
      }
      override public func clone() throws -> Pogoprotos.Settings.Master.Item.FoodAttributes.Builder {
        return try Pogoprotos.Settings.Master.Item.FoodAttributes.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Settings.Master.Item.FoodAttributes {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Settings.Master.Item.FoodAttributes {
        let returnMe:Pogoprotos.Settings.Master.Item.FoodAttributes = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Settings.Master.Item.FoodAttributes) throws -> Pogoprotos.Settings.Master.Item.FoodAttributes.Builder {
        if other == Pogoprotos.Settings.Master.Item.FoodAttributes() {
         return self
        }
        if !other.itemEffect.isEmpty {
           builderResult.itemEffect += other.itemEffect
        }
        if !other.itemEffectPercent.isEmpty {
            builderResult.itemEffectPercent += other.itemEffectPercent
        }
        if other.hasGrowthPercent {
             growthPercent = other.growthPercent
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.Master.Item.FoodAttributes.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Item.FoodAttributes.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            let valueIntitemEffect = try input.readEnum()
            if let enumsitemEffect = Pogoprotos.Enums.ItemEffect(rawValue:valueIntitemEffect) {
                 builderResult.itemEffect += [enumsitemEffect]
            } else {
                 try unknownFieldsBuilder.mergeVarintField(1, value:Int64(valueIntitemEffect))
            }

          case 18:
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.itemEffectPercent += [try input.readFloat()]
            }
            input.popLimit(limit)

          case 29:
            growthPercent = try input.readFloat()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.Master.Item.FoodAttributes.Builder {
        let resultDecodedBuilder = Pogoprotos.Settings.Master.Item.FoodAttributes.Builder()
        if let jsonValueItemEffect = jsonMap["itemEffect"] as? Array<String> {
          var jsonArrayItemEffect:Array<Pogoprotos.Enums.ItemEffect> = []
          for oneValueItemEffect in jsonValueItemEffect {
            let enumFromStringItemEffect = try Pogoprotos.Enums.ItemEffect.fromString(oneValueItemEffect)
            jsonArrayItemEffect += [enumFromStringItemEffect]
          }
          resultDecodedBuilder.itemEffect = jsonArrayItemEffect
        }
        if let jsonValueItemEffectPercent = jsonMap["itemEffectPercent"] as? Array<NSNumber> {
          var jsonArrayItemEffectPercent:Array<Float> = []
          for oneValueItemEffectPercent in jsonValueItemEffectPercent {
            jsonArrayItemEffectPercent += [oneValueItemEffectPercent.floatValue]
          }
          resultDecodedBuilder.itemEffectPercent = jsonArrayItemEffectPercent
        }
        if let jsonValueGrowthPercent = jsonMap["growthPercent"] as? NSNumber {
          resultDecodedBuilder.growthPercent = jsonValueGrowthPercent.floatValue
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Settings.Master.Item.FoodAttributes.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Settings.Master.Item.FoodAttributes.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
