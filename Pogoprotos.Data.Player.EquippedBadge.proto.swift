// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "EquippedBadge.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Pogoprotos { public struct Data { public struct Player { }}}

public func == (lhs: Pogoprotos.Data.Player.EquippedBadge, rhs: Pogoprotos.Data.Player.EquippedBadge) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasBadgeType == rhs.hasBadgeType) && (!lhs.hasBadgeType || lhs.badgeType == rhs.badgeType)
  fieldCheck = fieldCheck && (lhs.hasLevel == rhs.hasLevel) && (!lhs.hasLevel || lhs.level == rhs.level)
  fieldCheck = fieldCheck && (lhs.hasNextEquipChangeAllowedTimestampMs == rhs.hasNextEquipChangeAllowedTimestampMs) && (!lhs.hasNextEquipChangeAllowedTimestampMs || lhs.nextEquipChangeAllowedTimestampMs == rhs.nextEquipChangeAllowedTimestampMs)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Pogoprotos.Data.Player {
  public struct EquippedBadgeRoot {
    public static var sharedInstance : EquippedBadgeRoot {
     struct Static {
         static let instance : EquippedBadgeRoot = EquippedBadgeRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Pogoprotos.Enums.BadgeTypeRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class EquippedBadge : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var badgeType:Pogoprotos.Enums.BadgeType = Pogoprotos.Enums.BadgeType.BadgeUnset
    public private(set) var hasBadgeType:Bool = false
    public private(set) var hasLevel:Bool = false
    public private(set) var level:Int32 = Int32(0)

    public private(set) var hasNextEquipChangeAllowedTimestampMs:Bool = false
    public private(set) var nextEquipChangeAllowedTimestampMs:Int64 = Int64(0)

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasBadgeType {
        try output.writeEnum(1, value:badgeType.rawValue)
      }
      if hasLevel {
        try output.writeInt32(2, value:level)
      }
      if hasNextEquipChangeAllowedTimestampMs {
        try output.writeInt64(3, value:nextEquipChangeAllowedTimestampMs)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if (hasBadgeType) {
        serialize_size += badgeType.rawValue.computeEnumSize(1)
      }
      if hasLevel {
        serialize_size += level.computeInt32Size(2)
      }
      if hasNextEquipChangeAllowedTimestampMs {
        serialize_size += nextEquipChangeAllowedTimestampMs.computeInt64Size(3)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Data.Player.EquippedBadge> {
      var mergedArray = Array<Pogoprotos.Data.Player.EquippedBadge>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Data.Player.EquippedBadge? {
      return try Pogoprotos.Data.Player.EquippedBadge.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Data.Player.EquippedBadge {
      return try Pogoprotos.Data.Player.EquippedBadge.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Data.Player.EquippedBadgeRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.Player.EquippedBadge {
      return try Pogoprotos.Data.Player.EquippedBadge.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Data.Player.EquippedBadge {
      return try Pogoprotos.Data.Player.EquippedBadge.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.Player.EquippedBadge {
      return try Pogoprotos.Data.Player.EquippedBadge.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Data.Player.EquippedBadge {
      return try Pogoprotos.Data.Player.EquippedBadge.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.Player.EquippedBadge {
      return try Pogoprotos.Data.Player.EquippedBadge.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Data.Player.EquippedBadge.Builder {
      return Pogoprotos.Data.Player.EquippedBadge.classBuilder() as! Pogoprotos.Data.Player.EquippedBadge.Builder
    }
    public func getBuilder() -> Pogoprotos.Data.Player.EquippedBadge.Builder {
      return classBuilder() as! Pogoprotos.Data.Player.EquippedBadge.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Data.Player.EquippedBadge.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Data.Player.EquippedBadge.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Data.Player.EquippedBadge.Builder {
      return try Pogoprotos.Data.Player.EquippedBadge.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Data.Player.EquippedBadge) throws -> Pogoprotos.Data.Player.EquippedBadge.Builder {
      return try Pogoprotos.Data.Player.EquippedBadge.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasBadgeType {
        jsonMap["badgeType"] = badgeType.toString()
      }
      if hasLevel {
        jsonMap["level"] = NSNumber(int:level)
      }
      if hasNextEquipChangeAllowedTimestampMs {
        jsonMap["nextEquipChangeAllowedTimestampMs"] = "\(nextEquipChangeAllowedTimestampMs)"
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Data.Player.EquippedBadge {
      return try Pogoprotos.Data.Player.EquippedBadge.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Data.Player.EquippedBadge {
      return try Pogoprotos.Data.Player.EquippedBadge.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if (hasBadgeType) {
        output += "\(indent) badgeType: \(badgeType.description)\n"
      }
      if hasLevel {
        output += "\(indent) level: \(level) \n"
      }
      if hasNextEquipChangeAllowedTimestampMs {
        output += "\(indent) nextEquipChangeAllowedTimestampMs: \(nextEquipChangeAllowedTimestampMs) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasBadgeType {
               hashCode = (hashCode &* 31) &+ Int(badgeType.rawValue)
            }
            if hasLevel {
               hashCode = (hashCode &* 31) &+ level.hashValue
            }
            if hasNextEquipChangeAllowedTimestampMs {
               hashCode = (hashCode &* 31) &+ nextEquipChangeAllowedTimestampMs.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Data.Player.EquippedBadge"
    }
    override public func className() -> String {
        return "Pogoprotos.Data.Player.EquippedBadge"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Data.Player.EquippedBadge.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Data.Player.EquippedBadge = Pogoprotos.Data.Player.EquippedBadge()
      public func getMessage() -> Pogoprotos.Data.Player.EquippedBadge {
          return builderResult
      }

      required override public init () {
         super.init()
      }
        public var hasBadgeType:Bool{
            get {
                return builderResult.hasBadgeType
            }
        }
        public var badgeType:Pogoprotos.Enums.BadgeType {
            get {
                return builderResult.badgeType
            }
            set (value) {
                builderResult.hasBadgeType = true
                builderResult.badgeType = value
            }
        }
        public func setBadgeType(value:Pogoprotos.Enums.BadgeType) -> Pogoprotos.Data.Player.EquippedBadge.Builder {
          self.badgeType = value
          return self
        }
        public func clearBadgeType() -> Pogoprotos.Data.Player.EquippedBadge.Builder {
           builderResult.hasBadgeType = false
           builderResult.badgeType = .BadgeUnset
           return self
        }
      public var hasLevel:Bool {
           get {
                return builderResult.hasLevel
           }
      }
      public var level:Int32 {
           get {
                return builderResult.level
           }
           set (value) {
               builderResult.hasLevel = true
               builderResult.level = value
           }
      }
      public func setLevel(value:Int32) -> Pogoprotos.Data.Player.EquippedBadge.Builder {
        self.level = value
        return self
      }
      public func clearLevel() -> Pogoprotos.Data.Player.EquippedBadge.Builder{
           builderResult.hasLevel = false
           builderResult.level = Int32(0)
           return self
      }
      public var hasNextEquipChangeAllowedTimestampMs:Bool {
           get {
                return builderResult.hasNextEquipChangeAllowedTimestampMs
           }
      }
      public var nextEquipChangeAllowedTimestampMs:Int64 {
           get {
                return builderResult.nextEquipChangeAllowedTimestampMs
           }
           set (value) {
               builderResult.hasNextEquipChangeAllowedTimestampMs = true
               builderResult.nextEquipChangeAllowedTimestampMs = value
           }
      }
      public func setNextEquipChangeAllowedTimestampMs(value:Int64) -> Pogoprotos.Data.Player.EquippedBadge.Builder {
        self.nextEquipChangeAllowedTimestampMs = value
        return self
      }
      public func clearNextEquipChangeAllowedTimestampMs() -> Pogoprotos.Data.Player.EquippedBadge.Builder{
           builderResult.hasNextEquipChangeAllowedTimestampMs = false
           builderResult.nextEquipChangeAllowedTimestampMs = Int64(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Data.Player.EquippedBadge.Builder {
        builderResult = Pogoprotos.Data.Player.EquippedBadge()
        return self
      }
      override public func clone() throws -> Pogoprotos.Data.Player.EquippedBadge.Builder {
        return try Pogoprotos.Data.Player.EquippedBadge.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Data.Player.EquippedBadge {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Data.Player.EquippedBadge {
        let returnMe:Pogoprotos.Data.Player.EquippedBadge = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Data.Player.EquippedBadge) throws -> Pogoprotos.Data.Player.EquippedBadge.Builder {
        if other == Pogoprotos.Data.Player.EquippedBadge() {
         return self
        }
        if other.hasBadgeType {
             badgeType = other.badgeType
        }
        if other.hasLevel {
             level = other.level
        }
        if other.hasNextEquipChangeAllowedTimestampMs {
             nextEquipChangeAllowedTimestampMs = other.nextEquipChangeAllowedTimestampMs
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Data.Player.EquippedBadge.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.Player.EquippedBadge.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            let valueIntbadgeType = try input.readEnum()
            if let enumsbadgeType = Pogoprotos.Enums.BadgeType(rawValue:valueIntbadgeType){
                 badgeType = enumsbadgeType
            } else {
                 try unknownFieldsBuilder.mergeVarintField(1, value:Int64(valueIntbadgeType))
            }

          case 16:
            level = try input.readInt32()

          case 24:
            nextEquipChangeAllowedTimestampMs = try input.readInt64()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Data.Player.EquippedBadge.Builder {
        let resultDecodedBuilder = Pogoprotos.Data.Player.EquippedBadge.Builder()
        if let jsonValueBadgeType = jsonMap["badgeType"] as? String {
          resultDecodedBuilder.badgeType = try Pogoprotos.Enums.BadgeType.fromString(jsonValueBadgeType)
        }
        if let jsonValueLevel = jsonMap["level"] as? NSNumber {
          resultDecodedBuilder.level = jsonValueLevel.intValue
        }
        if let jsonValueNextEquipChangeAllowedTimestampMs = jsonMap["nextEquipChangeAllowedTimestampMs"] as? String {
          resultDecodedBuilder.nextEquipChangeAllowedTimestampMs = Int64(jsonValueNextEquipChangeAllowedTimestampMs)!
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Data.Player.EquippedBadge.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Data.Player.EquippedBadge.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
