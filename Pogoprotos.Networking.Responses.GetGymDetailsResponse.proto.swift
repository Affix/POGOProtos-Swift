// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "GetGymDetailsResponse.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Pogoprotos { public struct Networking { public struct Responses { }}}

public func == (lhs: Pogoprotos.Networking.Responses.GetGymDetailsResponse, rhs: Pogoprotos.Networking.Responses.GetGymDetailsResponse) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasGymState == rhs.hasGymState) && (!lhs.hasGymState || lhs.gymState == rhs.gymState)
  fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
  fieldCheck = fieldCheck && (lhs.urls == rhs.urls)
  fieldCheck = fieldCheck && (lhs.hasResult == rhs.hasResult) && (!lhs.hasResult || lhs.result == rhs.result)
  fieldCheck = fieldCheck && (lhs.hasDescription == rhs.hasDescription) && (!lhs.hasDescription || lhs.description_ == rhs.description_)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Pogoprotos.Networking.Responses {
  public struct GetGymDetailsResponseRoot {
    public static var sharedInstance : GetGymDetailsResponseRoot {
     struct Static {
         static let instance : GetGymDetailsResponseRoot = GetGymDetailsResponseRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Pogoprotos.Data.Gym.GymStateRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class GetGymDetailsResponse : GeneratedMessage, GeneratedMessageProtocol {


      //Enum type declaration start 

      public enum Result:Int32, CustomDebugStringConvertible, CustomStringConvertible {
        case Unset = 0
        case Success = 1
        case ErrorNotInRange = 2
        public func toString() -> String {
          switch self {
          case .Unset: return "UNSET"
          case .Success: return "SUCCESS"
          case .ErrorNotInRange: return "ERROR_NOT_IN_RANGE"
          }
        }
        public static func fromString(str:String) throws -> Pogoprotos.Networking.Responses.GetGymDetailsResponse.Result {
          switch str {
          case "UNSET":  return .Unset
          case "SUCCESS":  return .Success
          case "ERROR_NOT_IN_RANGE":  return .ErrorNotInRange
          default: throw ProtocolBuffersError.InvalidProtocolBuffer("Conversion String to Enum has failed.")
          }
        }
        public var debugDescription:String { return getDescription() }
        public var description:String { return getDescription() }
        private func getDescription() -> String { 
            switch self {
                case .Unset: return ".Unset"
                case .Success: return ".Success"
                case .ErrorNotInRange: return ".ErrorNotInRange"
            }
        }
      }

      //Enum type declaration end 

    public private(set) var hasGymState:Bool = false
    public private(set) var gymState:Pogoprotos.Data.Gym.GymState!
    public private(set) var hasName:Bool = false
    public private(set) var name:String = ""

    public private(set) var urls:Array<String> = Array<String>()
    public private(set) var result:Pogoprotos.Networking.Responses.GetGymDetailsResponse.Result = Pogoprotos.Networking.Responses.GetGymDetailsResponse.Result.Unset
    public private(set) var hasResult:Bool = false
    public private(set) var hasDescription:Bool = false
    public private(set) var description_:String = ""

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasGymState {
        try output.writeMessage(1, value:gymState)
      }
      if hasName {
        try output.writeString(2, value:name)
      }
      if !urls.isEmpty {
        for oneValueurls in urls {
          try output.writeString(3, value:oneValueurls)
        }
      }
      if hasResult {
        try output.writeEnum(4, value:result.rawValue)
      }
      if hasDescription {
        try output.writeString(5, value:description_)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasGymState {
          if let varSizegymState = gymState?.computeMessageSize(1) {
              serialize_size += varSizegymState
          }
      }
      if hasName {
        serialize_size += name.computeStringSize(2)
      }
      var dataSizeUrls:Int32 = 0
      for oneValueurls in urls {
          dataSizeUrls += oneValueurls.computeStringSizeNoTag()
      }
      serialize_size += dataSizeUrls
      serialize_size += 1 * Int32(urls.count)
      if (hasResult) {
        serialize_size += result.rawValue.computeEnumSize(4)
      }
      if hasDescription {
        serialize_size += description_.computeStringSize(5)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Networking.Responses.GetGymDetailsResponse> {
      var mergedArray = Array<Pogoprotos.Networking.Responses.GetGymDetailsResponse>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Responses.GetGymDetailsResponse? {
      return try Pogoprotos.Networking.Responses.GetGymDetailsResponse.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Networking.Responses.GetGymDetailsResponse {
      return try Pogoprotos.Networking.Responses.GetGymDetailsResponse.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Networking.Responses.GetGymDetailsResponseRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Responses.GetGymDetailsResponse {
      return try Pogoprotos.Networking.Responses.GetGymDetailsResponse.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Responses.GetGymDetailsResponse {
      return try Pogoprotos.Networking.Responses.GetGymDetailsResponse.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Responses.GetGymDetailsResponse {
      return try Pogoprotos.Networking.Responses.GetGymDetailsResponse.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Responses.GetGymDetailsResponse {
      return try Pogoprotos.Networking.Responses.GetGymDetailsResponse.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Responses.GetGymDetailsResponse {
      return try Pogoprotos.Networking.Responses.GetGymDetailsResponse.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Networking.Responses.GetGymDetailsResponse.Builder {
      return Pogoprotos.Networking.Responses.GetGymDetailsResponse.classBuilder() as! Pogoprotos.Networking.Responses.GetGymDetailsResponse.Builder
    }
    public func getBuilder() -> Pogoprotos.Networking.Responses.GetGymDetailsResponse.Builder {
      return classBuilder() as! Pogoprotos.Networking.Responses.GetGymDetailsResponse.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Networking.Responses.GetGymDetailsResponse.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Networking.Responses.GetGymDetailsResponse.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Networking.Responses.GetGymDetailsResponse.Builder {
      return try Pogoprotos.Networking.Responses.GetGymDetailsResponse.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Networking.Responses.GetGymDetailsResponse) throws -> Pogoprotos.Networking.Responses.GetGymDetailsResponse.Builder {
      return try Pogoprotos.Networking.Responses.GetGymDetailsResponse.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasGymState {
        jsonMap["gymState"] = try gymState.encode()
      }
      if hasName {
        jsonMap["name"] = name
      }
      if !urls.isEmpty {
        jsonMap["urls"] = urls
      }
      if hasResult {
        jsonMap["result"] = result.toString()
      }
      if hasDescription {
        jsonMap["description"] = description_
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Responses.GetGymDetailsResponse {
      return try Pogoprotos.Networking.Responses.GetGymDetailsResponse.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Networking.Responses.GetGymDetailsResponse {
      return try Pogoprotos.Networking.Responses.GetGymDetailsResponse.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasGymState {
        output += "\(indent) gymState {\n"
        if let outDescGymState = gymState {
          output += try outDescGymState.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasName {
        output += "\(indent) name: \(name) \n"
      }
      var urlsElementIndex:Int = 0
      for oneValueUrls in urls  {
          output += "\(indent) urls[\(urlsElementIndex)]: \(oneValueUrls)\n"
          urlsElementIndex += 1
      }
      if (hasResult) {
        output += "\(indent) result: \(result.description)\n"
      }
      if hasDescription {
        output += "\(indent) description_: \(description_) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasGymState {
                if let hashValuegymState = gymState?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuegymState
                }
            }
            if hasName {
               hashCode = (hashCode &* 31) &+ name.hashValue
            }
            for oneValueUrls in urls {
                hashCode = (hashCode &* 31) &+ oneValueUrls.hashValue
            }
            if hasResult {
               hashCode = (hashCode &* 31) &+ Int(result.rawValue)
            }
            if hasDescription {
               hashCode = (hashCode &* 31) &+ description_.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Networking.Responses.GetGymDetailsResponse"
    }
    override public func className() -> String {
        return "Pogoprotos.Networking.Responses.GetGymDetailsResponse"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Networking.Responses.GetGymDetailsResponse.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Networking.Responses.GetGymDetailsResponse = Pogoprotos.Networking.Responses.GetGymDetailsResponse()
      public func getMessage() -> Pogoprotos.Networking.Responses.GetGymDetailsResponse {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasGymState:Bool {
           get {
               return builderResult.hasGymState
           }
      }
      public var gymState:Pogoprotos.Data.Gym.GymState! {
           get {
               if gymStateBuilder_ != nil {
                  builderResult.gymState = gymStateBuilder_.getMessage()
               }
               return builderResult.gymState
           }
           set (value) {
               builderResult.hasGymState = true
               builderResult.gymState = value
           }
      }
      private var gymStateBuilder_:Pogoprotos.Data.Gym.GymState.Builder! {
           didSet {
              builderResult.hasGymState = true
           }
      }
      public func getGymStateBuilder() -> Pogoprotos.Data.Gym.GymState.Builder {
        if gymStateBuilder_ == nil {
           gymStateBuilder_ = Pogoprotos.Data.Gym.GymState.Builder()
           builderResult.gymState = gymStateBuilder_.getMessage()
           if gymState != nil {
              try! gymStateBuilder_.mergeFrom(gymState)
           }
        }
        return gymStateBuilder_
      }
      public func setGymState(value:Pogoprotos.Data.Gym.GymState!) -> Pogoprotos.Networking.Responses.GetGymDetailsResponse.Builder {
        self.gymState = value
        return self
      }
      public func mergeGymState(value:Pogoprotos.Data.Gym.GymState) throws -> Pogoprotos.Networking.Responses.GetGymDetailsResponse.Builder {
        if builderResult.hasGymState {
          builderResult.gymState = try Pogoprotos.Data.Gym.GymState.builderWithPrototype(builderResult.gymState).mergeFrom(value).buildPartial()
        } else {
          builderResult.gymState = value
        }
        builderResult.hasGymState = true
        return self
      }
      public func clearGymState() -> Pogoprotos.Networking.Responses.GetGymDetailsResponse.Builder {
        gymStateBuilder_ = nil
        builderResult.hasGymState = false
        builderResult.gymState = nil
        return self
      }
      public var hasName:Bool {
           get {
                return builderResult.hasName
           }
      }
      public var name:String {
           get {
                return builderResult.name
           }
           set (value) {
               builderResult.hasName = true
               builderResult.name = value
           }
      }
      public func setName(value:String) -> Pogoprotos.Networking.Responses.GetGymDetailsResponse.Builder {
        self.name = value
        return self
      }
      public func clearName() -> Pogoprotos.Networking.Responses.GetGymDetailsResponse.Builder{
           builderResult.hasName = false
           builderResult.name = ""
           return self
      }
      public var urls:Array<String> {
           get {
               return builderResult.urls
           }
           set (array) {
               builderResult.urls = array
           }
      }
      public func setUrls(value:Array<String>) -> Pogoprotos.Networking.Responses.GetGymDetailsResponse.Builder {
        self.urls = value
        return self
      }
      public func clearUrls() -> Pogoprotos.Networking.Responses.GetGymDetailsResponse.Builder {
         builderResult.urls.removeAll(keepCapacity: false)
         return self
      }
        public var hasResult:Bool{
            get {
                return builderResult.hasResult
            }
        }
        public var result:Pogoprotos.Networking.Responses.GetGymDetailsResponse.Result {
            get {
                return builderResult.result
            }
            set (value) {
                builderResult.hasResult = true
                builderResult.result = value
            }
        }
        public func setResult(value:Pogoprotos.Networking.Responses.GetGymDetailsResponse.Result) -> Pogoprotos.Networking.Responses.GetGymDetailsResponse.Builder {
          self.result = value
          return self
        }
        public func clearResult() -> Pogoprotos.Networking.Responses.GetGymDetailsResponse.Builder {
           builderResult.hasResult = false
           builderResult.result = .Unset
           return self
        }
      public var hasDescription:Bool {
           get {
                return builderResult.hasDescription
           }
      }
      public var description_:String {
           get {
                return builderResult.description_
           }
           set (value) {
               builderResult.hasDescription = true
               builderResult.description_ = value
           }
      }
      public func setDescription(value:String) -> Pogoprotos.Networking.Responses.GetGymDetailsResponse.Builder {
        self.description_ = value
        return self
      }
      public func clearDescription() -> Pogoprotos.Networking.Responses.GetGymDetailsResponse.Builder{
           builderResult.hasDescription = false
           builderResult.description_ = ""
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Networking.Responses.GetGymDetailsResponse.Builder {
        builderResult = Pogoprotos.Networking.Responses.GetGymDetailsResponse()
        return self
      }
      override public func clone() throws -> Pogoprotos.Networking.Responses.GetGymDetailsResponse.Builder {
        return try Pogoprotos.Networking.Responses.GetGymDetailsResponse.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Networking.Responses.GetGymDetailsResponse {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Networking.Responses.GetGymDetailsResponse {
        let returnMe:Pogoprotos.Networking.Responses.GetGymDetailsResponse = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Networking.Responses.GetGymDetailsResponse) throws -> Pogoprotos.Networking.Responses.GetGymDetailsResponse.Builder {
        if other == Pogoprotos.Networking.Responses.GetGymDetailsResponse() {
         return self
        }
        if (other.hasGymState) {
            try mergeGymState(other.gymState)
        }
        if other.hasName {
             name = other.name
        }
        if !other.urls.isEmpty {
            builderResult.urls += other.urls
        }
        if other.hasResult {
             result = other.result
        }
        if other.hasDescription {
             description_ = other.description_
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Responses.GetGymDetailsResponse.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Responses.GetGymDetailsResponse.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10:
            let subBuilder:Pogoprotos.Data.Gym.GymState.Builder = Pogoprotos.Data.Gym.GymState.Builder()
            if hasGymState {
              try subBuilder.mergeFrom(gymState)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            gymState = subBuilder.buildPartial()

          case 18:
            name = try input.readString()

          case 26:
            urls += [try input.readString()]

          case 32:
            let valueIntresult = try input.readEnum()
            if let enumsresult = Pogoprotos.Networking.Responses.GetGymDetailsResponse.Result(rawValue:valueIntresult){
                 result = enumsresult
            } else {
                 try unknownFieldsBuilder.mergeVarintField(4, value:Int64(valueIntresult))
            }

          case 42:
            description_ = try input.readString()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Responses.GetGymDetailsResponse.Builder {
        let resultDecodedBuilder = Pogoprotos.Networking.Responses.GetGymDetailsResponse.Builder()
        if let jsonValueGymState = jsonMap["gymState"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.gymState = try Pogoprotos.Data.Gym.GymState.Builder.decodeToBuilder(jsonValueGymState).build()

        }
        if let jsonValueName = jsonMap["name"] as? String {
          resultDecodedBuilder.name = jsonValueName
        }
        if let jsonValueUrls = jsonMap["urls"] as? Array<String> {
          resultDecodedBuilder.urls = jsonValueUrls
        }
        if let jsonValueResult = jsonMap["result"] as? String {
          resultDecodedBuilder.result = try Pogoprotos.Networking.Responses.GetGymDetailsResponse.Result.fromString(jsonValueResult)
        }
        if let jsonValueDescription = jsonMap["description"] as? String {
          resultDecodedBuilder.description_ = jsonValueDescription
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Networking.Responses.GetGymDetailsResponse.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Networking.Responses.GetGymDetailsResponse.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
