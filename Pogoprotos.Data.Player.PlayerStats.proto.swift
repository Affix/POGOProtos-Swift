// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "PlayerStats.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Pogoprotos { public struct Data { public struct Player { }}}

public func == (lhs: Pogoprotos.Data.Player.PlayerStats, rhs: Pogoprotos.Data.Player.PlayerStats) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasLevel == rhs.hasLevel) && (!lhs.hasLevel || lhs.level == rhs.level)
  fieldCheck = fieldCheck && (lhs.hasExperience == rhs.hasExperience) && (!lhs.hasExperience || lhs.experience == rhs.experience)
  fieldCheck = fieldCheck && (lhs.hasPrevLevelXp == rhs.hasPrevLevelXp) && (!lhs.hasPrevLevelXp || lhs.prevLevelXp == rhs.prevLevelXp)
  fieldCheck = fieldCheck && (lhs.hasNextLevelXp == rhs.hasNextLevelXp) && (!lhs.hasNextLevelXp || lhs.nextLevelXp == rhs.nextLevelXp)
  fieldCheck = fieldCheck && (lhs.hasKmWalked == rhs.hasKmWalked) && (!lhs.hasKmWalked || lhs.kmWalked == rhs.kmWalked)
  fieldCheck = fieldCheck && (lhs.hasPokemonsEncountered == rhs.hasPokemonsEncountered) && (!lhs.hasPokemonsEncountered || lhs.pokemonsEncountered == rhs.pokemonsEncountered)
  fieldCheck = fieldCheck && (lhs.hasUniquePokedexEntries == rhs.hasUniquePokedexEntries) && (!lhs.hasUniquePokedexEntries || lhs.uniquePokedexEntries == rhs.uniquePokedexEntries)
  fieldCheck = fieldCheck && (lhs.hasPokemonsCaptured == rhs.hasPokemonsCaptured) && (!lhs.hasPokemonsCaptured || lhs.pokemonsCaptured == rhs.pokemonsCaptured)
  fieldCheck = fieldCheck && (lhs.hasEvolutions == rhs.hasEvolutions) && (!lhs.hasEvolutions || lhs.evolutions == rhs.evolutions)
  fieldCheck = fieldCheck && (lhs.hasPokeStopVisits == rhs.hasPokeStopVisits) && (!lhs.hasPokeStopVisits || lhs.pokeStopVisits == rhs.pokeStopVisits)
  fieldCheck = fieldCheck && (lhs.hasPokeballsThrown == rhs.hasPokeballsThrown) && (!lhs.hasPokeballsThrown || lhs.pokeballsThrown == rhs.pokeballsThrown)
  fieldCheck = fieldCheck && (lhs.hasEggsHatched == rhs.hasEggsHatched) && (!lhs.hasEggsHatched || lhs.eggsHatched == rhs.eggsHatched)
  fieldCheck = fieldCheck && (lhs.hasBigMagikarpCaught == rhs.hasBigMagikarpCaught) && (!lhs.hasBigMagikarpCaught || lhs.bigMagikarpCaught == rhs.bigMagikarpCaught)
  fieldCheck = fieldCheck && (lhs.hasBattleAttackWon == rhs.hasBattleAttackWon) && (!lhs.hasBattleAttackWon || lhs.battleAttackWon == rhs.battleAttackWon)
  fieldCheck = fieldCheck && (lhs.hasBattleAttackTotal == rhs.hasBattleAttackTotal) && (!lhs.hasBattleAttackTotal || lhs.battleAttackTotal == rhs.battleAttackTotal)
  fieldCheck = fieldCheck && (lhs.hasBattleDefendedWon == rhs.hasBattleDefendedWon) && (!lhs.hasBattleDefendedWon || lhs.battleDefendedWon == rhs.battleDefendedWon)
  fieldCheck = fieldCheck && (lhs.hasBattleTrainingWon == rhs.hasBattleTrainingWon) && (!lhs.hasBattleTrainingWon || lhs.battleTrainingWon == rhs.battleTrainingWon)
  fieldCheck = fieldCheck && (lhs.hasBattleTrainingTotal == rhs.hasBattleTrainingTotal) && (!lhs.hasBattleTrainingTotal || lhs.battleTrainingTotal == rhs.battleTrainingTotal)
  fieldCheck = fieldCheck && (lhs.hasPrestigeRaisedTotal == rhs.hasPrestigeRaisedTotal) && (!lhs.hasPrestigeRaisedTotal || lhs.prestigeRaisedTotal == rhs.prestigeRaisedTotal)
  fieldCheck = fieldCheck && (lhs.hasPrestigeDroppedTotal == rhs.hasPrestigeDroppedTotal) && (!lhs.hasPrestigeDroppedTotal || lhs.prestigeDroppedTotal == rhs.prestigeDroppedTotal)
  fieldCheck = fieldCheck && (lhs.hasPokemonDeployed == rhs.hasPokemonDeployed) && (!lhs.hasPokemonDeployed || lhs.pokemonDeployed == rhs.pokemonDeployed)
  fieldCheck = fieldCheck && (lhs.hasPokemonCaughtByType == rhs.hasPokemonCaughtByType) && (!lhs.hasPokemonCaughtByType || lhs.pokemonCaughtByType == rhs.pokemonCaughtByType)
  fieldCheck = fieldCheck && (lhs.hasSmallRattataCaught == rhs.hasSmallRattataCaught) && (!lhs.hasSmallRattataCaught || lhs.smallRattataCaught == rhs.smallRattataCaught)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Pogoprotos.Data.Player {
  public struct PlayerStatsRoot {
    public static var sharedInstance : PlayerStatsRoot {
     struct Static {
         static let instance : PlayerStatsRoot = PlayerStatsRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class PlayerStats : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasLevel:Bool = false
    public private(set) var level:Int32 = Int32(0)

    public private(set) var hasExperience:Bool = false
    public private(set) var experience:Int64 = Int64(0)

    public private(set) var hasPrevLevelXp:Bool = false
    public private(set) var prevLevelXp:Int64 = Int64(0)

    public private(set) var hasNextLevelXp:Bool = false
    public private(set) var nextLevelXp:Int64 = Int64(0)

    public private(set) var hasKmWalked:Bool = false
    public private(set) var kmWalked:Float = Float(0)

    public private(set) var hasPokemonsEncountered:Bool = false
    public private(set) var pokemonsEncountered:Int32 = Int32(0)

    public private(set) var hasUniquePokedexEntries:Bool = false
    public private(set) var uniquePokedexEntries:Int32 = Int32(0)

    public private(set) var hasPokemonsCaptured:Bool = false
    public private(set) var pokemonsCaptured:Int32 = Int32(0)

    public private(set) var hasEvolutions:Bool = false
    public private(set) var evolutions:Int32 = Int32(0)

    public private(set) var hasPokeStopVisits:Bool = false
    public private(set) var pokeStopVisits:Int32 = Int32(0)

    public private(set) var hasPokeballsThrown:Bool = false
    public private(set) var pokeballsThrown:Int32 = Int32(0)

    public private(set) var hasEggsHatched:Bool = false
    public private(set) var eggsHatched:Int32 = Int32(0)

    public private(set) var hasBigMagikarpCaught:Bool = false
    public private(set) var bigMagikarpCaught:Int32 = Int32(0)

    public private(set) var hasBattleAttackWon:Bool = false
    public private(set) var battleAttackWon:Int32 = Int32(0)

    public private(set) var hasBattleAttackTotal:Bool = false
    public private(set) var battleAttackTotal:Int32 = Int32(0)

    public private(set) var hasBattleDefendedWon:Bool = false
    public private(set) var battleDefendedWon:Int32 = Int32(0)

    public private(set) var hasBattleTrainingWon:Bool = false
    public private(set) var battleTrainingWon:Int32 = Int32(0)

    public private(set) var hasBattleTrainingTotal:Bool = false
    public private(set) var battleTrainingTotal:Int32 = Int32(0)

    public private(set) var hasPrestigeRaisedTotal:Bool = false
    public private(set) var prestigeRaisedTotal:Int32 = Int32(0)

    public private(set) var hasPrestigeDroppedTotal:Bool = false
    public private(set) var prestigeDroppedTotal:Int32 = Int32(0)

    public private(set) var hasPokemonDeployed:Bool = false
    public private(set) var pokemonDeployed:Int32 = Int32(0)

    // TODO: repeated PokemonType ??
    public private(set) var hasPokemonCaughtByType:Bool = false
    public private(set) var pokemonCaughtByType:NSData = NSData()

    public private(set) var hasSmallRattataCaught:Bool = false
    public private(set) var smallRattataCaught:Int32 = Int32(0)

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasLevel {
        try output.writeInt32(1, value:level)
      }
      if hasExperience {
        try output.writeInt64(2, value:experience)
      }
      if hasPrevLevelXp {
        try output.writeInt64(3, value:prevLevelXp)
      }
      if hasNextLevelXp {
        try output.writeInt64(4, value:nextLevelXp)
      }
      if hasKmWalked {
        try output.writeFloat(5, value:kmWalked)
      }
      if hasPokemonsEncountered {
        try output.writeInt32(6, value:pokemonsEncountered)
      }
      if hasUniquePokedexEntries {
        try output.writeInt32(7, value:uniquePokedexEntries)
      }
      if hasPokemonsCaptured {
        try output.writeInt32(8, value:pokemonsCaptured)
      }
      if hasEvolutions {
        try output.writeInt32(9, value:evolutions)
      }
      if hasPokeStopVisits {
        try output.writeInt32(10, value:pokeStopVisits)
      }
      if hasPokeballsThrown {
        try output.writeInt32(11, value:pokeballsThrown)
      }
      if hasEggsHatched {
        try output.writeInt32(12, value:eggsHatched)
      }
      if hasBigMagikarpCaught {
        try output.writeInt32(13, value:bigMagikarpCaught)
      }
      if hasBattleAttackWon {
        try output.writeInt32(14, value:battleAttackWon)
      }
      if hasBattleAttackTotal {
        try output.writeInt32(15, value:battleAttackTotal)
      }
      if hasBattleDefendedWon {
        try output.writeInt32(16, value:battleDefendedWon)
      }
      if hasBattleTrainingWon {
        try output.writeInt32(17, value:battleTrainingWon)
      }
      if hasBattleTrainingTotal {
        try output.writeInt32(18, value:battleTrainingTotal)
      }
      if hasPrestigeRaisedTotal {
        try output.writeInt32(19, value:prestigeRaisedTotal)
      }
      if hasPrestigeDroppedTotal {
        try output.writeInt32(20, value:prestigeDroppedTotal)
      }
      if hasPokemonDeployed {
        try output.writeInt32(21, value:pokemonDeployed)
      }
      if hasPokemonCaughtByType {
        try output.writeData(22, value:pokemonCaughtByType)
      }
      if hasSmallRattataCaught {
        try output.writeInt32(23, value:smallRattataCaught)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasLevel {
        serialize_size += level.computeInt32Size(1)
      }
      if hasExperience {
        serialize_size += experience.computeInt64Size(2)
      }
      if hasPrevLevelXp {
        serialize_size += prevLevelXp.computeInt64Size(3)
      }
      if hasNextLevelXp {
        serialize_size += nextLevelXp.computeInt64Size(4)
      }
      if hasKmWalked {
        serialize_size += kmWalked.computeFloatSize(5)
      }
      if hasPokemonsEncountered {
        serialize_size += pokemonsEncountered.computeInt32Size(6)
      }
      if hasUniquePokedexEntries {
        serialize_size += uniquePokedexEntries.computeInt32Size(7)
      }
      if hasPokemonsCaptured {
        serialize_size += pokemonsCaptured.computeInt32Size(8)
      }
      if hasEvolutions {
        serialize_size += evolutions.computeInt32Size(9)
      }
      if hasPokeStopVisits {
        serialize_size += pokeStopVisits.computeInt32Size(10)
      }
      if hasPokeballsThrown {
        serialize_size += pokeballsThrown.computeInt32Size(11)
      }
      if hasEggsHatched {
        serialize_size += eggsHatched.computeInt32Size(12)
      }
      if hasBigMagikarpCaught {
        serialize_size += bigMagikarpCaught.computeInt32Size(13)
      }
      if hasBattleAttackWon {
        serialize_size += battleAttackWon.computeInt32Size(14)
      }
      if hasBattleAttackTotal {
        serialize_size += battleAttackTotal.computeInt32Size(15)
      }
      if hasBattleDefendedWon {
        serialize_size += battleDefendedWon.computeInt32Size(16)
      }
      if hasBattleTrainingWon {
        serialize_size += battleTrainingWon.computeInt32Size(17)
      }
      if hasBattleTrainingTotal {
        serialize_size += battleTrainingTotal.computeInt32Size(18)
      }
      if hasPrestigeRaisedTotal {
        serialize_size += prestigeRaisedTotal.computeInt32Size(19)
      }
      if hasPrestigeDroppedTotal {
        serialize_size += prestigeDroppedTotal.computeInt32Size(20)
      }
      if hasPokemonDeployed {
        serialize_size += pokemonDeployed.computeInt32Size(21)
      }
      if hasPokemonCaughtByType {
        serialize_size += pokemonCaughtByType.computeDataSize(22)
      }
      if hasSmallRattataCaught {
        serialize_size += smallRattataCaught.computeInt32Size(23)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Data.Player.PlayerStats> {
      var mergedArray = Array<Pogoprotos.Data.Player.PlayerStats>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Data.Player.PlayerStats? {
      return try Pogoprotos.Data.Player.PlayerStats.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Data.Player.PlayerStats {
      return try Pogoprotos.Data.Player.PlayerStats.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Data.Player.PlayerStatsRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.Player.PlayerStats {
      return try Pogoprotos.Data.Player.PlayerStats.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Data.Player.PlayerStats {
      return try Pogoprotos.Data.Player.PlayerStats.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.Player.PlayerStats {
      return try Pogoprotos.Data.Player.PlayerStats.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Data.Player.PlayerStats {
      return try Pogoprotos.Data.Player.PlayerStats.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.Player.PlayerStats {
      return try Pogoprotos.Data.Player.PlayerStats.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Data.Player.PlayerStats.Builder {
      return Pogoprotos.Data.Player.PlayerStats.classBuilder() as! Pogoprotos.Data.Player.PlayerStats.Builder
    }
    public func getBuilder() -> Pogoprotos.Data.Player.PlayerStats.Builder {
      return classBuilder() as! Pogoprotos.Data.Player.PlayerStats.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Data.Player.PlayerStats.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Data.Player.PlayerStats.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Data.Player.PlayerStats.Builder {
      return try Pogoprotos.Data.Player.PlayerStats.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Data.Player.PlayerStats) throws -> Pogoprotos.Data.Player.PlayerStats.Builder {
      return try Pogoprotos.Data.Player.PlayerStats.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasLevel {
        jsonMap["level"] = NSNumber(int:level)
      }
      if hasExperience {
        jsonMap["experience"] = "\(experience)"
      }
      if hasPrevLevelXp {
        jsonMap["prevLevelXp"] = "\(prevLevelXp)"
      }
      if hasNextLevelXp {
        jsonMap["nextLevelXp"] = "\(nextLevelXp)"
      }
      if hasKmWalked {
        jsonMap["kmWalked"] = NSNumber(float:kmWalked)
      }
      if hasPokemonsEncountered {
        jsonMap["pokemonsEncountered"] = NSNumber(int:pokemonsEncountered)
      }
      if hasUniquePokedexEntries {
        jsonMap["uniquePokedexEntries"] = NSNumber(int:uniquePokedexEntries)
      }
      if hasPokemonsCaptured {
        jsonMap["pokemonsCaptured"] = NSNumber(int:pokemonsCaptured)
      }
      if hasEvolutions {
        jsonMap["evolutions"] = NSNumber(int:evolutions)
      }
      if hasPokeStopVisits {
        jsonMap["pokeStopVisits"] = NSNumber(int:pokeStopVisits)
      }
      if hasPokeballsThrown {
        jsonMap["pokeballsThrown"] = NSNumber(int:pokeballsThrown)
      }
      if hasEggsHatched {
        jsonMap["eggsHatched"] = NSNumber(int:eggsHatched)
      }
      if hasBigMagikarpCaught {
        jsonMap["bigMagikarpCaught"] = NSNumber(int:bigMagikarpCaught)
      }
      if hasBattleAttackWon {
        jsonMap["battleAttackWon"] = NSNumber(int:battleAttackWon)
      }
      if hasBattleAttackTotal {
        jsonMap["battleAttackTotal"] = NSNumber(int:battleAttackTotal)
      }
      if hasBattleDefendedWon {
        jsonMap["battleDefendedWon"] = NSNumber(int:battleDefendedWon)
      }
      if hasBattleTrainingWon {
        jsonMap["battleTrainingWon"] = NSNumber(int:battleTrainingWon)
      }
      if hasBattleTrainingTotal {
        jsonMap["battleTrainingTotal"] = NSNumber(int:battleTrainingTotal)
      }
      if hasPrestigeRaisedTotal {
        jsonMap["prestigeRaisedTotal"] = NSNumber(int:prestigeRaisedTotal)
      }
      if hasPrestigeDroppedTotal {
        jsonMap["prestigeDroppedTotal"] = NSNumber(int:prestigeDroppedTotal)
      }
      if hasPokemonDeployed {
        jsonMap["pokemonDeployed"] = NSNumber(int:pokemonDeployed)
      }
      if hasPokemonCaughtByType {
        jsonMap["pokemonCaughtByType"] = pokemonCaughtByType.base64EncodedStringWithOptions(NSDataBase64EncodingOptions(rawValue: 0))
      }
      if hasSmallRattataCaught {
        jsonMap["smallRattataCaught"] = NSNumber(int:smallRattataCaught)
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Data.Player.PlayerStats {
      return try Pogoprotos.Data.Player.PlayerStats.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Data.Player.PlayerStats {
      return try Pogoprotos.Data.Player.PlayerStats.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasLevel {
        output += "\(indent) level: \(level) \n"
      }
      if hasExperience {
        output += "\(indent) experience: \(experience) \n"
      }
      if hasPrevLevelXp {
        output += "\(indent) prevLevelXp: \(prevLevelXp) \n"
      }
      if hasNextLevelXp {
        output += "\(indent) nextLevelXp: \(nextLevelXp) \n"
      }
      if hasKmWalked {
        output += "\(indent) kmWalked: \(kmWalked) \n"
      }
      if hasPokemonsEncountered {
        output += "\(indent) pokemonsEncountered: \(pokemonsEncountered) \n"
      }
      if hasUniquePokedexEntries {
        output += "\(indent) uniquePokedexEntries: \(uniquePokedexEntries) \n"
      }
      if hasPokemonsCaptured {
        output += "\(indent) pokemonsCaptured: \(pokemonsCaptured) \n"
      }
      if hasEvolutions {
        output += "\(indent) evolutions: \(evolutions) \n"
      }
      if hasPokeStopVisits {
        output += "\(indent) pokeStopVisits: \(pokeStopVisits) \n"
      }
      if hasPokeballsThrown {
        output += "\(indent) pokeballsThrown: \(pokeballsThrown) \n"
      }
      if hasEggsHatched {
        output += "\(indent) eggsHatched: \(eggsHatched) \n"
      }
      if hasBigMagikarpCaught {
        output += "\(indent) bigMagikarpCaught: \(bigMagikarpCaught) \n"
      }
      if hasBattleAttackWon {
        output += "\(indent) battleAttackWon: \(battleAttackWon) \n"
      }
      if hasBattleAttackTotal {
        output += "\(indent) battleAttackTotal: \(battleAttackTotal) \n"
      }
      if hasBattleDefendedWon {
        output += "\(indent) battleDefendedWon: \(battleDefendedWon) \n"
      }
      if hasBattleTrainingWon {
        output += "\(indent) battleTrainingWon: \(battleTrainingWon) \n"
      }
      if hasBattleTrainingTotal {
        output += "\(indent) battleTrainingTotal: \(battleTrainingTotal) \n"
      }
      if hasPrestigeRaisedTotal {
        output += "\(indent) prestigeRaisedTotal: \(prestigeRaisedTotal) \n"
      }
      if hasPrestigeDroppedTotal {
        output += "\(indent) prestigeDroppedTotal: \(prestigeDroppedTotal) \n"
      }
      if hasPokemonDeployed {
        output += "\(indent) pokemonDeployed: \(pokemonDeployed) \n"
      }
      if hasPokemonCaughtByType {
        output += "\(indent) pokemonCaughtByType: \(pokemonCaughtByType) \n"
      }
      if hasSmallRattataCaught {
        output += "\(indent) smallRattataCaught: \(smallRattataCaught) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasLevel {
               hashCode = (hashCode &* 31) &+ level.hashValue
            }
            if hasExperience {
               hashCode = (hashCode &* 31) &+ experience.hashValue
            }
            if hasPrevLevelXp {
               hashCode = (hashCode &* 31) &+ prevLevelXp.hashValue
            }
            if hasNextLevelXp {
               hashCode = (hashCode &* 31) &+ nextLevelXp.hashValue
            }
            if hasKmWalked {
               hashCode = (hashCode &* 31) &+ kmWalked.hashValue
            }
            if hasPokemonsEncountered {
               hashCode = (hashCode &* 31) &+ pokemonsEncountered.hashValue
            }
            if hasUniquePokedexEntries {
               hashCode = (hashCode &* 31) &+ uniquePokedexEntries.hashValue
            }
            if hasPokemonsCaptured {
               hashCode = (hashCode &* 31) &+ pokemonsCaptured.hashValue
            }
            if hasEvolutions {
               hashCode = (hashCode &* 31) &+ evolutions.hashValue
            }
            if hasPokeStopVisits {
               hashCode = (hashCode &* 31) &+ pokeStopVisits.hashValue
            }
            if hasPokeballsThrown {
               hashCode = (hashCode &* 31) &+ pokeballsThrown.hashValue
            }
            if hasEggsHatched {
               hashCode = (hashCode &* 31) &+ eggsHatched.hashValue
            }
            if hasBigMagikarpCaught {
               hashCode = (hashCode &* 31) &+ bigMagikarpCaught.hashValue
            }
            if hasBattleAttackWon {
               hashCode = (hashCode &* 31) &+ battleAttackWon.hashValue
            }
            if hasBattleAttackTotal {
               hashCode = (hashCode &* 31) &+ battleAttackTotal.hashValue
            }
            if hasBattleDefendedWon {
               hashCode = (hashCode &* 31) &+ battleDefendedWon.hashValue
            }
            if hasBattleTrainingWon {
               hashCode = (hashCode &* 31) &+ battleTrainingWon.hashValue
            }
            if hasBattleTrainingTotal {
               hashCode = (hashCode &* 31) &+ battleTrainingTotal.hashValue
            }
            if hasPrestigeRaisedTotal {
               hashCode = (hashCode &* 31) &+ prestigeRaisedTotal.hashValue
            }
            if hasPrestigeDroppedTotal {
               hashCode = (hashCode &* 31) &+ prestigeDroppedTotal.hashValue
            }
            if hasPokemonDeployed {
               hashCode = (hashCode &* 31) &+ pokemonDeployed.hashValue
            }
            if hasPokemonCaughtByType {
               hashCode = (hashCode &* 31) &+ pokemonCaughtByType.hashValue
            }
            if hasSmallRattataCaught {
               hashCode = (hashCode &* 31) &+ smallRattataCaught.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Data.Player.PlayerStats"
    }
    override public func className() -> String {
        return "Pogoprotos.Data.Player.PlayerStats"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Data.Player.PlayerStats.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Data.Player.PlayerStats = Pogoprotos.Data.Player.PlayerStats()
      public func getMessage() -> Pogoprotos.Data.Player.PlayerStats {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasLevel:Bool {
           get {
                return builderResult.hasLevel
           }
      }
      public var level:Int32 {
           get {
                return builderResult.level
           }
           set (value) {
               builderResult.hasLevel = true
               builderResult.level = value
           }
      }
      public func setLevel(value:Int32) -> Pogoprotos.Data.Player.PlayerStats.Builder {
        self.level = value
        return self
      }
      public func clearLevel() -> Pogoprotos.Data.Player.PlayerStats.Builder{
           builderResult.hasLevel = false
           builderResult.level = Int32(0)
           return self
      }
      public var hasExperience:Bool {
           get {
                return builderResult.hasExperience
           }
      }
      public var experience:Int64 {
           get {
                return builderResult.experience
           }
           set (value) {
               builderResult.hasExperience = true
               builderResult.experience = value
           }
      }
      public func setExperience(value:Int64) -> Pogoprotos.Data.Player.PlayerStats.Builder {
        self.experience = value
        return self
      }
      public func clearExperience() -> Pogoprotos.Data.Player.PlayerStats.Builder{
           builderResult.hasExperience = false
           builderResult.experience = Int64(0)
           return self
      }
      public var hasPrevLevelXp:Bool {
           get {
                return builderResult.hasPrevLevelXp
           }
      }
      public var prevLevelXp:Int64 {
           get {
                return builderResult.prevLevelXp
           }
           set (value) {
               builderResult.hasPrevLevelXp = true
               builderResult.prevLevelXp = value
           }
      }
      public func setPrevLevelXp(value:Int64) -> Pogoprotos.Data.Player.PlayerStats.Builder {
        self.prevLevelXp = value
        return self
      }
      public func clearPrevLevelXp() -> Pogoprotos.Data.Player.PlayerStats.Builder{
           builderResult.hasPrevLevelXp = false
           builderResult.prevLevelXp = Int64(0)
           return self
      }
      public var hasNextLevelXp:Bool {
           get {
                return builderResult.hasNextLevelXp
           }
      }
      public var nextLevelXp:Int64 {
           get {
                return builderResult.nextLevelXp
           }
           set (value) {
               builderResult.hasNextLevelXp = true
               builderResult.nextLevelXp = value
           }
      }
      public func setNextLevelXp(value:Int64) -> Pogoprotos.Data.Player.PlayerStats.Builder {
        self.nextLevelXp = value
        return self
      }
      public func clearNextLevelXp() -> Pogoprotos.Data.Player.PlayerStats.Builder{
           builderResult.hasNextLevelXp = false
           builderResult.nextLevelXp = Int64(0)
           return self
      }
      public var hasKmWalked:Bool {
           get {
                return builderResult.hasKmWalked
           }
      }
      public var kmWalked:Float {
           get {
                return builderResult.kmWalked
           }
           set (value) {
               builderResult.hasKmWalked = true
               builderResult.kmWalked = value
           }
      }
      public func setKmWalked(value:Float) -> Pogoprotos.Data.Player.PlayerStats.Builder {
        self.kmWalked = value
        return self
      }
      public func clearKmWalked() -> Pogoprotos.Data.Player.PlayerStats.Builder{
           builderResult.hasKmWalked = false
           builderResult.kmWalked = Float(0)
           return self
      }
      public var hasPokemonsEncountered:Bool {
           get {
                return builderResult.hasPokemonsEncountered
           }
      }
      public var pokemonsEncountered:Int32 {
           get {
                return builderResult.pokemonsEncountered
           }
           set (value) {
               builderResult.hasPokemonsEncountered = true
               builderResult.pokemonsEncountered = value
           }
      }
      public func setPokemonsEncountered(value:Int32) -> Pogoprotos.Data.Player.PlayerStats.Builder {
        self.pokemonsEncountered = value
        return self
      }
      public func clearPokemonsEncountered() -> Pogoprotos.Data.Player.PlayerStats.Builder{
           builderResult.hasPokemonsEncountered = false
           builderResult.pokemonsEncountered = Int32(0)
           return self
      }
      public var hasUniquePokedexEntries:Bool {
           get {
                return builderResult.hasUniquePokedexEntries
           }
      }
      public var uniquePokedexEntries:Int32 {
           get {
                return builderResult.uniquePokedexEntries
           }
           set (value) {
               builderResult.hasUniquePokedexEntries = true
               builderResult.uniquePokedexEntries = value
           }
      }
      public func setUniquePokedexEntries(value:Int32) -> Pogoprotos.Data.Player.PlayerStats.Builder {
        self.uniquePokedexEntries = value
        return self
      }
      public func clearUniquePokedexEntries() -> Pogoprotos.Data.Player.PlayerStats.Builder{
           builderResult.hasUniquePokedexEntries = false
           builderResult.uniquePokedexEntries = Int32(0)
           return self
      }
      public var hasPokemonsCaptured:Bool {
           get {
                return builderResult.hasPokemonsCaptured
           }
      }
      public var pokemonsCaptured:Int32 {
           get {
                return builderResult.pokemonsCaptured
           }
           set (value) {
               builderResult.hasPokemonsCaptured = true
               builderResult.pokemonsCaptured = value
           }
      }
      public func setPokemonsCaptured(value:Int32) -> Pogoprotos.Data.Player.PlayerStats.Builder {
        self.pokemonsCaptured = value
        return self
      }
      public func clearPokemonsCaptured() -> Pogoprotos.Data.Player.PlayerStats.Builder{
           builderResult.hasPokemonsCaptured = false
           builderResult.pokemonsCaptured = Int32(0)
           return self
      }
      public var hasEvolutions:Bool {
           get {
                return builderResult.hasEvolutions
           }
      }
      public var evolutions:Int32 {
           get {
                return builderResult.evolutions
           }
           set (value) {
               builderResult.hasEvolutions = true
               builderResult.evolutions = value
           }
      }
      public func setEvolutions(value:Int32) -> Pogoprotos.Data.Player.PlayerStats.Builder {
        self.evolutions = value
        return self
      }
      public func clearEvolutions() -> Pogoprotos.Data.Player.PlayerStats.Builder{
           builderResult.hasEvolutions = false
           builderResult.evolutions = Int32(0)
           return self
      }
      public var hasPokeStopVisits:Bool {
           get {
                return builderResult.hasPokeStopVisits
           }
      }
      public var pokeStopVisits:Int32 {
           get {
                return builderResult.pokeStopVisits
           }
           set (value) {
               builderResult.hasPokeStopVisits = true
               builderResult.pokeStopVisits = value
           }
      }
      public func setPokeStopVisits(value:Int32) -> Pogoprotos.Data.Player.PlayerStats.Builder {
        self.pokeStopVisits = value
        return self
      }
      public func clearPokeStopVisits() -> Pogoprotos.Data.Player.PlayerStats.Builder{
           builderResult.hasPokeStopVisits = false
           builderResult.pokeStopVisits = Int32(0)
           return self
      }
      public var hasPokeballsThrown:Bool {
           get {
                return builderResult.hasPokeballsThrown
           }
      }
      public var pokeballsThrown:Int32 {
           get {
                return builderResult.pokeballsThrown
           }
           set (value) {
               builderResult.hasPokeballsThrown = true
               builderResult.pokeballsThrown = value
           }
      }
      public func setPokeballsThrown(value:Int32) -> Pogoprotos.Data.Player.PlayerStats.Builder {
        self.pokeballsThrown = value
        return self
      }
      public func clearPokeballsThrown() -> Pogoprotos.Data.Player.PlayerStats.Builder{
           builderResult.hasPokeballsThrown = false
           builderResult.pokeballsThrown = Int32(0)
           return self
      }
      public var hasEggsHatched:Bool {
           get {
                return builderResult.hasEggsHatched
           }
      }
      public var eggsHatched:Int32 {
           get {
                return builderResult.eggsHatched
           }
           set (value) {
               builderResult.hasEggsHatched = true
               builderResult.eggsHatched = value
           }
      }
      public func setEggsHatched(value:Int32) -> Pogoprotos.Data.Player.PlayerStats.Builder {
        self.eggsHatched = value
        return self
      }
      public func clearEggsHatched() -> Pogoprotos.Data.Player.PlayerStats.Builder{
           builderResult.hasEggsHatched = false
           builderResult.eggsHatched = Int32(0)
           return self
      }
      public var hasBigMagikarpCaught:Bool {
           get {
                return builderResult.hasBigMagikarpCaught
           }
      }
      public var bigMagikarpCaught:Int32 {
           get {
                return builderResult.bigMagikarpCaught
           }
           set (value) {
               builderResult.hasBigMagikarpCaught = true
               builderResult.bigMagikarpCaught = value
           }
      }
      public func setBigMagikarpCaught(value:Int32) -> Pogoprotos.Data.Player.PlayerStats.Builder {
        self.bigMagikarpCaught = value
        return self
      }
      public func clearBigMagikarpCaught() -> Pogoprotos.Data.Player.PlayerStats.Builder{
           builderResult.hasBigMagikarpCaught = false
           builderResult.bigMagikarpCaught = Int32(0)
           return self
      }
      public var hasBattleAttackWon:Bool {
           get {
                return builderResult.hasBattleAttackWon
           }
      }
      public var battleAttackWon:Int32 {
           get {
                return builderResult.battleAttackWon
           }
           set (value) {
               builderResult.hasBattleAttackWon = true
               builderResult.battleAttackWon = value
           }
      }
      public func setBattleAttackWon(value:Int32) -> Pogoprotos.Data.Player.PlayerStats.Builder {
        self.battleAttackWon = value
        return self
      }
      public func clearBattleAttackWon() -> Pogoprotos.Data.Player.PlayerStats.Builder{
           builderResult.hasBattleAttackWon = false
           builderResult.battleAttackWon = Int32(0)
           return self
      }
      public var hasBattleAttackTotal:Bool {
           get {
                return builderResult.hasBattleAttackTotal
           }
      }
      public var battleAttackTotal:Int32 {
           get {
                return builderResult.battleAttackTotal
           }
           set (value) {
               builderResult.hasBattleAttackTotal = true
               builderResult.battleAttackTotal = value
           }
      }
      public func setBattleAttackTotal(value:Int32) -> Pogoprotos.Data.Player.PlayerStats.Builder {
        self.battleAttackTotal = value
        return self
      }
      public func clearBattleAttackTotal() -> Pogoprotos.Data.Player.PlayerStats.Builder{
           builderResult.hasBattleAttackTotal = false
           builderResult.battleAttackTotal = Int32(0)
           return self
      }
      public var hasBattleDefendedWon:Bool {
           get {
                return builderResult.hasBattleDefendedWon
           }
      }
      public var battleDefendedWon:Int32 {
           get {
                return builderResult.battleDefendedWon
           }
           set (value) {
               builderResult.hasBattleDefendedWon = true
               builderResult.battleDefendedWon = value
           }
      }
      public func setBattleDefendedWon(value:Int32) -> Pogoprotos.Data.Player.PlayerStats.Builder {
        self.battleDefendedWon = value
        return self
      }
      public func clearBattleDefendedWon() -> Pogoprotos.Data.Player.PlayerStats.Builder{
           builderResult.hasBattleDefendedWon = false
           builderResult.battleDefendedWon = Int32(0)
           return self
      }
      public var hasBattleTrainingWon:Bool {
           get {
                return builderResult.hasBattleTrainingWon
           }
      }
      public var battleTrainingWon:Int32 {
           get {
                return builderResult.battleTrainingWon
           }
           set (value) {
               builderResult.hasBattleTrainingWon = true
               builderResult.battleTrainingWon = value
           }
      }
      public func setBattleTrainingWon(value:Int32) -> Pogoprotos.Data.Player.PlayerStats.Builder {
        self.battleTrainingWon = value
        return self
      }
      public func clearBattleTrainingWon() -> Pogoprotos.Data.Player.PlayerStats.Builder{
           builderResult.hasBattleTrainingWon = false
           builderResult.battleTrainingWon = Int32(0)
           return self
      }
      public var hasBattleTrainingTotal:Bool {
           get {
                return builderResult.hasBattleTrainingTotal
           }
      }
      public var battleTrainingTotal:Int32 {
           get {
                return builderResult.battleTrainingTotal
           }
           set (value) {
               builderResult.hasBattleTrainingTotal = true
               builderResult.battleTrainingTotal = value
           }
      }
      public func setBattleTrainingTotal(value:Int32) -> Pogoprotos.Data.Player.PlayerStats.Builder {
        self.battleTrainingTotal = value
        return self
      }
      public func clearBattleTrainingTotal() -> Pogoprotos.Data.Player.PlayerStats.Builder{
           builderResult.hasBattleTrainingTotal = false
           builderResult.battleTrainingTotal = Int32(0)
           return self
      }
      public var hasPrestigeRaisedTotal:Bool {
           get {
                return builderResult.hasPrestigeRaisedTotal
           }
      }
      public var prestigeRaisedTotal:Int32 {
           get {
                return builderResult.prestigeRaisedTotal
           }
           set (value) {
               builderResult.hasPrestigeRaisedTotal = true
               builderResult.prestigeRaisedTotal = value
           }
      }
      public func setPrestigeRaisedTotal(value:Int32) -> Pogoprotos.Data.Player.PlayerStats.Builder {
        self.prestigeRaisedTotal = value
        return self
      }
      public func clearPrestigeRaisedTotal() -> Pogoprotos.Data.Player.PlayerStats.Builder{
           builderResult.hasPrestigeRaisedTotal = false
           builderResult.prestigeRaisedTotal = Int32(0)
           return self
      }
      public var hasPrestigeDroppedTotal:Bool {
           get {
                return builderResult.hasPrestigeDroppedTotal
           }
      }
      public var prestigeDroppedTotal:Int32 {
           get {
                return builderResult.prestigeDroppedTotal
           }
           set (value) {
               builderResult.hasPrestigeDroppedTotal = true
               builderResult.prestigeDroppedTotal = value
           }
      }
      public func setPrestigeDroppedTotal(value:Int32) -> Pogoprotos.Data.Player.PlayerStats.Builder {
        self.prestigeDroppedTotal = value
        return self
      }
      public func clearPrestigeDroppedTotal() -> Pogoprotos.Data.Player.PlayerStats.Builder{
           builderResult.hasPrestigeDroppedTotal = false
           builderResult.prestigeDroppedTotal = Int32(0)
           return self
      }
      public var hasPokemonDeployed:Bool {
           get {
                return builderResult.hasPokemonDeployed
           }
      }
      public var pokemonDeployed:Int32 {
           get {
                return builderResult.pokemonDeployed
           }
           set (value) {
               builderResult.hasPokemonDeployed = true
               builderResult.pokemonDeployed = value
           }
      }
      public func setPokemonDeployed(value:Int32) -> Pogoprotos.Data.Player.PlayerStats.Builder {
        self.pokemonDeployed = value
        return self
      }
      public func clearPokemonDeployed() -> Pogoprotos.Data.Player.PlayerStats.Builder{
           builderResult.hasPokemonDeployed = false
           builderResult.pokemonDeployed = Int32(0)
           return self
      }
      public var hasPokemonCaughtByType:Bool {
           get {
                return builderResult.hasPokemonCaughtByType
           }
      }
      public var pokemonCaughtByType:NSData {
           get {
                return builderResult.pokemonCaughtByType
           }
           set (value) {
               builderResult.hasPokemonCaughtByType = true
               builderResult.pokemonCaughtByType = value
           }
      }
      public func setPokemonCaughtByType(value:NSData) -> Pogoprotos.Data.Player.PlayerStats.Builder {
        self.pokemonCaughtByType = value
        return self
      }
      public func clearPokemonCaughtByType() -> Pogoprotos.Data.Player.PlayerStats.Builder{
           builderResult.hasPokemonCaughtByType = false
           builderResult.pokemonCaughtByType = NSData()
           return self
      }
      public var hasSmallRattataCaught:Bool {
           get {
                return builderResult.hasSmallRattataCaught
           }
      }
      public var smallRattataCaught:Int32 {
           get {
                return builderResult.smallRattataCaught
           }
           set (value) {
               builderResult.hasSmallRattataCaught = true
               builderResult.smallRattataCaught = value
           }
      }
      public func setSmallRattataCaught(value:Int32) -> Pogoprotos.Data.Player.PlayerStats.Builder {
        self.smallRattataCaught = value
        return self
      }
      public func clearSmallRattataCaught() -> Pogoprotos.Data.Player.PlayerStats.Builder{
           builderResult.hasSmallRattataCaught = false
           builderResult.smallRattataCaught = Int32(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Data.Player.PlayerStats.Builder {
        builderResult = Pogoprotos.Data.Player.PlayerStats()
        return self
      }
      override public func clone() throws -> Pogoprotos.Data.Player.PlayerStats.Builder {
        return try Pogoprotos.Data.Player.PlayerStats.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Data.Player.PlayerStats {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Data.Player.PlayerStats {
        let returnMe:Pogoprotos.Data.Player.PlayerStats = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Data.Player.PlayerStats) throws -> Pogoprotos.Data.Player.PlayerStats.Builder {
        if other == Pogoprotos.Data.Player.PlayerStats() {
         return self
        }
        if other.hasLevel {
             level = other.level
        }
        if other.hasExperience {
             experience = other.experience
        }
        if other.hasPrevLevelXp {
             prevLevelXp = other.prevLevelXp
        }
        if other.hasNextLevelXp {
             nextLevelXp = other.nextLevelXp
        }
        if other.hasKmWalked {
             kmWalked = other.kmWalked
        }
        if other.hasPokemonsEncountered {
             pokemonsEncountered = other.pokemonsEncountered
        }
        if other.hasUniquePokedexEntries {
             uniquePokedexEntries = other.uniquePokedexEntries
        }
        if other.hasPokemonsCaptured {
             pokemonsCaptured = other.pokemonsCaptured
        }
        if other.hasEvolutions {
             evolutions = other.evolutions
        }
        if other.hasPokeStopVisits {
             pokeStopVisits = other.pokeStopVisits
        }
        if other.hasPokeballsThrown {
             pokeballsThrown = other.pokeballsThrown
        }
        if other.hasEggsHatched {
             eggsHatched = other.eggsHatched
        }
        if other.hasBigMagikarpCaught {
             bigMagikarpCaught = other.bigMagikarpCaught
        }
        if other.hasBattleAttackWon {
             battleAttackWon = other.battleAttackWon
        }
        if other.hasBattleAttackTotal {
             battleAttackTotal = other.battleAttackTotal
        }
        if other.hasBattleDefendedWon {
             battleDefendedWon = other.battleDefendedWon
        }
        if other.hasBattleTrainingWon {
             battleTrainingWon = other.battleTrainingWon
        }
        if other.hasBattleTrainingTotal {
             battleTrainingTotal = other.battleTrainingTotal
        }
        if other.hasPrestigeRaisedTotal {
             prestigeRaisedTotal = other.prestigeRaisedTotal
        }
        if other.hasPrestigeDroppedTotal {
             prestigeDroppedTotal = other.prestigeDroppedTotal
        }
        if other.hasPokemonDeployed {
             pokemonDeployed = other.pokemonDeployed
        }
        if other.hasPokemonCaughtByType {
             pokemonCaughtByType = other.pokemonCaughtByType
        }
        if other.hasSmallRattataCaught {
             smallRattataCaught = other.smallRattataCaught
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Data.Player.PlayerStats.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.Player.PlayerStats.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            level = try input.readInt32()

          case 16:
            experience = try input.readInt64()

          case 24:
            prevLevelXp = try input.readInt64()

          case 32:
            nextLevelXp = try input.readInt64()

          case 45:
            kmWalked = try input.readFloat()

          case 48:
            pokemonsEncountered = try input.readInt32()

          case 56:
            uniquePokedexEntries = try input.readInt32()

          case 64:
            pokemonsCaptured = try input.readInt32()

          case 72:
            evolutions = try input.readInt32()

          case 80:
            pokeStopVisits = try input.readInt32()

          case 88:
            pokeballsThrown = try input.readInt32()

          case 96:
            eggsHatched = try input.readInt32()

          case 104:
            bigMagikarpCaught = try input.readInt32()

          case 112:
            battleAttackWon = try input.readInt32()

          case 120:
            battleAttackTotal = try input.readInt32()

          case 128:
            battleDefendedWon = try input.readInt32()

          case 136:
            battleTrainingWon = try input.readInt32()

          case 144:
            battleTrainingTotal = try input.readInt32()

          case 152:
            prestigeRaisedTotal = try input.readInt32()

          case 160:
            prestigeDroppedTotal = try input.readInt32()

          case 168:
            pokemonDeployed = try input.readInt32()

          case 178:
            pokemonCaughtByType = try input.readData()

          case 184:
            smallRattataCaught = try input.readInt32()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Data.Player.PlayerStats.Builder {
        let resultDecodedBuilder = Pogoprotos.Data.Player.PlayerStats.Builder()
        if let jsonValueLevel = jsonMap["level"] as? NSNumber {
          resultDecodedBuilder.level = jsonValueLevel.intValue
        }
        if let jsonValueExperience = jsonMap["experience"] as? String {
          resultDecodedBuilder.experience = Int64(jsonValueExperience)!
        }
        if let jsonValuePrevLevelXp = jsonMap["prevLevelXp"] as? String {
          resultDecodedBuilder.prevLevelXp = Int64(jsonValuePrevLevelXp)!
        }
        if let jsonValueNextLevelXp = jsonMap["nextLevelXp"] as? String {
          resultDecodedBuilder.nextLevelXp = Int64(jsonValueNextLevelXp)!
        }
        if let jsonValueKmWalked = jsonMap["kmWalked"] as? NSNumber {
          resultDecodedBuilder.kmWalked = jsonValueKmWalked.floatValue
        }
        if let jsonValuePokemonsEncountered = jsonMap["pokemonsEncountered"] as? NSNumber {
          resultDecodedBuilder.pokemonsEncountered = jsonValuePokemonsEncountered.intValue
        }
        if let jsonValueUniquePokedexEntries = jsonMap["uniquePokedexEntries"] as? NSNumber {
          resultDecodedBuilder.uniquePokedexEntries = jsonValueUniquePokedexEntries.intValue
        }
        if let jsonValuePokemonsCaptured = jsonMap["pokemonsCaptured"] as? NSNumber {
          resultDecodedBuilder.pokemonsCaptured = jsonValuePokemonsCaptured.intValue
        }
        if let jsonValueEvolutions = jsonMap["evolutions"] as? NSNumber {
          resultDecodedBuilder.evolutions = jsonValueEvolutions.intValue
        }
        if let jsonValuePokeStopVisits = jsonMap["pokeStopVisits"] as? NSNumber {
          resultDecodedBuilder.pokeStopVisits = jsonValuePokeStopVisits.intValue
        }
        if let jsonValuePokeballsThrown = jsonMap["pokeballsThrown"] as? NSNumber {
          resultDecodedBuilder.pokeballsThrown = jsonValuePokeballsThrown.intValue
        }
        if let jsonValueEggsHatched = jsonMap["eggsHatched"] as? NSNumber {
          resultDecodedBuilder.eggsHatched = jsonValueEggsHatched.intValue
        }
        if let jsonValueBigMagikarpCaught = jsonMap["bigMagikarpCaught"] as? NSNumber {
          resultDecodedBuilder.bigMagikarpCaught = jsonValueBigMagikarpCaught.intValue
        }
        if let jsonValueBattleAttackWon = jsonMap["battleAttackWon"] as? NSNumber {
          resultDecodedBuilder.battleAttackWon = jsonValueBattleAttackWon.intValue
        }
        if let jsonValueBattleAttackTotal = jsonMap["battleAttackTotal"] as? NSNumber {
          resultDecodedBuilder.battleAttackTotal = jsonValueBattleAttackTotal.intValue
        }
        if let jsonValueBattleDefendedWon = jsonMap["battleDefendedWon"] as? NSNumber {
          resultDecodedBuilder.battleDefendedWon = jsonValueBattleDefendedWon.intValue
        }
        if let jsonValueBattleTrainingWon = jsonMap["battleTrainingWon"] as? NSNumber {
          resultDecodedBuilder.battleTrainingWon = jsonValueBattleTrainingWon.intValue
        }
        if let jsonValueBattleTrainingTotal = jsonMap["battleTrainingTotal"] as? NSNumber {
          resultDecodedBuilder.battleTrainingTotal = jsonValueBattleTrainingTotal.intValue
        }
        if let jsonValuePrestigeRaisedTotal = jsonMap["prestigeRaisedTotal"] as? NSNumber {
          resultDecodedBuilder.prestigeRaisedTotal = jsonValuePrestigeRaisedTotal.intValue
        }
        if let jsonValuePrestigeDroppedTotal = jsonMap["prestigeDroppedTotal"] as? NSNumber {
          resultDecodedBuilder.prestigeDroppedTotal = jsonValuePrestigeDroppedTotal.intValue
        }
        if let jsonValuePokemonDeployed = jsonMap["pokemonDeployed"] as? NSNumber {
          resultDecodedBuilder.pokemonDeployed = jsonValuePokemonDeployed.intValue
        }
        if let jsonValuePokemonCaughtByType = jsonMap["pokemonCaughtByType"] as? String {
          resultDecodedBuilder.pokemonCaughtByType = NSData(base64EncodedString:jsonValuePokemonCaughtByType, options: NSDataBase64DecodingOptions(rawValue:0))!
        }
        if let jsonValueSmallRattataCaught = jsonMap["smallRattataCaught"] as? NSNumber {
          resultDecodedBuilder.smallRattataCaught = jsonValueSmallRattataCaught.intValue
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Data.Player.PlayerStats.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Data.Player.PlayerStats.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
