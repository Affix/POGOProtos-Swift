// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "RequestEnvelope.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Pogoprotos { public struct Networking { public struct Envelopes { }}}

public func == (lhs: Pogoprotos.Networking.Envelopes.RequestEnvelope, rhs: Pogoprotos.Networking.Envelopes.RequestEnvelope) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasStatusCode == rhs.hasStatusCode) && (!lhs.hasStatusCode || lhs.statusCode == rhs.statusCode)
  fieldCheck = fieldCheck && (lhs.hasRequestId == rhs.hasRequestId) && (!lhs.hasRequestId || lhs.requestId == rhs.requestId)
  fieldCheck = fieldCheck && (lhs.requests == rhs.requests)
  fieldCheck = fieldCheck && (lhs.hasUnknown6 == rhs.hasUnknown6) && (!lhs.hasUnknown6 || lhs.unknown6 == rhs.unknown6)
  fieldCheck = fieldCheck && (lhs.hasLatitude == rhs.hasLatitude) && (!lhs.hasLatitude || lhs.latitude == rhs.latitude)
  fieldCheck = fieldCheck && (lhs.hasLongitude == rhs.hasLongitude) && (!lhs.hasLongitude || lhs.longitude == rhs.longitude)
  fieldCheck = fieldCheck && (lhs.hasAltitude == rhs.hasAltitude) && (!lhs.hasAltitude || lhs.altitude == rhs.altitude)
  fieldCheck = fieldCheck && (lhs.hasAuthInfo == rhs.hasAuthInfo) && (!lhs.hasAuthInfo || lhs.authInfo == rhs.authInfo)
  fieldCheck = fieldCheck && (lhs.hasAuthTicket == rhs.hasAuthTicket) && (!lhs.hasAuthTicket || lhs.authTicket == rhs.authTicket)
  fieldCheck = fieldCheck && (lhs.hasUnknown12 == rhs.hasUnknown12) && (!lhs.hasUnknown12 || lhs.unknown12 == rhs.unknown12)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo, rhs: Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasProvider == rhs.hasProvider) && (!lhs.hasProvider || lhs.provider == rhs.provider)
  fieldCheck = fieldCheck && (lhs.hasToken == rhs.hasToken) && (!lhs.hasToken || lhs.token == rhs.token)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt, rhs: Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasContents == rhs.hasContents) && (!lhs.hasContents || lhs.contents == rhs.contents)
  fieldCheck = fieldCheck && (lhs.hasUnknown2 == rhs.hasUnknown2) && (!lhs.hasUnknown2 || lhs.unknown2 == rhs.unknown2)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Pogoprotos.Networking.Envelopes {
  public struct RequestEnvelopeRoot {
    public static var sharedInstance : RequestEnvelopeRoot {
     struct Static {
         static let instance : RequestEnvelopeRoot = RequestEnvelopeRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Pogoprotos.Networking.Requests.RequestRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Networking.Envelopes.AuthTicketRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Networking.Envelopes.Unknown6Root.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class RequestEnvelope : GeneratedMessage, GeneratedMessageProtocol {


    //Nested type declaration start

      final public class AuthInfo : GeneratedMessage, GeneratedMessageProtocol {


        //Nested type declaration start

          final public class Jwt : GeneratedMessage, GeneratedMessageProtocol {
            public private(set) var hasContents:Bool = false
            public private(set) var contents:String = ""

            public private(set) var hasUnknown2:Bool = false
            public private(set) var unknown2:Int32 = Int32(0)

            required public init() {
                 super.init()
            }
            override public func isInitialized() -> Bool {
             return true
            }
            override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
              if hasContents {
                try output.writeString(1, value:contents)
              }
              if hasUnknown2 {
                try output.writeInt32(2, value:unknown2)
              }
              try unknownFields.writeToCodedOutputStream(output)
            }
            override public func serializedSize() -> Int32 {
              var serialize_size:Int32 = memoizedSerializedSize
              if serialize_size != -1 {
               return serialize_size
              }

              serialize_size = 0
              if hasContents {
                serialize_size += contents.computeStringSize(1)
              }
              if hasUnknown2 {
                serialize_size += unknown2.computeInt32Size(2)
              }
              serialize_size += unknownFields.serializedSize()
              memoizedSerializedSize = serialize_size
              return serialize_size
            }
            public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt> {
              var mergedArray = Array<Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt>()
              while let value = try parseFromDelimitedFromInputStream(input) {
                mergedArray += [value]
              }
              return mergedArray
            }
            public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt? {
              return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder().mergeDelimitedFromInputStream(input)?.build()
            }
            public class func parseFromData(data:NSData) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt {
              return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Networking.Envelopes.RequestEnvelopeRoot.sharedInstance.extensionRegistry).build()
            }
            public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt {
              return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
            }
            public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt {
              return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder().mergeFromInputStream(input).build()
            }
            public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt {
              return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
            }
            public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt {
              return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder().mergeFromCodedInputStream(input).build()
            }
            public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt {
              return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
            }
            public class func getBuilder() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder {
              return Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.classBuilder() as! Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder
            }
            public func getBuilder() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder {
              return classBuilder() as! Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder
            }
            override public class func classBuilder() -> MessageBuilder {
              return Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder()
            }
            override public func classBuilder() -> MessageBuilder {
              return Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder()
            }
            public func toBuilder() throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder {
              return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.builderWithPrototype(self)
            }
            public class func builderWithPrototype(prototype:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder {
              return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder().mergeFrom(prototype)
            }
            override public func encode() throws -> Dictionary<String,AnyObject> {
              guard isInitialized() else {
                throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
              }

              var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
              if hasContents {
                jsonMap["contents"] = contents
              }
              if hasUnknown2 {
                jsonMap["unknown2"] = NSNumber(int:unknown2)
              }
              return jsonMap
            }
            override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt {
              return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder.decodeToBuilder(jsonMap).build()
            }
            override class public func fromJSON(data:NSData) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt {
              return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder.fromJSONToBuilder(data).build()
            }
            override public func getDescription(indent:String) throws -> String {
              var output = ""
              if hasContents {
                output += "\(indent) contents: \(contents) \n"
              }
              if hasUnknown2 {
                output += "\(indent) unknown2: \(unknown2) \n"
              }
              output += unknownFields.getDescription(indent)
              return output
            }
            override public var hashValue:Int {
                get {
                    var hashCode:Int = 7
                    if hasContents {
                       hashCode = (hashCode &* 31) &+ contents.hashValue
                    }
                    if hasUnknown2 {
                       hashCode = (hashCode &* 31) &+ unknown2.hashValue
                    }
                    hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                    return hashCode
                }
            }


            //Meta information declaration start

            override public class func className() -> String {
                return "Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt"
            }
            override public func className() -> String {
                return "Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt"
            }
            override public func classMetaType() -> GeneratedMessage.Type {
                return Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.self
            }
            //Meta information declaration end

            final public class Builder : GeneratedMessageBuilder {
              private var builderResult:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt = Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt()
              public func getMessage() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt {
                  return builderResult
              }

              required override public init () {
                 super.init()
              }
              public var hasContents:Bool {
                   get {
                        return builderResult.hasContents
                   }
              }
              public var contents:String {
                   get {
                        return builderResult.contents
                   }
                   set (value) {
                       builderResult.hasContents = true
                       builderResult.contents = value
                   }
              }
              public func setContents(value:String) -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder {
                self.contents = value
                return self
              }
              public func clearContents() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder{
                   builderResult.hasContents = false
                   builderResult.contents = ""
                   return self
              }
              public var hasUnknown2:Bool {
                   get {
                        return builderResult.hasUnknown2
                   }
              }
              public var unknown2:Int32 {
                   get {
                        return builderResult.unknown2
                   }
                   set (value) {
                       builderResult.hasUnknown2 = true
                       builderResult.unknown2 = value
                   }
              }
              public func setUnknown2(value:Int32) -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder {
                self.unknown2 = value
                return self
              }
              public func clearUnknown2() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder{
                   builderResult.hasUnknown2 = false
                   builderResult.unknown2 = Int32(0)
                   return self
              }
              override public var internalGetResult:GeneratedMessage {
                   get {
                      return builderResult
                   }
              }
              override public func clear() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder {
                builderResult = Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt()
                return self
              }
              override public func clone() throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder {
                return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.builderWithPrototype(builderResult)
              }
              override public func build() throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt {
                   try checkInitialized()
                   return buildPartial()
              }
              public func buildPartial() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt {
                let returnMe:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt = builderResult
                return returnMe
              }
              public func mergeFrom(other:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder {
                if other == Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt() {
                 return self
                }
                if other.hasContents {
                     contents = other.contents
                }
                if other.hasUnknown2 {
                     unknown2 = other.unknown2
                }
                try mergeUnknownFields(other.unknownFields)
                return self
              }
              override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder {
                   return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
              }
              override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                while (true) {
                  let protobufTag = try input.readTag()
                  switch protobufTag {
                  case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                  case 10:
                    contents = try input.readString()

                  case 16:
                    unknown2 = try input.readInt32()

                  default:
                    if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                       unknownFields = try unknownFieldsBuilder.build()
                       return self
                    }
                  }
                }
              }
              override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder {
                let resultDecodedBuilder = Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder()
                if let jsonValueContents = jsonMap["contents"] as? String {
                  resultDecodedBuilder.contents = jsonValueContents
                }
                if let jsonValueUnknown2 = jsonMap["unknown2"] as? NSNumber {
                  resultDecodedBuilder.unknown2 = jsonValueUnknown2.intValue
                }
                return resultDecodedBuilder
              }
              override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder {
                let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
                  throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
                }
                return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder.decodeToBuilder(jsDataCast)
              }
            }

          }

        //Nested type declaration end

        public private(set) var hasProvider:Bool = false
        public private(set) var provider:String = ""

        public private(set) var hasToken:Bool = false
        public private(set) var token:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt!
        required public init() {
             super.init()
        }
        override public func isInitialized() -> Bool {
         return true
        }
        override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
          if hasProvider {
            try output.writeString(1, value:provider)
          }
          if hasToken {
            try output.writeMessage(2, value:token)
          }
          try unknownFields.writeToCodedOutputStream(output)
        }
        override public func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasProvider {
            serialize_size += provider.computeStringSize(1)
          }
          if hasToken {
              if let varSizetoken = token?.computeMessageSize(2) {
                  serialize_size += varSizetoken
              }
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo> {
          var mergedArray = Array<Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo>()
          while let value = try parseFromDelimitedFromInputStream(input) {
            mergedArray += [value]
          }
          return mergedArray
        }
        public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo? {
          return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder().mergeDelimitedFromInputStream(input)?.build()
        }
        public class func parseFromData(data:NSData) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo {
          return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Networking.Envelopes.RequestEnvelopeRoot.sharedInstance.extensionRegistry).build()
        }
        public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo {
          return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo {
          return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder().mergeFromInputStream(input).build()
        }
        public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo {
          return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo {
          return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder().mergeFromCodedInputStream(input).build()
        }
        public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo {
          return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func getBuilder() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder {
          return Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.classBuilder() as! Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder
        }
        public func getBuilder() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder {
          return classBuilder() as! Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder
        }
        override public class func classBuilder() -> MessageBuilder {
          return Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder()
        }
        override public func classBuilder() -> MessageBuilder {
          return Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder()
        }
        public func toBuilder() throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder {
          return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.builderWithPrototype(self)
        }
        public class func builderWithPrototype(prototype:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder {
          return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder().mergeFrom(prototype)
        }
        override public func encode() throws -> Dictionary<String,AnyObject> {
          guard isInitialized() else {
            throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
          }

          var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
          if hasProvider {
            jsonMap["provider"] = provider
          }
          if hasToken {
            jsonMap["token"] = try token.encode()
          }
          return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo {
          return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder.decodeToBuilder(jsonMap).build()
        }
        override class public func fromJSON(data:NSData) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo {
          return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder.fromJSONToBuilder(data).build()
        }
        override public func getDescription(indent:String) throws -> String {
          var output = ""
          if hasProvider {
            output += "\(indent) provider: \(provider) \n"
          }
          if hasToken {
            output += "\(indent) token {\n"
            if let outDescToken = token {
              output += try outDescToken.getDescription("\(indent)  ")
            }
            output += "\(indent) }\n"
          }
          output += unknownFields.getDescription(indent)
          return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasProvider {
                   hashCode = (hashCode &* 31) &+ provider.hashValue
                }
                if hasToken {
                    if let hashValuetoken = token?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValuetoken
                    }
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo"
        }
        override public func className() -> String {
            return "Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo"
        }
        override public func classMetaType() -> GeneratedMessage.Type {
            return Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.self
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
          private var builderResult:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo = Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo()
          public func getMessage() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo {
              return builderResult
          }

          required override public init () {
             super.init()
          }
          public var hasProvider:Bool {
               get {
                    return builderResult.hasProvider
               }
          }
          public var provider:String {
               get {
                    return builderResult.provider
               }
               set (value) {
                   builderResult.hasProvider = true
                   builderResult.provider = value
               }
          }
          public func setProvider(value:String) -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder {
            self.provider = value
            return self
          }
          public func clearProvider() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder{
               builderResult.hasProvider = false
               builderResult.provider = ""
               return self
          }
          public var hasToken:Bool {
               get {
                   return builderResult.hasToken
               }
          }
          public var token:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt! {
               get {
                   if tokenBuilder_ != nil {
                      builderResult.token = tokenBuilder_.getMessage()
                   }
                   return builderResult.token
               }
               set (value) {
                   builderResult.hasToken = true
                   builderResult.token = value
               }
          }
          private var tokenBuilder_:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder! {
               didSet {
                  builderResult.hasToken = true
               }
          }
          public func getTokenBuilder() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder {
            if tokenBuilder_ == nil {
               tokenBuilder_ = Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder()
               builderResult.token = tokenBuilder_.getMessage()
               if token != nil {
                  try! tokenBuilder_.mergeFrom(token)
               }
            }
            return tokenBuilder_
          }
          public func setToken(value:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt!) -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder {
            self.token = value
            return self
          }
          public func mergeToken(value:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder {
            if builderResult.hasToken {
              builderResult.token = try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.builderWithPrototype(builderResult.token).mergeFrom(value).buildPartial()
            } else {
              builderResult.token = value
            }
            builderResult.hasToken = true
            return self
          }
          public func clearToken() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder {
            tokenBuilder_ = nil
            builderResult.hasToken = false
            builderResult.token = nil
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          override public func clear() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder {
            builderResult = Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo()
            return self
          }
          override public func clone() throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder {
            return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.builderWithPrototype(builderResult)
          }
          override public func build() throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo {
               try checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo {
            let returnMe:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo = builderResult
            return returnMe
          }
          public func mergeFrom(other:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder {
            if other == Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo() {
             return self
            }
            if other.hasProvider {
                 provider = other.provider
            }
            if (other.hasToken) {
                try mergeToken(other.token)
            }
            try mergeUnknownFields(other.unknownFields)
            return self
          }
          override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder {
               return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              let protobufTag = try input.readTag()
              switch protobufTag {
              case 0: 
                self.unknownFields = try unknownFieldsBuilder.build()
                return self

              case 10:
                provider = try input.readString()

              case 18:
                let subBuilder:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder = Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder()
                if hasToken {
                  try subBuilder.mergeFrom(token)
                }
                try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                token = subBuilder.buildPartial()

              default:
                if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                   unknownFields = try unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
          override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder {
            let resultDecodedBuilder = Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder()
            if let jsonValueProvider = jsonMap["provider"] as? String {
              resultDecodedBuilder.provider = jsonValueProvider
            }
            if let jsonValueToken = jsonMap["token"] as? Dictionary<String,AnyObject> {
              resultDecodedBuilder.token = try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder.decodeToBuilder(jsonValueToken).build()

            }
            return resultDecodedBuilder
          }
          override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder {
            let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
              throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
            }
            return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder.decodeToBuilder(jsDataCast)
          }
        }

      }

    //Nested type declaration end

    public private(set) var hasStatusCode:Bool = false
    public private(set) var statusCode:Int32 = Int32(0)

    public private(set) var hasRequestId:Bool = false
    public private(set) var requestId:UInt64 = UInt64(0)

    public private(set) var requests:Array<Pogoprotos.Networking.Requests.Request>  = Array<Pogoprotos.Networking.Requests.Request>()
    public private(set) var hasUnknown6:Bool = false
    public private(set) var unknown6:Pogoprotos.Networking.Envelopes.Unknown6!
    public private(set) var hasLatitude:Bool = false
    public private(set) var latitude:Double = Double(0)

    public private(set) var hasLongitude:Bool = false
    public private(set) var longitude:Double = Double(0)

    public private(set) var hasAltitude:Bool = false
    public private(set) var altitude:Double = Double(0)

    public private(set) var hasAuthInfo:Bool = false
    public private(set) var authInfo:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo!
    public private(set) var hasAuthTicket:Bool = false
    public private(set) var authTicket:Pogoprotos.Networking.Envelopes.AuthTicket!
    public private(set) var hasUnknown12:Bool = false
    public private(set) var unknown12:Int64 = Int64(0)

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasStatusCode {
        try output.writeInt32(1, value:statusCode)
      }
      if hasRequestId {
        try output.writeUInt64(3, value:requestId)
      }
      for oneElementRequests in requests {
          try output.writeMessage(4, value:oneElementRequests)
      }
      if hasUnknown6 {
        try output.writeMessage(6, value:unknown6)
      }
      if hasLatitude {
        try output.writeDouble(7, value:latitude)
      }
      if hasLongitude {
        try output.writeDouble(8, value:longitude)
      }
      if hasAltitude {
        try output.writeDouble(9, value:altitude)
      }
      if hasAuthInfo {
        try output.writeMessage(10, value:authInfo)
      }
      if hasAuthTicket {
        try output.writeMessage(11, value:authTicket)
      }
      if hasUnknown12 {
        try output.writeInt64(12, value:unknown12)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasStatusCode {
        serialize_size += statusCode.computeInt32Size(1)
      }
      if hasRequestId {
        serialize_size += requestId.computeUInt64Size(3)
      }
      for oneElementRequests in requests {
          serialize_size += oneElementRequests.computeMessageSize(4)
      }
      if hasUnknown6 {
          if let varSizeunknown6 = unknown6?.computeMessageSize(6) {
              serialize_size += varSizeunknown6
          }
      }
      if hasLatitude {
        serialize_size += latitude.computeDoubleSize(7)
      }
      if hasLongitude {
        serialize_size += longitude.computeDoubleSize(8)
      }
      if hasAltitude {
        serialize_size += altitude.computeDoubleSize(9)
      }
      if hasAuthInfo {
          if let varSizeauthInfo = authInfo?.computeMessageSize(10) {
              serialize_size += varSizeauthInfo
          }
      }
      if hasAuthTicket {
          if let varSizeauthTicket = authTicket?.computeMessageSize(11) {
              serialize_size += varSizeauthTicket
          }
      }
      if hasUnknown12 {
        serialize_size += unknown12.computeInt64Size(12)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Networking.Envelopes.RequestEnvelope> {
      var mergedArray = Array<Pogoprotos.Networking.Envelopes.RequestEnvelope>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope? {
      return try Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope {
      return try Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Networking.Envelopes.RequestEnvelopeRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope {
      return try Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope {
      return try Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope {
      return try Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope {
      return try Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope {
      return try Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
      return Pogoprotos.Networking.Envelopes.RequestEnvelope.classBuilder() as! Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder
    }
    public func getBuilder() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
      return classBuilder() as! Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
      return try Pogoprotos.Networking.Envelopes.RequestEnvelope.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Networking.Envelopes.RequestEnvelope) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
      return try Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasStatusCode {
        jsonMap["statusCode"] = NSNumber(int:statusCode)
      }
      if hasRequestId {
        jsonMap["requestId"] = "\(requestId)"
      }
      if !requests.isEmpty {
        var jsonArrayRequests:Array<Dictionary<String,AnyObject>> = []
          for oneValueRequests in requests {
            let ecodedMessageRequests = try oneValueRequests.encode()
            jsonArrayRequests += [ecodedMessageRequests]
          }
        jsonMap["requests"] = jsonArrayRequests
      }
      if hasUnknown6 {
        jsonMap["unknown6"] = try unknown6.encode()
      }
      if hasLatitude {
        jsonMap["latitude"] = NSNumber(double:latitude)
      }
      if hasLongitude {
        jsonMap["longitude"] = NSNumber(double:longitude)
      }
      if hasAltitude {
        jsonMap["altitude"] = NSNumber(double:altitude)
      }
      if hasAuthInfo {
        jsonMap["authInfo"] = try authInfo.encode()
      }
      if hasAuthTicket {
        jsonMap["authTicket"] = try authTicket.encode()
      }
      if hasUnknown12 {
        jsonMap["unknown12"] = "\(unknown12)"
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope {
      return try Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope {
      return try Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasStatusCode {
        output += "\(indent) statusCode: \(statusCode) \n"
      }
      if hasRequestId {
        output += "\(indent) requestId: \(requestId) \n"
      }
      var requestsElementIndex:Int = 0
      for oneElementRequests in requests {
          output += "\(indent) requests[\(requestsElementIndex)] {\n"
          output += try oneElementRequests.getDescription("\(indent)  ")
          output += "\(indent)}\n"
          requestsElementIndex += 1
      }
      if hasUnknown6 {
        output += "\(indent) unknown6 {\n"
        if let outDescUnknown6 = unknown6 {
          output += try outDescUnknown6.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasLatitude {
        output += "\(indent) latitude: \(latitude) \n"
      }
      if hasLongitude {
        output += "\(indent) longitude: \(longitude) \n"
      }
      if hasAltitude {
        output += "\(indent) altitude: \(altitude) \n"
      }
      if hasAuthInfo {
        output += "\(indent) authInfo {\n"
        if let outDescAuthInfo = authInfo {
          output += try outDescAuthInfo.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasAuthTicket {
        output += "\(indent) authTicket {\n"
        if let outDescAuthTicket = authTicket {
          output += try outDescAuthTicket.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasUnknown12 {
        output += "\(indent) unknown12: \(unknown12) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasStatusCode {
               hashCode = (hashCode &* 31) &+ statusCode.hashValue
            }
            if hasRequestId {
               hashCode = (hashCode &* 31) &+ requestId.hashValue
            }
            for oneElementRequests in requests {
                hashCode = (hashCode &* 31) &+ oneElementRequests.hashValue
            }
            if hasUnknown6 {
                if let hashValueunknown6 = unknown6?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueunknown6
                }
            }
            if hasLatitude {
               hashCode = (hashCode &* 31) &+ latitude.hashValue
            }
            if hasLongitude {
               hashCode = (hashCode &* 31) &+ longitude.hashValue
            }
            if hasAltitude {
               hashCode = (hashCode &* 31) &+ altitude.hashValue
            }
            if hasAuthInfo {
                if let hashValueauthInfo = authInfo?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueauthInfo
                }
            }
            if hasAuthTicket {
                if let hashValueauthTicket = authTicket?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueauthTicket
                }
            }
            if hasUnknown12 {
               hashCode = (hashCode &* 31) &+ unknown12.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Networking.Envelopes.RequestEnvelope"
    }
    override public func className() -> String {
        return "Pogoprotos.Networking.Envelopes.RequestEnvelope"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Networking.Envelopes.RequestEnvelope.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Networking.Envelopes.RequestEnvelope = Pogoprotos.Networking.Envelopes.RequestEnvelope()
      public func getMessage() -> Pogoprotos.Networking.Envelopes.RequestEnvelope {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasStatusCode:Bool {
           get {
                return builderResult.hasStatusCode
           }
      }
      public var statusCode:Int32 {
           get {
                return builderResult.statusCode
           }
           set (value) {
               builderResult.hasStatusCode = true
               builderResult.statusCode = value
           }
      }
      public func setStatusCode(value:Int32) -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        self.statusCode = value
        return self
      }
      public func clearStatusCode() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder{
           builderResult.hasStatusCode = false
           builderResult.statusCode = Int32(0)
           return self
      }
      public var hasRequestId:Bool {
           get {
                return builderResult.hasRequestId
           }
      }
      public var requestId:UInt64 {
           get {
                return builderResult.requestId
           }
           set (value) {
               builderResult.hasRequestId = true
               builderResult.requestId = value
           }
      }
      public func setRequestId(value:UInt64) -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        self.requestId = value
        return self
      }
      public func clearRequestId() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder{
           builderResult.hasRequestId = false
           builderResult.requestId = UInt64(0)
           return self
      }
      public var requests:Array<Pogoprotos.Networking.Requests.Request> {
           get {
               return builderResult.requests
           }
           set (value) {
               builderResult.requests = value
           }
      }
      public func setRequests(value:Array<Pogoprotos.Networking.Requests.Request>) -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        self.requests = value
        return self
      }
      public func clearRequests() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        builderResult.requests.removeAll(keepCapacity: false)
        return self
      }
      public var hasUnknown6:Bool {
           get {
               return builderResult.hasUnknown6
           }
      }
      public var unknown6:Pogoprotos.Networking.Envelopes.Unknown6! {
           get {
               if unknown6Builder_ != nil {
                  builderResult.unknown6 = unknown6Builder_.getMessage()
               }
               return builderResult.unknown6
           }
           set (value) {
               builderResult.hasUnknown6 = true
               builderResult.unknown6 = value
           }
      }
      private var unknown6Builder_:Pogoprotos.Networking.Envelopes.Unknown6.Builder! {
           didSet {
              builderResult.hasUnknown6 = true
           }
      }
      public func getUnknown6Builder() -> Pogoprotos.Networking.Envelopes.Unknown6.Builder {
        if unknown6Builder_ == nil {
           unknown6Builder_ = Pogoprotos.Networking.Envelopes.Unknown6.Builder()
           builderResult.unknown6 = unknown6Builder_.getMessage()
           if unknown6 != nil {
              try! unknown6Builder_.mergeFrom(unknown6)
           }
        }
        return unknown6Builder_
      }
      public func setUnknown6(value:Pogoprotos.Networking.Envelopes.Unknown6!) -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        self.unknown6 = value
        return self
      }
      public func mergeUnknown6(value:Pogoprotos.Networking.Envelopes.Unknown6) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        if builderResult.hasUnknown6 {
          builderResult.unknown6 = try Pogoprotos.Networking.Envelopes.Unknown6.builderWithPrototype(builderResult.unknown6).mergeFrom(value).buildPartial()
        } else {
          builderResult.unknown6 = value
        }
        builderResult.hasUnknown6 = true
        return self
      }
      public func clearUnknown6() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        unknown6Builder_ = nil
        builderResult.hasUnknown6 = false
        builderResult.unknown6 = nil
        return self
      }
      public var hasLatitude:Bool {
           get {
                return builderResult.hasLatitude
           }
      }
      public var latitude:Double {
           get {
                return builderResult.latitude
           }
           set (value) {
               builderResult.hasLatitude = true
               builderResult.latitude = value
           }
      }
      public func setLatitude(value:Double) -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        self.latitude = value
        return self
      }
      public func clearLatitude() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder{
           builderResult.hasLatitude = false
           builderResult.latitude = Double(0)
           return self
      }
      public var hasLongitude:Bool {
           get {
                return builderResult.hasLongitude
           }
      }
      public var longitude:Double {
           get {
                return builderResult.longitude
           }
           set (value) {
               builderResult.hasLongitude = true
               builderResult.longitude = value
           }
      }
      public func setLongitude(value:Double) -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        self.longitude = value
        return self
      }
      public func clearLongitude() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder{
           builderResult.hasLongitude = false
           builderResult.longitude = Double(0)
           return self
      }
      public var hasAltitude:Bool {
           get {
                return builderResult.hasAltitude
           }
      }
      public var altitude:Double {
           get {
                return builderResult.altitude
           }
           set (value) {
               builderResult.hasAltitude = true
               builderResult.altitude = value
           }
      }
      public func setAltitude(value:Double) -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        self.altitude = value
        return self
      }
      public func clearAltitude() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder{
           builderResult.hasAltitude = false
           builderResult.altitude = Double(0)
           return self
      }
      public var hasAuthInfo:Bool {
           get {
               return builderResult.hasAuthInfo
           }
      }
      public var authInfo:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo! {
           get {
               if authInfoBuilder_ != nil {
                  builderResult.authInfo = authInfoBuilder_.getMessage()
               }
               return builderResult.authInfo
           }
           set (value) {
               builderResult.hasAuthInfo = true
               builderResult.authInfo = value
           }
      }
      private var authInfoBuilder_:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder! {
           didSet {
              builderResult.hasAuthInfo = true
           }
      }
      public func getAuthInfoBuilder() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder {
        if authInfoBuilder_ == nil {
           authInfoBuilder_ = Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder()
           builderResult.authInfo = authInfoBuilder_.getMessage()
           if authInfo != nil {
              try! authInfoBuilder_.mergeFrom(authInfo)
           }
        }
        return authInfoBuilder_
      }
      public func setAuthInfo(value:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo!) -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        self.authInfo = value
        return self
      }
      public func mergeAuthInfo(value:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        if builderResult.hasAuthInfo {
          builderResult.authInfo = try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.builderWithPrototype(builderResult.authInfo).mergeFrom(value).buildPartial()
        } else {
          builderResult.authInfo = value
        }
        builderResult.hasAuthInfo = true
        return self
      }
      public func clearAuthInfo() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        authInfoBuilder_ = nil
        builderResult.hasAuthInfo = false
        builderResult.authInfo = nil
        return self
      }
      public var hasAuthTicket:Bool {
           get {
               return builderResult.hasAuthTicket
           }
      }
      public var authTicket:Pogoprotos.Networking.Envelopes.AuthTicket! {
           get {
               if authTicketBuilder_ != nil {
                  builderResult.authTicket = authTicketBuilder_.getMessage()
               }
               return builderResult.authTicket
           }
           set (value) {
               builderResult.hasAuthTicket = true
               builderResult.authTicket = value
           }
      }
      private var authTicketBuilder_:Pogoprotos.Networking.Envelopes.AuthTicket.Builder! {
           didSet {
              builderResult.hasAuthTicket = true
           }
      }
      public func getAuthTicketBuilder() -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder {
        if authTicketBuilder_ == nil {
           authTicketBuilder_ = Pogoprotos.Networking.Envelopes.AuthTicket.Builder()
           builderResult.authTicket = authTicketBuilder_.getMessage()
           if authTicket != nil {
              try! authTicketBuilder_.mergeFrom(authTicket)
           }
        }
        return authTicketBuilder_
      }
      public func setAuthTicket(value:Pogoprotos.Networking.Envelopes.AuthTicket!) -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        self.authTicket = value
        return self
      }
      public func mergeAuthTicket(value:Pogoprotos.Networking.Envelopes.AuthTicket) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        if builderResult.hasAuthTicket {
          builderResult.authTicket = try Pogoprotos.Networking.Envelopes.AuthTicket.builderWithPrototype(builderResult.authTicket).mergeFrom(value).buildPartial()
        } else {
          builderResult.authTicket = value
        }
        builderResult.hasAuthTicket = true
        return self
      }
      public func clearAuthTicket() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        authTicketBuilder_ = nil
        builderResult.hasAuthTicket = false
        builderResult.authTicket = nil
        return self
      }
      public var hasUnknown12:Bool {
           get {
                return builderResult.hasUnknown12
           }
      }
      public var unknown12:Int64 {
           get {
                return builderResult.unknown12
           }
           set (value) {
               builderResult.hasUnknown12 = true
               builderResult.unknown12 = value
           }
      }
      public func setUnknown12(value:Int64) -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        self.unknown12 = value
        return self
      }
      public func clearUnknown12() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder{
           builderResult.hasUnknown12 = false
           builderResult.unknown12 = Int64(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        builderResult = Pogoprotos.Networking.Envelopes.RequestEnvelope()
        return self
      }
      override public func clone() throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        return try Pogoprotos.Networking.Envelopes.RequestEnvelope.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Networking.Envelopes.RequestEnvelope {
        let returnMe:Pogoprotos.Networking.Envelopes.RequestEnvelope = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Networking.Envelopes.RequestEnvelope) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        if other == Pogoprotos.Networking.Envelopes.RequestEnvelope() {
         return self
        }
        if other.hasStatusCode {
             statusCode = other.statusCode
        }
        if other.hasRequestId {
             requestId = other.requestId
        }
        if !other.requests.isEmpty  {
           builderResult.requests += other.requests
        }
        if (other.hasUnknown6) {
            try mergeUnknown6(other.unknown6)
        }
        if other.hasLatitude {
             latitude = other.latitude
        }
        if other.hasLongitude {
             longitude = other.longitude
        }
        if other.hasAltitude {
             altitude = other.altitude
        }
        if (other.hasAuthInfo) {
            try mergeAuthInfo(other.authInfo)
        }
        if (other.hasAuthTicket) {
            try mergeAuthTicket(other.authTicket)
        }
        if other.hasUnknown12 {
             unknown12 = other.unknown12
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            statusCode = try input.readInt32()

          case 24:
            requestId = try input.readUInt64()

          case 34:
            let subBuilder = Pogoprotos.Networking.Requests.Request.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            requests += [subBuilder.buildPartial()]

          case 50:
            let subBuilder:Pogoprotos.Networking.Envelopes.Unknown6.Builder = Pogoprotos.Networking.Envelopes.Unknown6.Builder()
            if hasUnknown6 {
              try subBuilder.mergeFrom(unknown6)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            unknown6 = subBuilder.buildPartial()

          case 57:
            latitude = try input.readDouble()

          case 65:
            longitude = try input.readDouble()

          case 73:
            altitude = try input.readDouble()

          case 82:
            let subBuilder:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder = Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder()
            if hasAuthInfo {
              try subBuilder.mergeFrom(authInfo)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            authInfo = subBuilder.buildPartial()

          case 90:
            let subBuilder:Pogoprotos.Networking.Envelopes.AuthTicket.Builder = Pogoprotos.Networking.Envelopes.AuthTicket.Builder()
            if hasAuthTicket {
              try subBuilder.mergeFrom(authTicket)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            authTicket = subBuilder.buildPartial()

          case 96:
            unknown12 = try input.readInt64()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        let resultDecodedBuilder = Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder()
        if let jsonValueStatusCode = jsonMap["statusCode"] as? NSNumber {
          resultDecodedBuilder.statusCode = jsonValueStatusCode.intValue
        }
        if let jsonValueRequestId = jsonMap["requestId"] as? String {
          resultDecodedBuilder.requestId = UInt64(jsonValueRequestId)!
        }
        if let jsonValueRequests = jsonMap["requests"] as? Array<Dictionary<String,AnyObject>> {
          var jsonArrayRequests:Array<Pogoprotos.Networking.Requests.Request> = []
          for oneValueRequests in jsonValueRequests {
            let messageFromStringRequests = try Pogoprotos.Networking.Requests.Request.Builder.decodeToBuilder(oneValueRequests).build()

            jsonArrayRequests += [messageFromStringRequests]
          }
          resultDecodedBuilder.requests = jsonArrayRequests
        }
        if let jsonValueUnknown6 = jsonMap["unknown6"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.unknown6 = try Pogoprotos.Networking.Envelopes.Unknown6.Builder.decodeToBuilder(jsonValueUnknown6).build()

        }
        if let jsonValueLatitude = jsonMap["latitude"] as? NSNumber {
          resultDecodedBuilder.latitude = jsonValueLatitude.doubleValue
        }
        if let jsonValueLongitude = jsonMap["longitude"] as? NSNumber {
          resultDecodedBuilder.longitude = jsonValueLongitude.doubleValue
        }
        if let jsonValueAltitude = jsonMap["altitude"] as? NSNumber {
          resultDecodedBuilder.altitude = jsonValueAltitude.doubleValue
        }
        if let jsonValueAuthInfo = jsonMap["authInfo"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.authInfo = try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder.decodeToBuilder(jsonValueAuthInfo).build()

        }
        if let jsonValueAuthTicket = jsonMap["authTicket"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.authTicket = try Pogoprotos.Networking.Envelopes.AuthTicket.Builder.decodeToBuilder(jsonValueAuthTicket).build()

        }
        if let jsonValueUnknown12 = jsonMap["unknown12"] as? String {
          resultDecodedBuilder.unknown12 = Int64(jsonValueUnknown12)!
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
