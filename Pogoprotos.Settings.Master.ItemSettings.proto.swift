// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "ItemSettings.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Pogoprotos { public struct Settings { public struct Master { }}}

public func == (lhs: Pogoprotos.Settings.Master.ItemSettings, rhs: Pogoprotos.Settings.Master.ItemSettings) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasItemId == rhs.hasItemId) && (!lhs.hasItemId || lhs.itemId == rhs.itemId)
  fieldCheck = fieldCheck && (lhs.hasItemType == rhs.hasItemType) && (!lhs.hasItemType || lhs.itemType == rhs.itemType)
  fieldCheck = fieldCheck && (lhs.hasCategory == rhs.hasCategory) && (!lhs.hasCategory || lhs.category == rhs.category)
  fieldCheck = fieldCheck && (lhs.hasDropFreq == rhs.hasDropFreq) && (!lhs.hasDropFreq || lhs.dropFreq == rhs.dropFreq)
  fieldCheck = fieldCheck && (lhs.hasDropTrainerLevel == rhs.hasDropTrainerLevel) && (!lhs.hasDropTrainerLevel || lhs.dropTrainerLevel == rhs.dropTrainerLevel)
  fieldCheck = fieldCheck && (lhs.hasPokeball == rhs.hasPokeball) && (!lhs.hasPokeball || lhs.pokeball == rhs.pokeball)
  fieldCheck = fieldCheck && (lhs.hasPotion == rhs.hasPotion) && (!lhs.hasPotion || lhs.potion == rhs.potion)
  fieldCheck = fieldCheck && (lhs.hasRevive == rhs.hasRevive) && (!lhs.hasRevive || lhs.revive == rhs.revive)
  fieldCheck = fieldCheck && (lhs.hasBattle == rhs.hasBattle) && (!lhs.hasBattle || lhs.battle == rhs.battle)
  fieldCheck = fieldCheck && (lhs.hasFood == rhs.hasFood) && (!lhs.hasFood || lhs.food == rhs.food)
  fieldCheck = fieldCheck && (lhs.hasInventoryUpgrade == rhs.hasInventoryUpgrade) && (!lhs.hasInventoryUpgrade || lhs.inventoryUpgrade == rhs.inventoryUpgrade)
  fieldCheck = fieldCheck && (lhs.hasXpBoost == rhs.hasXpBoost) && (!lhs.hasXpBoost || lhs.xpBoost == rhs.xpBoost)
  fieldCheck = fieldCheck && (lhs.hasIncense == rhs.hasIncense) && (!lhs.hasIncense || lhs.incense == rhs.incense)
  fieldCheck = fieldCheck && (lhs.hasEggIncubator == rhs.hasEggIncubator) && (!lhs.hasEggIncubator || lhs.eggIncubator == rhs.eggIncubator)
  fieldCheck = fieldCheck && (lhs.hasFortModifier == rhs.hasFortModifier) && (!lhs.hasFortModifier || lhs.fortModifier == rhs.fortModifier)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Pogoprotos.Settings.Master {
  public struct ItemSettingsRoot {
    public static var sharedInstance : ItemSettingsRoot {
     struct Static {
         static let instance : ItemSettingsRoot = ItemSettingsRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Pogoprotos.Enums.ItemCategoryRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Inventory.Item.ItemIdRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Inventory.Item.ItemTypeRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Settings.Master.Item.FoodAttributesRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Settings.Master.Item.PotionAttributesRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Settings.Master.Item.ReviveAttributesRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Settings.Master.Item.BattleAttributesRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Settings.Master.Item.IncenseAttributesRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Settings.Master.Item.PokeballAttributesRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Settings.Master.Item.FortModifierAttributesRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Settings.Master.Item.EggIncubatorAttributesRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Settings.Master.Item.ExperienceBoostAttributesRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributesRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class ItemSettings : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var itemId:Pogoprotos.Inventory.Item.ItemId = Pogoprotos.Inventory.Item.ItemId.ItemUnknown
    public private(set) var hasItemId:Bool = false
    public private(set) var itemType:Pogoprotos.Inventory.Item.ItemType = Pogoprotos.Inventory.Item.ItemType.ItemTypeNone
    public private(set) var hasItemType:Bool = false
    public private(set) var category:Pogoprotos.Enums.ItemCategory = Pogoprotos.Enums.ItemCategory.ItemCategoryNone
    public private(set) var hasCategory:Bool = false
    public private(set) var hasDropFreq:Bool = false
    public private(set) var dropFreq:Float = Float(0)

    public private(set) var hasDropTrainerLevel:Bool = false
    public private(set) var dropTrainerLevel:Int32 = Int32(0)

    public private(set) var hasPokeball:Bool = false
    public private(set) var pokeball:Pogoprotos.Settings.Master.Item.PokeballAttributes!
    public private(set) var hasPotion:Bool = false
    public private(set) var potion:Pogoprotos.Settings.Master.Item.PotionAttributes!
    public private(set) var hasRevive:Bool = false
    public private(set) var revive:Pogoprotos.Settings.Master.Item.ReviveAttributes!
    public private(set) var hasBattle:Bool = false
    public private(set) var battle:Pogoprotos.Settings.Master.Item.BattleAttributes!
    public private(set) var hasFood:Bool = false
    public private(set) var food:Pogoprotos.Settings.Master.Item.FoodAttributes!
    public private(set) var hasInventoryUpgrade:Bool = false
    public private(set) var inventoryUpgrade:Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes!
    public private(set) var hasXpBoost:Bool = false
    public private(set) var xpBoost:Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes!
    public private(set) var hasIncense:Bool = false
    public private(set) var incense:Pogoprotos.Settings.Master.Item.IncenseAttributes!
    public private(set) var hasEggIncubator:Bool = false
    public private(set) var eggIncubator:Pogoprotos.Settings.Master.Item.EggIncubatorAttributes!
    public private(set) var hasFortModifier:Bool = false
    public private(set) var fortModifier:Pogoprotos.Settings.Master.Item.FortModifierAttributes!
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasItemId {
        try output.writeEnum(1, value:itemId.rawValue)
      }
      if hasItemType {
        try output.writeEnum(2, value:itemType.rawValue)
      }
      if hasCategory {
        try output.writeEnum(3, value:category.rawValue)
      }
      if hasDropFreq {
        try output.writeFloat(4, value:dropFreq)
      }
      if hasDropTrainerLevel {
        try output.writeInt32(5, value:dropTrainerLevel)
      }
      if hasPokeball {
        try output.writeMessage(6, value:pokeball)
      }
      if hasPotion {
        try output.writeMessage(7, value:potion)
      }
      if hasRevive {
        try output.writeMessage(8, value:revive)
      }
      if hasBattle {
        try output.writeMessage(9, value:battle)
      }
      if hasFood {
        try output.writeMessage(10, value:food)
      }
      if hasInventoryUpgrade {
        try output.writeMessage(11, value:inventoryUpgrade)
      }
      if hasXpBoost {
        try output.writeMessage(12, value:xpBoost)
      }
      if hasIncense {
        try output.writeMessage(13, value:incense)
      }
      if hasEggIncubator {
        try output.writeMessage(14, value:eggIncubator)
      }
      if hasFortModifier {
        try output.writeMessage(15, value:fortModifier)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if (hasItemId) {
        serialize_size += itemId.rawValue.computeEnumSize(1)
      }
      if (hasItemType) {
        serialize_size += itemType.rawValue.computeEnumSize(2)
      }
      if (hasCategory) {
        serialize_size += category.rawValue.computeEnumSize(3)
      }
      if hasDropFreq {
        serialize_size += dropFreq.computeFloatSize(4)
      }
      if hasDropTrainerLevel {
        serialize_size += dropTrainerLevel.computeInt32Size(5)
      }
      if hasPokeball {
          if let varSizepokeball = pokeball?.computeMessageSize(6) {
              serialize_size += varSizepokeball
          }
      }
      if hasPotion {
          if let varSizepotion = potion?.computeMessageSize(7) {
              serialize_size += varSizepotion
          }
      }
      if hasRevive {
          if let varSizerevive = revive?.computeMessageSize(8) {
              serialize_size += varSizerevive
          }
      }
      if hasBattle {
          if let varSizebattle = battle?.computeMessageSize(9) {
              serialize_size += varSizebattle
          }
      }
      if hasFood {
          if let varSizefood = food?.computeMessageSize(10) {
              serialize_size += varSizefood
          }
      }
      if hasInventoryUpgrade {
          if let varSizeinventoryUpgrade = inventoryUpgrade?.computeMessageSize(11) {
              serialize_size += varSizeinventoryUpgrade
          }
      }
      if hasXpBoost {
          if let varSizexpBoost = xpBoost?.computeMessageSize(12) {
              serialize_size += varSizexpBoost
          }
      }
      if hasIncense {
          if let varSizeincense = incense?.computeMessageSize(13) {
              serialize_size += varSizeincense
          }
      }
      if hasEggIncubator {
          if let varSizeeggIncubator = eggIncubator?.computeMessageSize(14) {
              serialize_size += varSizeeggIncubator
          }
      }
      if hasFortModifier {
          if let varSizefortModifier = fortModifier?.computeMessageSize(15) {
              serialize_size += varSizefortModifier
          }
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Settings.Master.ItemSettings> {
      var mergedArray = Array<Pogoprotos.Settings.Master.ItemSettings>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.Master.ItemSettings? {
      return try Pogoprotos.Settings.Master.ItemSettings.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Settings.Master.ItemSettings {
      return try Pogoprotos.Settings.Master.ItemSettings.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Settings.Master.ItemSettingsRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.ItemSettings {
      return try Pogoprotos.Settings.Master.ItemSettings.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.Master.ItemSettings {
      return try Pogoprotos.Settings.Master.ItemSettings.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.ItemSettings {
      return try Pogoprotos.Settings.Master.ItemSettings.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.Master.ItemSettings {
      return try Pogoprotos.Settings.Master.ItemSettings.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.ItemSettings {
      return try Pogoprotos.Settings.Master.ItemSettings.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Settings.Master.ItemSettings.Builder {
      return Pogoprotos.Settings.Master.ItemSettings.classBuilder() as! Pogoprotos.Settings.Master.ItemSettings.Builder
    }
    public func getBuilder() -> Pogoprotos.Settings.Master.ItemSettings.Builder {
      return classBuilder() as! Pogoprotos.Settings.Master.ItemSettings.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.Master.ItemSettings.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.Master.ItemSettings.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Settings.Master.ItemSettings.Builder {
      return try Pogoprotos.Settings.Master.ItemSettings.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Settings.Master.ItemSettings) throws -> Pogoprotos.Settings.Master.ItemSettings.Builder {
      return try Pogoprotos.Settings.Master.ItemSettings.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasItemId {
        jsonMap["itemId"] = itemId.toString()
      }
      if hasItemType {
        jsonMap["itemType"] = itemType.toString()
      }
      if hasCategory {
        jsonMap["category"] = category.toString()
      }
      if hasDropFreq {
        jsonMap["dropFreq"] = NSNumber(float:dropFreq)
      }
      if hasDropTrainerLevel {
        jsonMap["dropTrainerLevel"] = NSNumber(int:dropTrainerLevel)
      }
      if hasPokeball {
        jsonMap["pokeball"] = try pokeball.encode()
      }
      if hasPotion {
        jsonMap["potion"] = try potion.encode()
      }
      if hasRevive {
        jsonMap["revive"] = try revive.encode()
      }
      if hasBattle {
        jsonMap["battle"] = try battle.encode()
      }
      if hasFood {
        jsonMap["food"] = try food.encode()
      }
      if hasInventoryUpgrade {
        jsonMap["inventoryUpgrade"] = try inventoryUpgrade.encode()
      }
      if hasXpBoost {
        jsonMap["xpBoost"] = try xpBoost.encode()
      }
      if hasIncense {
        jsonMap["incense"] = try incense.encode()
      }
      if hasEggIncubator {
        jsonMap["eggIncubator"] = try eggIncubator.encode()
      }
      if hasFortModifier {
        jsonMap["fortModifier"] = try fortModifier.encode()
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.Master.ItemSettings {
      return try Pogoprotos.Settings.Master.ItemSettings.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Settings.Master.ItemSettings {
      return try Pogoprotos.Settings.Master.ItemSettings.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if (hasItemId) {
        output += "\(indent) itemId: \(itemId.description)\n"
      }
      if (hasItemType) {
        output += "\(indent) itemType: \(itemType.description)\n"
      }
      if (hasCategory) {
        output += "\(indent) category: \(category.description)\n"
      }
      if hasDropFreq {
        output += "\(indent) dropFreq: \(dropFreq) \n"
      }
      if hasDropTrainerLevel {
        output += "\(indent) dropTrainerLevel: \(dropTrainerLevel) \n"
      }
      if hasPokeball {
        output += "\(indent) pokeball {\n"
        if let outDescPokeball = pokeball {
          output += try outDescPokeball.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasPotion {
        output += "\(indent) potion {\n"
        if let outDescPotion = potion {
          output += try outDescPotion.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasRevive {
        output += "\(indent) revive {\n"
        if let outDescRevive = revive {
          output += try outDescRevive.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasBattle {
        output += "\(indent) battle {\n"
        if let outDescBattle = battle {
          output += try outDescBattle.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasFood {
        output += "\(indent) food {\n"
        if let outDescFood = food {
          output += try outDescFood.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasInventoryUpgrade {
        output += "\(indent) inventoryUpgrade {\n"
        if let outDescInventoryUpgrade = inventoryUpgrade {
          output += try outDescInventoryUpgrade.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasXpBoost {
        output += "\(indent) xpBoost {\n"
        if let outDescXpBoost = xpBoost {
          output += try outDescXpBoost.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasIncense {
        output += "\(indent) incense {\n"
        if let outDescIncense = incense {
          output += try outDescIncense.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasEggIncubator {
        output += "\(indent) eggIncubator {\n"
        if let outDescEggIncubator = eggIncubator {
          output += try outDescEggIncubator.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasFortModifier {
        output += "\(indent) fortModifier {\n"
        if let outDescFortModifier = fortModifier {
          output += try outDescFortModifier.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasItemId {
               hashCode = (hashCode &* 31) &+ Int(itemId.rawValue)
            }
            if hasItemType {
               hashCode = (hashCode &* 31) &+ Int(itemType.rawValue)
            }
            if hasCategory {
               hashCode = (hashCode &* 31) &+ Int(category.rawValue)
            }
            if hasDropFreq {
               hashCode = (hashCode &* 31) &+ dropFreq.hashValue
            }
            if hasDropTrainerLevel {
               hashCode = (hashCode &* 31) &+ dropTrainerLevel.hashValue
            }
            if hasPokeball {
                if let hashValuepokeball = pokeball?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuepokeball
                }
            }
            if hasPotion {
                if let hashValuepotion = potion?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuepotion
                }
            }
            if hasRevive {
                if let hashValuerevive = revive?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuerevive
                }
            }
            if hasBattle {
                if let hashValuebattle = battle?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuebattle
                }
            }
            if hasFood {
                if let hashValuefood = food?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuefood
                }
            }
            if hasInventoryUpgrade {
                if let hashValueinventoryUpgrade = inventoryUpgrade?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueinventoryUpgrade
                }
            }
            if hasXpBoost {
                if let hashValuexpBoost = xpBoost?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuexpBoost
                }
            }
            if hasIncense {
                if let hashValueincense = incense?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueincense
                }
            }
            if hasEggIncubator {
                if let hashValueeggIncubator = eggIncubator?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueeggIncubator
                }
            }
            if hasFortModifier {
                if let hashValuefortModifier = fortModifier?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuefortModifier
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Settings.Master.ItemSettings"
    }
    override public func className() -> String {
        return "Pogoprotos.Settings.Master.ItemSettings"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Settings.Master.ItemSettings.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Settings.Master.ItemSettings = Pogoprotos.Settings.Master.ItemSettings()
      public func getMessage() -> Pogoprotos.Settings.Master.ItemSettings {
          return builderResult
      }

      required override public init () {
         super.init()
      }
        public var hasItemId:Bool{
            get {
                return builderResult.hasItemId
            }
        }
        public var itemId:Pogoprotos.Inventory.Item.ItemId {
            get {
                return builderResult.itemId
            }
            set (value) {
                builderResult.hasItemId = true
                builderResult.itemId = value
            }
        }
        public func setItemId(value:Pogoprotos.Inventory.Item.ItemId) -> Pogoprotos.Settings.Master.ItemSettings.Builder {
          self.itemId = value
          return self
        }
        public func clearItemId() -> Pogoprotos.Settings.Master.ItemSettings.Builder {
           builderResult.hasItemId = false
           builderResult.itemId = .ItemUnknown
           return self
        }
        public var hasItemType:Bool{
            get {
                return builderResult.hasItemType
            }
        }
        public var itemType:Pogoprotos.Inventory.Item.ItemType {
            get {
                return builderResult.itemType
            }
            set (value) {
                builderResult.hasItemType = true
                builderResult.itemType = value
            }
        }
        public func setItemType(value:Pogoprotos.Inventory.Item.ItemType) -> Pogoprotos.Settings.Master.ItemSettings.Builder {
          self.itemType = value
          return self
        }
        public func clearItemType() -> Pogoprotos.Settings.Master.ItemSettings.Builder {
           builderResult.hasItemType = false
           builderResult.itemType = .ItemTypeNone
           return self
        }
        public var hasCategory:Bool{
            get {
                return builderResult.hasCategory
            }
        }
        public var category:Pogoprotos.Enums.ItemCategory {
            get {
                return builderResult.category
            }
            set (value) {
                builderResult.hasCategory = true
                builderResult.category = value
            }
        }
        public func setCategory(value:Pogoprotos.Enums.ItemCategory) -> Pogoprotos.Settings.Master.ItemSettings.Builder {
          self.category = value
          return self
        }
        public func clearCategory() -> Pogoprotos.Settings.Master.ItemSettings.Builder {
           builderResult.hasCategory = false
           builderResult.category = .ItemCategoryNone
           return self
        }
      public var hasDropFreq:Bool {
           get {
                return builderResult.hasDropFreq
           }
      }
      public var dropFreq:Float {
           get {
                return builderResult.dropFreq
           }
           set (value) {
               builderResult.hasDropFreq = true
               builderResult.dropFreq = value
           }
      }
      public func setDropFreq(value:Float) -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        self.dropFreq = value
        return self
      }
      public func clearDropFreq() -> Pogoprotos.Settings.Master.ItemSettings.Builder{
           builderResult.hasDropFreq = false
           builderResult.dropFreq = Float(0)
           return self
      }
      public var hasDropTrainerLevel:Bool {
           get {
                return builderResult.hasDropTrainerLevel
           }
      }
      public var dropTrainerLevel:Int32 {
           get {
                return builderResult.dropTrainerLevel
           }
           set (value) {
               builderResult.hasDropTrainerLevel = true
               builderResult.dropTrainerLevel = value
           }
      }
      public func setDropTrainerLevel(value:Int32) -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        self.dropTrainerLevel = value
        return self
      }
      public func clearDropTrainerLevel() -> Pogoprotos.Settings.Master.ItemSettings.Builder{
           builderResult.hasDropTrainerLevel = false
           builderResult.dropTrainerLevel = Int32(0)
           return self
      }
      public var hasPokeball:Bool {
           get {
               return builderResult.hasPokeball
           }
      }
      public var pokeball:Pogoprotos.Settings.Master.Item.PokeballAttributes! {
           get {
               if pokeballBuilder_ != nil {
                  builderResult.pokeball = pokeballBuilder_.getMessage()
               }
               return builderResult.pokeball
           }
           set (value) {
               builderResult.hasPokeball = true
               builderResult.pokeball = value
           }
      }
      private var pokeballBuilder_:Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder! {
           didSet {
              builderResult.hasPokeball = true
           }
      }
      public func getPokeballBuilder() -> Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder {
        if pokeballBuilder_ == nil {
           pokeballBuilder_ = Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder()
           builderResult.pokeball = pokeballBuilder_.getMessage()
           if pokeball != nil {
              try! pokeballBuilder_.mergeFrom(pokeball)
           }
        }
        return pokeballBuilder_
      }
      public func setPokeball(value:Pogoprotos.Settings.Master.Item.PokeballAttributes!) -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        self.pokeball = value
        return self
      }
      public func mergePokeball(value:Pogoprotos.Settings.Master.Item.PokeballAttributes) throws -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        if builderResult.hasPokeball {
          builderResult.pokeball = try Pogoprotos.Settings.Master.Item.PokeballAttributes.builderWithPrototype(builderResult.pokeball).mergeFrom(value).buildPartial()
        } else {
          builderResult.pokeball = value
        }
        builderResult.hasPokeball = true
        return self
      }
      public func clearPokeball() -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        pokeballBuilder_ = nil
        builderResult.hasPokeball = false
        builderResult.pokeball = nil
        return self
      }
      public var hasPotion:Bool {
           get {
               return builderResult.hasPotion
           }
      }
      public var potion:Pogoprotos.Settings.Master.Item.PotionAttributes! {
           get {
               if potionBuilder_ != nil {
                  builderResult.potion = potionBuilder_.getMessage()
               }
               return builderResult.potion
           }
           set (value) {
               builderResult.hasPotion = true
               builderResult.potion = value
           }
      }
      private var potionBuilder_:Pogoprotos.Settings.Master.Item.PotionAttributes.Builder! {
           didSet {
              builderResult.hasPotion = true
           }
      }
      public func getPotionBuilder() -> Pogoprotos.Settings.Master.Item.PotionAttributes.Builder {
        if potionBuilder_ == nil {
           potionBuilder_ = Pogoprotos.Settings.Master.Item.PotionAttributes.Builder()
           builderResult.potion = potionBuilder_.getMessage()
           if potion != nil {
              try! potionBuilder_.mergeFrom(potion)
           }
        }
        return potionBuilder_
      }
      public func setPotion(value:Pogoprotos.Settings.Master.Item.PotionAttributes!) -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        self.potion = value
        return self
      }
      public func mergePotion(value:Pogoprotos.Settings.Master.Item.PotionAttributes) throws -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        if builderResult.hasPotion {
          builderResult.potion = try Pogoprotos.Settings.Master.Item.PotionAttributes.builderWithPrototype(builderResult.potion).mergeFrom(value).buildPartial()
        } else {
          builderResult.potion = value
        }
        builderResult.hasPotion = true
        return self
      }
      public func clearPotion() -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        potionBuilder_ = nil
        builderResult.hasPotion = false
        builderResult.potion = nil
        return self
      }
      public var hasRevive:Bool {
           get {
               return builderResult.hasRevive
           }
      }
      public var revive:Pogoprotos.Settings.Master.Item.ReviveAttributes! {
           get {
               if reviveBuilder_ != nil {
                  builderResult.revive = reviveBuilder_.getMessage()
               }
               return builderResult.revive
           }
           set (value) {
               builderResult.hasRevive = true
               builderResult.revive = value
           }
      }
      private var reviveBuilder_:Pogoprotos.Settings.Master.Item.ReviveAttributes.Builder! {
           didSet {
              builderResult.hasRevive = true
           }
      }
      public func getReviveBuilder() -> Pogoprotos.Settings.Master.Item.ReviveAttributes.Builder {
        if reviveBuilder_ == nil {
           reviveBuilder_ = Pogoprotos.Settings.Master.Item.ReviveAttributes.Builder()
           builderResult.revive = reviveBuilder_.getMessage()
           if revive != nil {
              try! reviveBuilder_.mergeFrom(revive)
           }
        }
        return reviveBuilder_
      }
      public func setRevive(value:Pogoprotos.Settings.Master.Item.ReviveAttributes!) -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        self.revive = value
        return self
      }
      public func mergeRevive(value:Pogoprotos.Settings.Master.Item.ReviveAttributes) throws -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        if builderResult.hasRevive {
          builderResult.revive = try Pogoprotos.Settings.Master.Item.ReviveAttributes.builderWithPrototype(builderResult.revive).mergeFrom(value).buildPartial()
        } else {
          builderResult.revive = value
        }
        builderResult.hasRevive = true
        return self
      }
      public func clearRevive() -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        reviveBuilder_ = nil
        builderResult.hasRevive = false
        builderResult.revive = nil
        return self
      }
      public var hasBattle:Bool {
           get {
               return builderResult.hasBattle
           }
      }
      public var battle:Pogoprotos.Settings.Master.Item.BattleAttributes! {
           get {
               if battleBuilder_ != nil {
                  builderResult.battle = battleBuilder_.getMessage()
               }
               return builderResult.battle
           }
           set (value) {
               builderResult.hasBattle = true
               builderResult.battle = value
           }
      }
      private var battleBuilder_:Pogoprotos.Settings.Master.Item.BattleAttributes.Builder! {
           didSet {
              builderResult.hasBattle = true
           }
      }
      public func getBattleBuilder() -> Pogoprotos.Settings.Master.Item.BattleAttributes.Builder {
        if battleBuilder_ == nil {
           battleBuilder_ = Pogoprotos.Settings.Master.Item.BattleAttributes.Builder()
           builderResult.battle = battleBuilder_.getMessage()
           if battle != nil {
              try! battleBuilder_.mergeFrom(battle)
           }
        }
        return battleBuilder_
      }
      public func setBattle(value:Pogoprotos.Settings.Master.Item.BattleAttributes!) -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        self.battle = value
        return self
      }
      public func mergeBattle(value:Pogoprotos.Settings.Master.Item.BattleAttributes) throws -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        if builderResult.hasBattle {
          builderResult.battle = try Pogoprotos.Settings.Master.Item.BattleAttributes.builderWithPrototype(builderResult.battle).mergeFrom(value).buildPartial()
        } else {
          builderResult.battle = value
        }
        builderResult.hasBattle = true
        return self
      }
      public func clearBattle() -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        battleBuilder_ = nil
        builderResult.hasBattle = false
        builderResult.battle = nil
        return self
      }
      public var hasFood:Bool {
           get {
               return builderResult.hasFood
           }
      }
      public var food:Pogoprotos.Settings.Master.Item.FoodAttributes! {
           get {
               if foodBuilder_ != nil {
                  builderResult.food = foodBuilder_.getMessage()
               }
               return builderResult.food
           }
           set (value) {
               builderResult.hasFood = true
               builderResult.food = value
           }
      }
      private var foodBuilder_:Pogoprotos.Settings.Master.Item.FoodAttributes.Builder! {
           didSet {
              builderResult.hasFood = true
           }
      }
      public func getFoodBuilder() -> Pogoprotos.Settings.Master.Item.FoodAttributes.Builder {
        if foodBuilder_ == nil {
           foodBuilder_ = Pogoprotos.Settings.Master.Item.FoodAttributes.Builder()
           builderResult.food = foodBuilder_.getMessage()
           if food != nil {
              try! foodBuilder_.mergeFrom(food)
           }
        }
        return foodBuilder_
      }
      public func setFood(value:Pogoprotos.Settings.Master.Item.FoodAttributes!) -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        self.food = value
        return self
      }
      public func mergeFood(value:Pogoprotos.Settings.Master.Item.FoodAttributes) throws -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        if builderResult.hasFood {
          builderResult.food = try Pogoprotos.Settings.Master.Item.FoodAttributes.builderWithPrototype(builderResult.food).mergeFrom(value).buildPartial()
        } else {
          builderResult.food = value
        }
        builderResult.hasFood = true
        return self
      }
      public func clearFood() -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        foodBuilder_ = nil
        builderResult.hasFood = false
        builderResult.food = nil
        return self
      }
      public var hasInventoryUpgrade:Bool {
           get {
               return builderResult.hasInventoryUpgrade
           }
      }
      public var inventoryUpgrade:Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes! {
           get {
               if inventoryUpgradeBuilder_ != nil {
                  builderResult.inventoryUpgrade = inventoryUpgradeBuilder_.getMessage()
               }
               return builderResult.inventoryUpgrade
           }
           set (value) {
               builderResult.hasInventoryUpgrade = true
               builderResult.inventoryUpgrade = value
           }
      }
      private var inventoryUpgradeBuilder_:Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes.Builder! {
           didSet {
              builderResult.hasInventoryUpgrade = true
           }
      }
      public func getInventoryUpgradeBuilder() -> Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes.Builder {
        if inventoryUpgradeBuilder_ == nil {
           inventoryUpgradeBuilder_ = Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes.Builder()
           builderResult.inventoryUpgrade = inventoryUpgradeBuilder_.getMessage()
           if inventoryUpgrade != nil {
              try! inventoryUpgradeBuilder_.mergeFrom(inventoryUpgrade)
           }
        }
        return inventoryUpgradeBuilder_
      }
      public func setInventoryUpgrade(value:Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes!) -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        self.inventoryUpgrade = value
        return self
      }
      public func mergeInventoryUpgrade(value:Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes) throws -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        if builderResult.hasInventoryUpgrade {
          builderResult.inventoryUpgrade = try Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes.builderWithPrototype(builderResult.inventoryUpgrade).mergeFrom(value).buildPartial()
        } else {
          builderResult.inventoryUpgrade = value
        }
        builderResult.hasInventoryUpgrade = true
        return self
      }
      public func clearInventoryUpgrade() -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        inventoryUpgradeBuilder_ = nil
        builderResult.hasInventoryUpgrade = false
        builderResult.inventoryUpgrade = nil
        return self
      }
      public var hasXpBoost:Bool {
           get {
               return builderResult.hasXpBoost
           }
      }
      public var xpBoost:Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes! {
           get {
               if xpBoostBuilder_ != nil {
                  builderResult.xpBoost = xpBoostBuilder_.getMessage()
               }
               return builderResult.xpBoost
           }
           set (value) {
               builderResult.hasXpBoost = true
               builderResult.xpBoost = value
           }
      }
      private var xpBoostBuilder_:Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes.Builder! {
           didSet {
              builderResult.hasXpBoost = true
           }
      }
      public func getXpBoostBuilder() -> Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes.Builder {
        if xpBoostBuilder_ == nil {
           xpBoostBuilder_ = Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes.Builder()
           builderResult.xpBoost = xpBoostBuilder_.getMessage()
           if xpBoost != nil {
              try! xpBoostBuilder_.mergeFrom(xpBoost)
           }
        }
        return xpBoostBuilder_
      }
      public func setXpBoost(value:Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes!) -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        self.xpBoost = value
        return self
      }
      public func mergeXpBoost(value:Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes) throws -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        if builderResult.hasXpBoost {
          builderResult.xpBoost = try Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes.builderWithPrototype(builderResult.xpBoost).mergeFrom(value).buildPartial()
        } else {
          builderResult.xpBoost = value
        }
        builderResult.hasXpBoost = true
        return self
      }
      public func clearXpBoost() -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        xpBoostBuilder_ = nil
        builderResult.hasXpBoost = false
        builderResult.xpBoost = nil
        return self
      }
      public var hasIncense:Bool {
           get {
               return builderResult.hasIncense
           }
      }
      public var incense:Pogoprotos.Settings.Master.Item.IncenseAttributes! {
           get {
               if incenseBuilder_ != nil {
                  builderResult.incense = incenseBuilder_.getMessage()
               }
               return builderResult.incense
           }
           set (value) {
               builderResult.hasIncense = true
               builderResult.incense = value
           }
      }
      private var incenseBuilder_:Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder! {
           didSet {
              builderResult.hasIncense = true
           }
      }
      public func getIncenseBuilder() -> Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder {
        if incenseBuilder_ == nil {
           incenseBuilder_ = Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder()
           builderResult.incense = incenseBuilder_.getMessage()
           if incense != nil {
              try! incenseBuilder_.mergeFrom(incense)
           }
        }
        return incenseBuilder_
      }
      public func setIncense(value:Pogoprotos.Settings.Master.Item.IncenseAttributes!) -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        self.incense = value
        return self
      }
      public func mergeIncense(value:Pogoprotos.Settings.Master.Item.IncenseAttributes) throws -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        if builderResult.hasIncense {
          builderResult.incense = try Pogoprotos.Settings.Master.Item.IncenseAttributes.builderWithPrototype(builderResult.incense).mergeFrom(value).buildPartial()
        } else {
          builderResult.incense = value
        }
        builderResult.hasIncense = true
        return self
      }
      public func clearIncense() -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        incenseBuilder_ = nil
        builderResult.hasIncense = false
        builderResult.incense = nil
        return self
      }
      public var hasEggIncubator:Bool {
           get {
               return builderResult.hasEggIncubator
           }
      }
      public var eggIncubator:Pogoprotos.Settings.Master.Item.EggIncubatorAttributes! {
           get {
               if eggIncubatorBuilder_ != nil {
                  builderResult.eggIncubator = eggIncubatorBuilder_.getMessage()
               }
               return builderResult.eggIncubator
           }
           set (value) {
               builderResult.hasEggIncubator = true
               builderResult.eggIncubator = value
           }
      }
      private var eggIncubatorBuilder_:Pogoprotos.Settings.Master.Item.EggIncubatorAttributes.Builder! {
           didSet {
              builderResult.hasEggIncubator = true
           }
      }
      public func getEggIncubatorBuilder() -> Pogoprotos.Settings.Master.Item.EggIncubatorAttributes.Builder {
        if eggIncubatorBuilder_ == nil {
           eggIncubatorBuilder_ = Pogoprotos.Settings.Master.Item.EggIncubatorAttributes.Builder()
           builderResult.eggIncubator = eggIncubatorBuilder_.getMessage()
           if eggIncubator != nil {
              try! eggIncubatorBuilder_.mergeFrom(eggIncubator)
           }
        }
        return eggIncubatorBuilder_
      }
      public func setEggIncubator(value:Pogoprotos.Settings.Master.Item.EggIncubatorAttributes!) -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        self.eggIncubator = value
        return self
      }
      public func mergeEggIncubator(value:Pogoprotos.Settings.Master.Item.EggIncubatorAttributes) throws -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        if builderResult.hasEggIncubator {
          builderResult.eggIncubator = try Pogoprotos.Settings.Master.Item.EggIncubatorAttributes.builderWithPrototype(builderResult.eggIncubator).mergeFrom(value).buildPartial()
        } else {
          builderResult.eggIncubator = value
        }
        builderResult.hasEggIncubator = true
        return self
      }
      public func clearEggIncubator() -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        eggIncubatorBuilder_ = nil
        builderResult.hasEggIncubator = false
        builderResult.eggIncubator = nil
        return self
      }
      public var hasFortModifier:Bool {
           get {
               return builderResult.hasFortModifier
           }
      }
      public var fortModifier:Pogoprotos.Settings.Master.Item.FortModifierAttributes! {
           get {
               if fortModifierBuilder_ != nil {
                  builderResult.fortModifier = fortModifierBuilder_.getMessage()
               }
               return builderResult.fortModifier
           }
           set (value) {
               builderResult.hasFortModifier = true
               builderResult.fortModifier = value
           }
      }
      private var fortModifierBuilder_:Pogoprotos.Settings.Master.Item.FortModifierAttributes.Builder! {
           didSet {
              builderResult.hasFortModifier = true
           }
      }
      public func getFortModifierBuilder() -> Pogoprotos.Settings.Master.Item.FortModifierAttributes.Builder {
        if fortModifierBuilder_ == nil {
           fortModifierBuilder_ = Pogoprotos.Settings.Master.Item.FortModifierAttributes.Builder()
           builderResult.fortModifier = fortModifierBuilder_.getMessage()
           if fortModifier != nil {
              try! fortModifierBuilder_.mergeFrom(fortModifier)
           }
        }
        return fortModifierBuilder_
      }
      public func setFortModifier(value:Pogoprotos.Settings.Master.Item.FortModifierAttributes!) -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        self.fortModifier = value
        return self
      }
      public func mergeFortModifier(value:Pogoprotos.Settings.Master.Item.FortModifierAttributes) throws -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        if builderResult.hasFortModifier {
          builderResult.fortModifier = try Pogoprotos.Settings.Master.Item.FortModifierAttributes.builderWithPrototype(builderResult.fortModifier).mergeFrom(value).buildPartial()
        } else {
          builderResult.fortModifier = value
        }
        builderResult.hasFortModifier = true
        return self
      }
      public func clearFortModifier() -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        fortModifierBuilder_ = nil
        builderResult.hasFortModifier = false
        builderResult.fortModifier = nil
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        builderResult = Pogoprotos.Settings.Master.ItemSettings()
        return self
      }
      override public func clone() throws -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        return try Pogoprotos.Settings.Master.ItemSettings.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Settings.Master.ItemSettings {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Settings.Master.ItemSettings {
        let returnMe:Pogoprotos.Settings.Master.ItemSettings = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Settings.Master.ItemSettings) throws -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        if other == Pogoprotos.Settings.Master.ItemSettings() {
         return self
        }
        if other.hasItemId {
             itemId = other.itemId
        }
        if other.hasItemType {
             itemType = other.itemType
        }
        if other.hasCategory {
             category = other.category
        }
        if other.hasDropFreq {
             dropFreq = other.dropFreq
        }
        if other.hasDropTrainerLevel {
             dropTrainerLevel = other.dropTrainerLevel
        }
        if (other.hasPokeball) {
            try mergePokeball(other.pokeball)
        }
        if (other.hasPotion) {
            try mergePotion(other.potion)
        }
        if (other.hasRevive) {
            try mergeRevive(other.revive)
        }
        if (other.hasBattle) {
            try mergeBattle(other.battle)
        }
        if (other.hasFood) {
            try mergeFood(other.food)
        }
        if (other.hasInventoryUpgrade) {
            try mergeInventoryUpgrade(other.inventoryUpgrade)
        }
        if (other.hasXpBoost) {
            try mergeXpBoost(other.xpBoost)
        }
        if (other.hasIncense) {
            try mergeIncense(other.incense)
        }
        if (other.hasEggIncubator) {
            try mergeEggIncubator(other.eggIncubator)
        }
        if (other.hasFortModifier) {
            try mergeFortModifier(other.fortModifier)
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.Master.ItemSettings.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            let valueIntitemId = try input.readEnum()
            if let enumsitemId = Pogoprotos.Inventory.Item.ItemId(rawValue:valueIntitemId){
                 itemId = enumsitemId
            } else {
                 try unknownFieldsBuilder.mergeVarintField(1, value:Int64(valueIntitemId))
            }

          case 16:
            let valueIntitemType = try input.readEnum()
            if let enumsitemType = Pogoprotos.Inventory.Item.ItemType(rawValue:valueIntitemType){
                 itemType = enumsitemType
            } else {
                 try unknownFieldsBuilder.mergeVarintField(2, value:Int64(valueIntitemType))
            }

          case 24:
            let valueIntcategory = try input.readEnum()
            if let enumscategory = Pogoprotos.Enums.ItemCategory(rawValue:valueIntcategory){
                 category = enumscategory
            } else {
                 try unknownFieldsBuilder.mergeVarintField(3, value:Int64(valueIntcategory))
            }

          case 37:
            dropFreq = try input.readFloat()

          case 40:
            dropTrainerLevel = try input.readInt32()

          case 50:
            let subBuilder:Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder = Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder()
            if hasPokeball {
              try subBuilder.mergeFrom(pokeball)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            pokeball = subBuilder.buildPartial()

          case 58:
            let subBuilder:Pogoprotos.Settings.Master.Item.PotionAttributes.Builder = Pogoprotos.Settings.Master.Item.PotionAttributes.Builder()
            if hasPotion {
              try subBuilder.mergeFrom(potion)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            potion = subBuilder.buildPartial()

          case 66:
            let subBuilder:Pogoprotos.Settings.Master.Item.ReviveAttributes.Builder = Pogoprotos.Settings.Master.Item.ReviveAttributes.Builder()
            if hasRevive {
              try subBuilder.mergeFrom(revive)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            revive = subBuilder.buildPartial()

          case 74:
            let subBuilder:Pogoprotos.Settings.Master.Item.BattleAttributes.Builder = Pogoprotos.Settings.Master.Item.BattleAttributes.Builder()
            if hasBattle {
              try subBuilder.mergeFrom(battle)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            battle = subBuilder.buildPartial()

          case 82:
            let subBuilder:Pogoprotos.Settings.Master.Item.FoodAttributes.Builder = Pogoprotos.Settings.Master.Item.FoodAttributes.Builder()
            if hasFood {
              try subBuilder.mergeFrom(food)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            food = subBuilder.buildPartial()

          case 90:
            let subBuilder:Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes.Builder = Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes.Builder()
            if hasInventoryUpgrade {
              try subBuilder.mergeFrom(inventoryUpgrade)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            inventoryUpgrade = subBuilder.buildPartial()

          case 98:
            let subBuilder:Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes.Builder = Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes.Builder()
            if hasXpBoost {
              try subBuilder.mergeFrom(xpBoost)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            xpBoost = subBuilder.buildPartial()

          case 106:
            let subBuilder:Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder = Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder()
            if hasIncense {
              try subBuilder.mergeFrom(incense)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            incense = subBuilder.buildPartial()

          case 114:
            let subBuilder:Pogoprotos.Settings.Master.Item.EggIncubatorAttributes.Builder = Pogoprotos.Settings.Master.Item.EggIncubatorAttributes.Builder()
            if hasEggIncubator {
              try subBuilder.mergeFrom(eggIncubator)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            eggIncubator = subBuilder.buildPartial()

          case 122:
            let subBuilder:Pogoprotos.Settings.Master.Item.FortModifierAttributes.Builder = Pogoprotos.Settings.Master.Item.FortModifierAttributes.Builder()
            if hasFortModifier {
              try subBuilder.mergeFrom(fortModifier)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            fortModifier = subBuilder.buildPartial()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        let resultDecodedBuilder = Pogoprotos.Settings.Master.ItemSettings.Builder()
        if let jsonValueItemId = jsonMap["itemId"] as? String {
          resultDecodedBuilder.itemId = try Pogoprotos.Inventory.Item.ItemId.fromString(jsonValueItemId)
        }
        if let jsonValueItemType = jsonMap["itemType"] as? String {
          resultDecodedBuilder.itemType = try Pogoprotos.Inventory.Item.ItemType.fromString(jsonValueItemType)
        }
        if let jsonValueCategory = jsonMap["category"] as? String {
          resultDecodedBuilder.category = try Pogoprotos.Enums.ItemCategory.fromString(jsonValueCategory)
        }
        if let jsonValueDropFreq = jsonMap["dropFreq"] as? NSNumber {
          resultDecodedBuilder.dropFreq = jsonValueDropFreq.floatValue
        }
        if let jsonValueDropTrainerLevel = jsonMap["dropTrainerLevel"] as? NSNumber {
          resultDecodedBuilder.dropTrainerLevel = jsonValueDropTrainerLevel.intValue
        }
        if let jsonValuePokeball = jsonMap["pokeball"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.pokeball = try Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder.decodeToBuilder(jsonValuePokeball).build()

        }
        if let jsonValuePotion = jsonMap["potion"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.potion = try Pogoprotos.Settings.Master.Item.PotionAttributes.Builder.decodeToBuilder(jsonValuePotion).build()

        }
        if let jsonValueRevive = jsonMap["revive"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.revive = try Pogoprotos.Settings.Master.Item.ReviveAttributes.Builder.decodeToBuilder(jsonValueRevive).build()

        }
        if let jsonValueBattle = jsonMap["battle"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.battle = try Pogoprotos.Settings.Master.Item.BattleAttributes.Builder.decodeToBuilder(jsonValueBattle).build()

        }
        if let jsonValueFood = jsonMap["food"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.food = try Pogoprotos.Settings.Master.Item.FoodAttributes.Builder.decodeToBuilder(jsonValueFood).build()

        }
        if let jsonValueInventoryUpgrade = jsonMap["inventoryUpgrade"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.inventoryUpgrade = try Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes.Builder.decodeToBuilder(jsonValueInventoryUpgrade).build()

        }
        if let jsonValueXpBoost = jsonMap["xpBoost"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.xpBoost = try Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes.Builder.decodeToBuilder(jsonValueXpBoost).build()

        }
        if let jsonValueIncense = jsonMap["incense"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.incense = try Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder.decodeToBuilder(jsonValueIncense).build()

        }
        if let jsonValueEggIncubator = jsonMap["eggIncubator"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.eggIncubator = try Pogoprotos.Settings.Master.Item.EggIncubatorAttributes.Builder.decodeToBuilder(jsonValueEggIncubator).build()

        }
        if let jsonValueFortModifier = jsonMap["fortModifier"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.fortModifier = try Pogoprotos.Settings.Master.Item.FortModifierAttributes.Builder.decodeToBuilder(jsonValueFortModifier).build()

        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Settings.Master.ItemSettings.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
